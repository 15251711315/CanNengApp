(global["webpackJsonp"] = global["webpackJsonp"] || []).push([["common/vendor"],{

/***/ 1:
/*!***********************************************************!*\
  !*** ./node_modules/@dcloudio/uni-app-plus/dist/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.createApp = createApp;exports.createComponent = createComponent;exports.createPage = createPage;exports.default = void 0;var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};var ownKeys = Object.keys(source);if (typeof Object.getOwnPropertySymbols === 'function') {ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {return Object.getOwnPropertyDescriptor(source, sym).enumerable;}));}ownKeys.forEach(function (key) {_defineProperty(target, key, source[key]);});}return target;}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");}function _iterableToArrayLimit(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i[\"return\"] != null) _i[\"return\"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError(\"Invalid attempt to spread non-iterable instance\");}function _iterableToArray(iter) {if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;}}\n\nvar _toString = Object.prototype.toString;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction isFn(fn) {\n  return typeof fn === 'function';\n}\n\nfunction isStr(str) {\n  return typeof str === 'string';\n}\n\nfunction isPlainObject(obj) {\n  return _toString.call(obj) === '[object Object]';\n}\n\nfunction hasOwn(obj, key) {\n  return hasOwnProperty.call(obj, key);\n}\n\nfunction noop() {}\n\n/**\r\n                    * Create a cached version of a pure function.\r\n                    */\nfunction cached(fn) {\n  var cache = Object.create(null);\n  return function cachedFn(str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str));\n  };\n}\n\n/**\r\n   * Camelize a hyphen-delimited string.\r\n   */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) {return c ? c.toUpperCase() : '';});\n});\n\nvar HOOKS = [\n'invoke',\n'success',\n'fail',\n'complete',\n'returnValue'];\n\n\nvar globalInterceptors = {};\nvar scopedInterceptors = {};\n\nfunction mergeHook(parentVal, childVal) {\n  var res = childVal ?\n  parentVal ?\n  parentVal.concat(childVal) :\n  Array.isArray(childVal) ?\n  childVal : [childVal] :\n  parentVal;\n  return res ?\n  dedupeHooks(res) :\n  res;\n}\n\nfunction dedupeHooks(hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res;\n}\n\nfunction removeHook(hooks, hook) {\n  var index = hooks.indexOf(hook);\n  if (index !== -1) {\n    hooks.splice(index, 1);\n  }\n}\n\nfunction mergeInterceptorHook(interceptor, option) {\n  Object.keys(option).forEach(function (hook) {\n    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {\n      interceptor[hook] = mergeHook(interceptor[hook], option[hook]);\n    }\n  });\n}\n\nfunction removeInterceptorHook(interceptor, option) {\n  if (!interceptor || !option) {\n    return;\n  }\n  Object.keys(option).forEach(function (hook) {\n    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {\n      removeHook(interceptor[hook], option[hook]);\n    }\n  });\n}\n\nfunction addInterceptor(method, option) {\n  if (typeof method === 'string' && isPlainObject(option)) {\n    mergeInterceptorHook(scopedInterceptors[method] || (scopedInterceptors[method] = {}), option);\n  } else if (isPlainObject(method)) {\n    mergeInterceptorHook(globalInterceptors, method);\n  }\n}\n\nfunction removeInterceptor(method, option) {\n  if (typeof method === 'string') {\n    if (isPlainObject(option)) {\n      removeInterceptorHook(scopedInterceptors[method], option);\n    } else {\n      delete scopedInterceptors[method];\n    }\n  } else if (isPlainObject(method)) {\n    removeInterceptorHook(globalInterceptors, method);\n  }\n}\n\nfunction wrapperHook(hook) {\n  return function (data) {\n    return hook(data) || data;\n  };\n}\n\nfunction isPromise(obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n}\n\nfunction queue(hooks, data) {\n  var promise = false;\n  for (var i = 0; i < hooks.length; i++) {\n    var hook = hooks[i];\n    if (promise) {\n      promise = Promise.then(wrapperHook(hook));\n    } else {\n      var res = hook(data);\n      if (isPromise(res)) {\n        promise = Promise.resolve(res);\n      }\n      if (res === false) {\n        return {\n          then: function then() {} };\n\n      }\n    }\n  }\n  return promise || {\n    then: function then(callback) {\n      return callback(data);\n    } };\n\n}\n\nfunction wrapperOptions(interceptor) {var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  ['success', 'fail', 'complete'].forEach(function (name) {\n    if (Array.isArray(interceptor[name])) {\n      var oldCallback = options[name];\n      options[name] = function callbackInterceptor(res) {\n        queue(interceptor[name], res).then(function (res) {\n          /* eslint-disable no-mixed-operators */\n          return isFn(oldCallback) && oldCallback(res) || res;\n        });\n      };\n    }\n  });\n  return options;\n}\n\nfunction wrapperReturnValue(method, returnValue) {\n  var returnValueHooks = [];\n  if (Array.isArray(globalInterceptors.returnValue)) {\n    returnValueHooks.push.apply(returnValueHooks, _toConsumableArray(globalInterceptors.returnValue));\n  }\n  var interceptor = scopedInterceptors[method];\n  if (interceptor && Array.isArray(interceptor.returnValue)) {\n    returnValueHooks.push.apply(returnValueHooks, _toConsumableArray(interceptor.returnValue));\n  }\n  returnValueHooks.forEach(function (hook) {\n    returnValue = hook(returnValue) || returnValue;\n  });\n  return returnValue;\n}\n\nfunction getApiInterceptorHooks(method) {\n  var interceptor = Object.create(null);\n  Object.keys(globalInterceptors).forEach(function (hook) {\n    if (hook !== 'returnValue') {\n      interceptor[hook] = globalInterceptors[hook].slice();\n    }\n  });\n  var scopedInterceptor = scopedInterceptors[method];\n  if (scopedInterceptor) {\n    Object.keys(scopedInterceptor).forEach(function (hook) {\n      if (hook !== 'returnValue') {\n        interceptor[hook] = (interceptor[hook] || []).concat(scopedInterceptor[hook]);\n      }\n    });\n  }\n  return interceptor;\n}\n\nfunction invokeApi(method, api, options) {for (var _len = arguments.length, params = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {params[_key - 3] = arguments[_key];}\n  var interceptor = getApiInterceptorHooks(method);\n  if (interceptor && Object.keys(interceptor).length) {\n    if (Array.isArray(interceptor.invoke)) {\n      var res = queue(interceptor.invoke, options);\n      return res.then(function (options) {\n        return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));\n      });\n    } else {\n      return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));\n    }\n  }\n  return api.apply(void 0, [options].concat(params));\n}\n\nvar promiseInterceptor = {\n  returnValue: function returnValue(res) {\n    if (!isPromise(res)) {\n      return res;\n    }\n    return res.then(function (res) {\n      return res[1];\n    }).catch(function (res) {\n      return res[0];\n    });\n  } };\n\n\nvar SYNC_API_RE =\n/^\\$|restoreGlobal|getCurrentSubNVue|getMenuButtonBoundingClientRect|^report|interceptors|Interceptor$|getSubNVueById|requireNativePlugin|upx2px|hideKeyboard|canIUse|^create|Sync$|Manager$|base64ToArrayBuffer|arrayBufferToBase64/;\n\nvar CONTEXT_API_RE = /^create|Manager$/;\n\nvar CALLBACK_API_RE = /^on/;\n\nfunction isContextApi(name) {\n  return CONTEXT_API_RE.test(name);\n}\nfunction isSyncApi(name) {\n  return SYNC_API_RE.test(name);\n}\n\nfunction isCallbackApi(name) {\n  return CALLBACK_API_RE.test(name) && name !== 'onPush';\n}\n\nfunction handlePromise(promise) {\n  return promise.then(function (data) {\n    return [null, data];\n  }).\n  catch(function (err) {return [err];});\n}\n\nfunction shouldPromise(name) {\n  if (\n  isContextApi(name) ||\n  isSyncApi(name) ||\n  isCallbackApi(name))\n  {\n    return false;\n  }\n  return true;\n}\n\nfunction promisify(name, api) {\n  if (!shouldPromise(name)) {\n    return api;\n  }\n  return function promiseApi() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {params[_key2 - 1] = arguments[_key2];}\n    if (isFn(options.success) || isFn(options.fail) || isFn(options.complete)) {\n      return wrapperReturnValue(name, invokeApi.apply(void 0, [name, api, options].concat(params)));\n    }\n    return wrapperReturnValue(name, handlePromise(new Promise(function (resolve, reject) {\n      invokeApi.apply(void 0, [name, api, Object.assign({}, options, {\n        success: resolve,\n        fail: reject })].concat(\n      params));\n      /* eslint-disable no-extend-native */\n      if (!Promise.prototype.finally) {\n        Promise.prototype.finally = function (callback) {\n          var promise = this.constructor;\n          return this.then(\n          function (value) {return promise.resolve(callback()).then(function () {return value;});},\n          function (reason) {return promise.resolve(callback()).then(function () {\n              throw reason;\n            });});\n\n        };\n      }\n    })));\n  };\n}\n\nvar EPS = 1e-4;\nvar BASE_DEVICE_WIDTH = 750;\nvar isIOS = false;\nvar deviceWidth = 0;\nvar deviceDPR = 0;\n\nfunction checkDeviceWidth() {var _wx$getSystemInfoSync =\n\n\n\n\n  wx.getSystemInfoSync(),platform = _wx$getSystemInfoSync.platform,pixelRatio = _wx$getSystemInfoSync.pixelRatio,windowWidth = _wx$getSystemInfoSync.windowWidth; // uni=>wx runtime 编译目标是 uni 对象，内部不允许直接使用 uni\n\n  deviceWidth = windowWidth;\n  deviceDPR = pixelRatio;\n  isIOS = platform === 'ios';\n}\n\nfunction upx2px(number, newDeviceWidth) {\n  if (deviceWidth === 0) {\n    checkDeviceWidth();\n  }\n\n  number = Number(number);\n  if (number === 0) {\n    return 0;\n  }\n  var result = number / BASE_DEVICE_WIDTH * (newDeviceWidth || deviceWidth);\n  if (result < 0) {\n    result = -result;\n  }\n  result = Math.floor(result + EPS);\n  if (result === 0) {\n    if (deviceDPR === 1 || !isIOS) {\n      return 1;\n    } else {\n      return 0.5;\n    }\n  }\n  return number < 0 ? -result : result;\n}\n\nvar interceptors = {\n  promiseInterceptor: promiseInterceptor };\n\n\n\n\nvar baseApi = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  upx2px: upx2px,\n  interceptors: interceptors,\n  addInterceptor: addInterceptor,\n  removeInterceptor: removeInterceptor });\n\n\nvar protocols = {};\nvar todos = [];\nvar canIUses = [];\n\nvar CALLBACKS = ['success', 'fail', 'cancel', 'complete'];\n\nfunction processCallback(methodName, method, returnValue) {\n  return function (res) {\n    return method(processReturnValue(methodName, res, returnValue));\n  };\n}\n\nfunction processArgs(methodName, fromArgs) {var argsOption = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};var returnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};var keepFromArgs = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  if (isPlainObject(fromArgs)) {// 一般 api 的参数解析\n    var toArgs = keepFromArgs === true ? fromArgs : {}; // returnValue 为 false 时，说明是格式化返回值，直接在返回值对象上修改赋值\n    if (isFn(argsOption)) {\n      argsOption = argsOption(fromArgs, toArgs) || {};\n    }\n    for (var key in fromArgs) {\n      if (hasOwn(argsOption, key)) {\n        var keyOption = argsOption[key];\n        if (isFn(keyOption)) {\n          keyOption = keyOption(fromArgs[key], fromArgs, toArgs);\n        }\n        if (!keyOption) {// 不支持的参数\n          console.warn(\"app-plus \".concat(methodName, \"\\u6682\\u4E0D\\u652F\\u6301\").concat(key));\n        } else if (isStr(keyOption)) {// 重写参数 key\n          toArgs[keyOption] = fromArgs[key];\n        } else if (isPlainObject(keyOption)) {// {name:newName,value:value}可重新指定参数 key:value\n          toArgs[keyOption.name ? keyOption.name : key] = keyOption.value;\n        }\n      } else if (CALLBACKS.indexOf(key) !== -1) {\n        toArgs[key] = processCallback(methodName, fromArgs[key], returnValue);\n      } else {\n        if (!keepFromArgs) {\n          toArgs[key] = fromArgs[key];\n        }\n      }\n    }\n    return toArgs;\n  } else if (isFn(fromArgs)) {\n    fromArgs = processCallback(methodName, fromArgs, returnValue);\n  }\n  return fromArgs;\n}\n\nfunction processReturnValue(methodName, res, returnValue) {var keepReturnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  if (isFn(protocols.returnValue)) {// 处理通用 returnValue\n    res = protocols.returnValue(methodName, res);\n  }\n  return processArgs(methodName, res, returnValue, {}, keepReturnValue);\n}\n\nfunction wrapper(methodName, method) {\n  if (hasOwn(protocols, methodName)) {\n    var protocol = protocols[methodName];\n    if (!protocol) {// 暂不支持的 api\n      return function () {\n        console.error(\"app-plus \\u6682\\u4E0D\\u652F\\u6301\".concat(methodName));\n      };\n    }\n    return function (arg1, arg2) {// 目前 api 最多两个参数\n      var options = protocol;\n      if (isFn(protocol)) {\n        options = protocol(arg1);\n      }\n\n      arg1 = processArgs(methodName, arg1, options.args, options.returnValue);\n\n      var args = [arg1];\n      if (typeof arg2 !== 'undefined') {\n        args.push(arg2);\n      }\n      var returnValue = wx[options.name || methodName].apply(wx, args);\n      if (isSyncApi(methodName)) {// 同步 api\n        return processReturnValue(methodName, returnValue, options.returnValue, isContextApi(methodName));\n      }\n      return returnValue;\n    };\n  }\n  return method;\n}\n\nvar todoApis = Object.create(null);\n\nvar TODOS = [\n'onTabBarMidButtonTap',\n'subscribePush',\n'unsubscribePush',\n'onPush',\n'offPush',\n'share'];\n\n\nfunction createTodoApi(name) {\n  return function todoApi(_ref)\n\n\n  {var fail = _ref.fail,complete = _ref.complete;\n    var res = {\n      errMsg: \"\".concat(name, \":fail:\\u6682\\u4E0D\\u652F\\u6301 \").concat(name, \" \\u65B9\\u6CD5\") };\n\n    isFn(fail) && fail(res);\n    isFn(complete) && complete(res);\n  };\n}\n\nTODOS.forEach(function (name) {\n  todoApis[name] = createTodoApi(name);\n});\n\nvar getEmitter = function () {\n  if (typeof getUniEmitter === 'function') {\n    /* eslint-disable no-undef */\n    return getUniEmitter;\n  }\n  var Emitter;\n  return function getUniEmitter() {\n    if (!Emitter) {\n      Emitter = new _vue.default();\n    }\n    return Emitter;\n  };\n}();\n\nfunction apply(ctx, method, args) {\n  return ctx[method].apply(ctx, args);\n}\n\nfunction $on() {\n  return apply(getEmitter(), '$on', Array.prototype.slice.call(arguments));\n}\nfunction $off() {\n  return apply(getEmitter(), '$off', Array.prototype.slice.call(arguments));\n}\nfunction $once() {\n  return apply(getEmitter(), '$once', Array.prototype.slice.call(arguments));\n}\nfunction $emit() {\n  return apply(getEmitter(), '$emit', Array.prototype.slice.call(arguments));\n}\n\nvar eventApi = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  $on: $on,\n  $off: $off,\n  $once: $once,\n  $emit: $emit });\n\n\nfunction requireNativePlugin(pluginName) {\n  /* eslint-disable no-undef */\n  if (typeof weex !== 'undefined') {\n    return weex.requireModule(pluginName);\n  }\n  /* eslint-disable no-undef */\n  return __requireNativePlugin__(pluginName);\n}\n\nfunction wrapper$1(webview) {\n  webview.$processed = true;\n\n  webview.postMessage = function (data) {\n    plus.webview.postMessageToUniNView({\n      type: 'UniAppSubNVue',\n      data: data },\n    webview.id);\n  };\n  var callbacks = [];\n  webview.onMessage = function (callback) {\n    callbacks.push(callback);\n  };\n  webview.$consumeMessage = function (e) {\n    callbacks.forEach(function (callback) {return callback(e);});\n  };\n\n  if (!webview.__uniapp_mask_id) {\n    return;\n  }\n  var maskColor = webview.__uniapp_mask;\n  var maskWebview = webview.__uniapp_mask_id === '0' ? {\n    setStyle: function setStyle(_ref2)\n\n    {var mask = _ref2.mask;\n      requireNativePlugin('uni-tabview').setMask({\n        color: mask });\n\n    } } :\n  plus.webview.getWebviewById(webview.__uniapp_mask_id);\n  var oldShow = webview.show;\n  var oldHide = webview.hide;\n  var oldClose = webview.close;\n\n  var showMask = function showMask() {\n    maskWebview.setStyle({\n      mask: maskColor });\n\n  };\n  var closeMask = function closeMask() {\n    maskWebview.setStyle({\n      mask: 'none' });\n\n  };\n  webview.show = function () {\n    showMask();for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {args[_key3] = arguments[_key3];}\n    return oldShow.apply(webview, args);\n  };\n  webview.hide = function () {\n    closeMask();for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {args[_key4] = arguments[_key4];}\n    return oldHide.apply(webview, args);\n  };\n  webview.close = function () {\n    closeMask();\n    callbacks = [];for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {args[_key5] = arguments[_key5];}\n    return oldClose.apply(webview, args);\n  };\n}\n\nfunction getSubNVueById(id) {\n  var webview = plus.webview.getWebviewById(id);\n  if (webview && !webview.$processed) {\n    wrapper$1(webview);\n  }\n  return webview;\n}\n\n\n\nvar api = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getSubNVueById: getSubNVueById,\n  requireNativePlugin: requireNativePlugin });\n\n\nvar MPPage = Page;\nvar MPComponent = Component;\n\nvar customizeRE = /:/g;\n\nvar customize = cached(function (str) {\n  return camelize(str.replace(customizeRE, '-'));\n});\n\nfunction initTriggerEvent(mpInstance) {\n  {\n    if (!wx.canIUse('nextTick')) {\n      return;\n    }\n  }\n  var oldTriggerEvent = mpInstance.triggerEvent;\n  mpInstance.triggerEvent = function (event) {for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {args[_key6 - 1] = arguments[_key6];}\n    return oldTriggerEvent.apply(mpInstance, [customize(event)].concat(args));\n  };\n}\n\nfunction initHook(name, options) {\n  var oldHook = options[name];\n  if (!oldHook) {\n    options[name] = function () {\n      initTriggerEvent(this);\n    };\n  } else {\n    options[name] = function () {\n      initTriggerEvent(this);for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {args[_key7] = arguments[_key7];}\n      return oldHook.apply(this, args);\n    };\n  }\n}\n\nPage = function Page() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  initHook('onLoad', options);\n  return MPPage(options);\n};\n\nComponent = function Component() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  initHook('created', options);\n  return MPComponent(options);\n};\n\nvar PAGE_EVENT_HOOKS = [\n'onPullDownRefresh',\n'onReachBottom',\n'onShareAppMessage',\n'onPageScroll',\n'onResize',\n'onTabItemTap'];\n\n\nfunction initMocks(vm, mocks) {\n  var mpInstance = vm.$mp[vm.mpType];\n  mocks.forEach(function (mock) {\n    if (hasOwn(mpInstance, mock)) {\n      vm[mock] = mpInstance[mock];\n    }\n  });\n}\n\nfunction hasHook(hook, vueOptions) {\n  if (!vueOptions) {\n    return true;\n  }\n\n  if (_vue.default.options && Array.isArray(_vue.default.options[hook])) {\n    return true;\n  }\n\n  vueOptions = vueOptions.default || vueOptions;\n\n  if (isFn(vueOptions)) {\n    if (isFn(vueOptions.extendOptions[hook])) {\n      return true;\n    }\n    if (vueOptions.super &&\n    vueOptions.super.options &&\n    Array.isArray(vueOptions.super.options[hook])) {\n      return true;\n    }\n    return false;\n  }\n\n  if (isFn(vueOptions[hook])) {\n    return true;\n  }\n  var mixins = vueOptions.mixins;\n  if (Array.isArray(mixins)) {\n    return !!mixins.find(function (mixin) {return hasHook(hook, mixin);});\n  }\n}\n\nfunction initHooks(mpOptions, hooks, vueOptions) {\n  hooks.forEach(function (hook) {\n    if (hasHook(hook, vueOptions)) {\n      mpOptions[hook] = function (args) {\n        return this.$vm && this.$vm.__call_hook(hook, args);\n      };\n    }\n  });\n}\n\nfunction initVueComponent(Vue, vueOptions) {\n  vueOptions = vueOptions.default || vueOptions;\n  var VueComponent;\n  if (isFn(vueOptions)) {\n    VueComponent = vueOptions;\n    vueOptions = VueComponent.extendOptions;\n  } else {\n    VueComponent = Vue.extend(vueOptions);\n  }\n  return [VueComponent, vueOptions];\n}\n\nfunction initSlots(vm, vueSlots) {\n  if (Array.isArray(vueSlots) && vueSlots.length) {\n    var $slots = Object.create(null);\n    vueSlots.forEach(function (slotName) {\n      $slots[slotName] = true;\n    });\n    vm.$scopedSlots = vm.$slots = $slots;\n  }\n}\n\nfunction initVueIds(vueIds, mpInstance) {\n  vueIds = (vueIds || '').split(',');\n  var len = vueIds.length;\n\n  if (len === 1) {\n    mpInstance._$vueId = vueIds[0];\n  } else if (len === 2) {\n    mpInstance._$vueId = vueIds[0];\n    mpInstance._$vuePid = vueIds[1];\n  }\n}\n\nfunction initData(vueOptions, context) {\n  var data = vueOptions.data || {};\n  var methods = vueOptions.methods || {};\n\n  if (typeof data === 'function') {\n    try {\n      data = data.call(context); // 支持 Vue.prototype 上挂的数据\n    } catch (e) {\n      if (Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\n        console.warn('根据 Vue 的 data 函数初始化小程序 data 失败，请尽量确保 data 函数中不访问 vm 对象，否则可能影响首次数据渲染速度。', data);\n      }\n    }\n  } else {\n    try {\n      // 对 data 格式化\n      data = JSON.parse(JSON.stringify(data));\n    } catch (e) {}\n  }\n\n  if (!isPlainObject(data)) {\n    data = {};\n  }\n\n  Object.keys(methods).forEach(function (methodName) {\n    if (context.__lifecycle_hooks__.indexOf(methodName) === -1 && !hasOwn(data, methodName)) {\n      data[methodName] = methods[methodName];\n    }\n  });\n\n  return data;\n}\n\nvar PROP_TYPES = [String, Number, Boolean, Object, Array, null];\n\nfunction createObserver(name) {\n  return function observer(newVal, oldVal) {\n    if (this.$vm) {\n      this.$vm[name] = newVal; // 为了触发其他非 render watcher\n    }\n  };\n}\n\nfunction initBehaviors(vueOptions, initBehavior) {\n  var vueBehaviors = vueOptions['behaviors'];\n  var vueExtends = vueOptions['extends'];\n  var vueMixins = vueOptions['mixins'];\n\n  var vueProps = vueOptions['props'];\n\n  if (!vueProps) {\n    vueOptions['props'] = vueProps = [];\n  }\n\n  var behaviors = [];\n  if (Array.isArray(vueBehaviors)) {\n    vueBehaviors.forEach(function (behavior) {\n      behaviors.push(behavior.replace('uni://', \"wx\".concat(\"://\")));\n      if (behavior === 'uni://form-field') {\n        if (Array.isArray(vueProps)) {\n          vueProps.push('name');\n          vueProps.push('value');\n        } else {\n          vueProps['name'] = {\n            type: String,\n            default: '' };\n\n          vueProps['value'] = {\n            type: [String, Number, Boolean, Array, Object, Date],\n            default: '' };\n\n        }\n      }\n    });\n  }\n  if (isPlainObject(vueExtends) && vueExtends.props) {\n    behaviors.push(\n    initBehavior({\n      properties: initProperties(vueExtends.props, true) }));\n\n\n  }\n  if (Array.isArray(vueMixins)) {\n    vueMixins.forEach(function (vueMixin) {\n      if (isPlainObject(vueMixin) && vueMixin.props) {\n        behaviors.push(\n        initBehavior({\n          properties: initProperties(vueMixin.props, true) }));\n\n\n      }\n    });\n  }\n  return behaviors;\n}\n\nfunction parsePropType(key, type, defaultValue, file) {\n  // [String]=>String\n  if (Array.isArray(type) && type.length === 1) {\n    return type[0];\n  }\n  return type;\n}\n\nfunction initProperties(props) {var isBehavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;var file = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var properties = {};\n  if (!isBehavior) {\n    properties.vueId = {\n      type: String,\n      value: '' };\n\n    properties.vueSlots = { // 小程序不能直接定义 $slots 的 props，所以通过 vueSlots 转换到 $slots\n      type: null,\n      value: [],\n      observer: function observer(newVal, oldVal) {\n        var $slots = Object.create(null);\n        newVal.forEach(function (slotName) {\n          $slots[slotName] = true;\n        });\n        this.setData({\n          $slots: $slots });\n\n      } };\n\n  }\n  if (Array.isArray(props)) {// ['title']\n    props.forEach(function (key) {\n      properties[key] = {\n        type: null,\n        observer: createObserver(key) };\n\n    });\n  } else if (isPlainObject(props)) {// {title:{type:String,default:''},content:String}\n    Object.keys(props).forEach(function (key) {\n      var opts = props[key];\n      if (isPlainObject(opts)) {// title:{type:String,default:''}\n        var value = opts['default'];\n        if (isFn(value)) {\n          value = value();\n        }\n\n        opts.type = parsePropType(key, opts.type);\n\n        properties[key] = {\n          type: PROP_TYPES.indexOf(opts.type) !== -1 ? opts.type : null,\n          value: value,\n          observer: createObserver(key) };\n\n      } else {// content:String\n        var type = parsePropType(key, opts);\n        properties[key] = {\n          type: PROP_TYPES.indexOf(type) !== -1 ? type : null,\n          observer: createObserver(key) };\n\n      }\n    });\n  }\n  return properties;\n}\n\nfunction wrapper$2(event) {\n  // TODO 又得兼容 mpvue 的 mp 对象\n  try {\n    event.mp = JSON.parse(JSON.stringify(event));\n  } catch (e) {}\n\n  event.stopPropagation = noop;\n  event.preventDefault = noop;\n\n  event.target = event.target || {};\n\n  if (!hasOwn(event, 'detail')) {\n    event.detail = {};\n  }\n\n  if (isPlainObject(event.detail)) {\n    event.target = Object.assign({}, event.target, event.detail);\n  }\n\n  return event;\n}\n\nfunction getExtraValue(vm, dataPathsArray) {\n  var context = vm;\n  dataPathsArray.forEach(function (dataPathArray) {\n    var dataPath = dataPathArray[0];\n    var value = dataPathArray[2];\n    if (dataPath || typeof value !== 'undefined') {// ['','',index,'disable']\n      var propPath = dataPathArray[1];\n      var valuePath = dataPathArray[3];\n\n      var vFor = dataPath ? vm.__get_value(dataPath, context) : context;\n\n      if (Number.isInteger(vFor)) {\n        context = value;\n      } else if (!propPath) {\n        context = vFor[value];\n      } else {\n        if (Array.isArray(vFor)) {\n          context = vFor.find(function (vForItem) {\n            return vm.__get_value(propPath, vForItem) === value;\n          });\n        } else if (isPlainObject(vFor)) {\n          context = Object.keys(vFor).find(function (vForKey) {\n            return vm.__get_value(propPath, vFor[vForKey]) === value;\n          });\n        } else {\n          console.error('v-for 暂不支持循环数据：', vFor);\n        }\n      }\n\n      if (valuePath) {\n        context = vm.__get_value(valuePath, context);\n      }\n    }\n  });\n  return context;\n}\n\nfunction processEventExtra(vm, extra, event) {\n  var extraObj = {};\n\n  if (Array.isArray(extra) && extra.length) {\n    /**\r\n                                              *[\r\n                                              *    ['data.items', 'data.id', item.data.id],\r\n                                              *    ['metas', 'id', meta.id]\r\n                                              *],\r\n                                              *[\r\n                                              *    ['data.items', 'data.id', item.data.id],\r\n                                              *    ['metas', 'id', meta.id]\r\n                                              *],\r\n                                              *'test'\r\n                                              */\n    extra.forEach(function (dataPath, index) {\n      if (typeof dataPath === 'string') {\n        if (!dataPath) {// model,prop.sync\n          extraObj['$' + index] = vm;\n        } else {\n          if (dataPath === '$event') {// $event\n            extraObj['$' + index] = event;\n          } else if (dataPath.indexOf('$event.') === 0) {// $event.target.value\n            extraObj['$' + index] = vm.__get_value(dataPath.replace('$event.', ''), event);\n          } else {\n            extraObj['$' + index] = vm.__get_value(dataPath);\n          }\n        }\n      } else {\n        extraObj['$' + index] = getExtraValue(vm, dataPath);\n      }\n    });\n  }\n\n  return extraObj;\n}\n\nfunction getObjByArray(arr) {\n  var obj = {};\n  for (var i = 1; i < arr.length; i++) {\n    var element = arr[i];\n    obj[element[0]] = element[1];\n  }\n  return obj;\n}\n\nfunction processEventArgs(vm, event) {var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];var extra = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];var isCustom = arguments.length > 4 ? arguments[4] : undefined;var methodName = arguments.length > 5 ? arguments[5] : undefined;\n  var isCustomMPEvent = false; // wxcomponent 组件，传递原始 event 对象\n  if (isCustom) {// 自定义事件\n    isCustomMPEvent = event.currentTarget &&\n    event.currentTarget.dataset &&\n    event.currentTarget.dataset.comType === 'wx';\n    if (!args.length) {// 无参数，直接传入 event 或 detail 数组\n      if (isCustomMPEvent) {\n        return [event];\n      }\n      return event.detail.__args__ || event.detail;\n    }\n  }\n\n  var extraObj = processEventExtra(vm, extra, event);\n\n  var ret = [];\n  args.forEach(function (arg) {\n    if (arg === '$event') {\n      if (methodName === '__set_model' && !isCustom) {// input v-model value\n        ret.push(event.target.value);\n      } else {\n        if (isCustom && !isCustomMPEvent) {\n          ret.push(event.detail.__args__[0]);\n        } else {// wxcomponent 组件或内置组件\n          ret.push(event);\n        }\n      }\n    } else {\n      if (Array.isArray(arg) && arg[0] === 'o') {\n        ret.push(getObjByArray(arg));\n      } else if (typeof arg === 'string' && hasOwn(extraObj, arg)) {\n        ret.push(extraObj[arg]);\n      } else {\n        ret.push(arg);\n      }\n    }\n  });\n\n  return ret;\n}\n\nvar ONCE = '~';\nvar CUSTOM = '^';\n\nfunction isMatchEventType(eventType, optType) {\n  return eventType === optType ||\n\n  optType === 'regionchange' && (\n\n  eventType === 'begin' ||\n  eventType === 'end');\n\n\n}\n\nfunction handleEvent(event) {var _this = this;\n  event = wrapper$2(event);\n\n  // [['tap',[['handle',[1,2,a]],['handle1',[1,2,a]]]]]\n  var dataset = (event.currentTarget || event.target).dataset;\n  if (!dataset) {\n    return console.warn(\"\\u4E8B\\u4EF6\\u4FE1\\u606F\\u4E0D\\u5B58\\u5728\");\n  }\n  var eventOpts = dataset.eventOpts || dataset['event-opts']; // 支付宝 web-view 组件 dataset 非驼峰\n  if (!eventOpts) {\n    return console.warn(\"\\u4E8B\\u4EF6\\u4FE1\\u606F\\u4E0D\\u5B58\\u5728\");\n  }\n\n  // [['handle',[1,2,a]],['handle1',[1,2,a]]]\n  var eventType = event.type;\n\n  var ret = [];\n\n  eventOpts.forEach(function (eventOpt) {\n    var type = eventOpt[0];\n    var eventsArray = eventOpt[1];\n\n    var isCustom = type.charAt(0) === CUSTOM;\n    type = isCustom ? type.slice(1) : type;\n    var isOnce = type.charAt(0) === ONCE;\n    type = isOnce ? type.slice(1) : type;\n\n    if (eventsArray && isMatchEventType(eventType, type)) {\n      eventsArray.forEach(function (eventArray) {\n        var methodName = eventArray[0];\n        if (methodName) {\n          var handlerCtx = _this.$vm;\n          if (\n          handlerCtx.$options.generic &&\n          handlerCtx.$parent &&\n          handlerCtx.$parent.$parent)\n          {// mp-weixin,mp-toutiao 抽象节点模拟 scoped slots\n            handlerCtx = handlerCtx.$parent.$parent;\n          }\n          if (methodName === '$emit') {\n            handlerCtx.$emit.apply(handlerCtx,\n            processEventArgs(\n            _this.$vm,\n            event,\n            eventArray[1],\n            eventArray[2],\n            isCustom,\n            methodName));\n\n            return;\n          }\n          var handler = handlerCtx[methodName];\n          if (!isFn(handler)) {\n            throw new Error(\" _vm.\".concat(methodName, \" is not a function\"));\n          }\n          if (isOnce) {\n            if (handler.once) {\n              return;\n            }\n            handler.once = true;\n          }\n          ret.push(handler.apply(handlerCtx, processEventArgs(\n          _this.$vm,\n          event,\n          eventArray[1],\n          eventArray[2],\n          isCustom,\n          methodName)));\n\n        }\n      });\n    }\n  });\n\n  if (\n  eventType === 'input' &&\n  ret.length === 1 &&\n  typeof ret[0] !== 'undefined')\n  {\n    return ret[0];\n  }\n}\n\nvar hooks = [\n'onShow',\n'onHide',\n'onError',\n'onPageNotFound'];\n\n\nfunction parseBaseApp(vm, _ref3)\n\n\n{var mocks = _ref3.mocks,initRefs = _ref3.initRefs;\n  if (vm.$options.store) {\n    _vue.default.prototype.$store = vm.$options.store;\n  }\n\n  _vue.default.prototype.mpHost = \"app-plus\";\n\n  _vue.default.mixin({\n    beforeCreate: function beforeCreate() {\n      if (!this.$options.mpType) {\n        return;\n      }\n\n      this.mpType = this.$options.mpType;\n\n      this.$mp = _defineProperty({\n        data: {} },\n      this.mpType, this.$options.mpInstance);\n\n\n      this.$scope = this.$options.mpInstance;\n\n      delete this.$options.mpType;\n      delete this.$options.mpInstance;\n\n      if (this.mpType !== 'app') {\n        initRefs(this);\n        initMocks(this, mocks);\n      }\n    } });\n\n\n  var appOptions = {\n    onLaunch: function onLaunch(args) {\n      if (this.$vm) {// 已经初始化过了，主要是为了百度，百度 onShow 在 onLaunch 之前\n        return;\n      }\n\n      this.$vm = vm;\n\n      this.$vm.$mp = {\n        app: this };\n\n\n      this.$vm.$scope = this;\n      // vm 上也挂载 globalData\n      this.$vm.globalData = this.globalData;\n\n      this.$vm._isMounted = true;\n      this.$vm.__call_hook('mounted', args);\n\n      this.$vm.__call_hook('onLaunch', args);\n    } };\n\n\n  // 兼容旧版本 globalData\n  appOptions.globalData = vm.$options.globalData || {};\n  // 将 methods 中的方法挂在 getApp() 中\n  var methods = vm.$options.methods;\n  if (methods) {\n    Object.keys(methods).forEach(function (name) {\n      appOptions[name] = methods[name];\n    });\n  }\n\n  initHooks(appOptions, hooks);\n\n  return appOptions;\n}\n\nvar mocks = ['__route__', '__wxExparserNodeId__', '__wxWebviewId__'];\n\nfunction findVmByVueId(vm, vuePid) {\n  var $children = vm.$children;\n  // 优先查找直属(反向查找:https://github.com/dcloudio/uni-app/issues/1200)\n  for (var i = $children.length - 1; i >= 0; i--) {\n    var childVm = $children[i];\n    if (childVm.$scope._$vueId === vuePid) {\n      return childVm;\n    }\n  }\n  // 反向递归查找\n  var parentVm;\n  for (var _i = $children.length - 1; _i >= 0; _i--) {\n    parentVm = findVmByVueId($children[_i], vuePid);\n    if (parentVm) {\n      return parentVm;\n    }\n  }\n}\n\nfunction initBehavior(options) {\n  return Behavior(options);\n}\n\nfunction isPage() {\n  return !!this.route;\n}\n\nfunction initRelation(detail) {\n  this.triggerEvent('__l', detail);\n}\n\nfunction initRefs(vm) {\n  var mpInstance = vm.$scope;\n  Object.defineProperty(vm, '$refs', {\n    get: function get() {\n      var $refs = {};\n      var components = mpInstance.selectAllComponents('.vue-ref');\n      components.forEach(function (component) {\n        var ref = component.dataset.ref;\n        $refs[ref] = component.$vm || component;\n      });\n      var forComponents = mpInstance.selectAllComponents('.vue-ref-in-for');\n      forComponents.forEach(function (component) {\n        var ref = component.dataset.ref;\n        if (!$refs[ref]) {\n          $refs[ref] = [];\n        }\n        $refs[ref].push(component.$vm || component);\n      });\n      return $refs;\n    } });\n\n}\n\nfunction handleLink(event) {var _ref4 =\n\n\n\n  event.detail || event.value,vuePid = _ref4.vuePid,vueOptions = _ref4.vueOptions; // detail 是微信,value 是百度(dipatch)\n\n  var parentVm;\n\n  if (vuePid) {\n    parentVm = findVmByVueId(this.$vm, vuePid);\n  }\n\n  if (!parentVm) {\n    parentVm = this.$vm;\n  }\n\n  vueOptions.parent = parentVm;\n}\n\nfunction parseApp(vm) {\n  return parseBaseApp(vm, {\n    mocks: mocks,\n    initRefs: initRefs });\n\n}\n\nvar hooks$1 = [\n'onUniNViewMessage'];\n\n\nfunction parseApp$1(vm) {\n  var appOptions = parseApp(vm);\n\n  initHooks(appOptions, hooks$1);\n\n  return appOptions;\n}\n\nfunction createApp(vm) {\n  App(parseApp$1(vm));\n  return vm;\n}\n\nfunction parseBaseComponent(vueComponentOptions)\n\n\n{var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},isPage = _ref5.isPage,initRelation = _ref5.initRelation;var _initVueComponent =\n  initVueComponent(_vue.default, vueComponentOptions),_initVueComponent2 = _slicedToArray(_initVueComponent, 2),VueComponent = _initVueComponent2[0],vueOptions = _initVueComponent2[1];\n\n  var options = _objectSpread({\n    multipleSlots: true,\n    addGlobalClass: true },\n  vueOptions.options || {});\n\n\n  var componentOptions = {\n    options: options,\n    data: initData(vueOptions, _vue.default.prototype),\n    behaviors: initBehaviors(vueOptions, initBehavior),\n    properties: initProperties(vueOptions.props, false, vueOptions.__file),\n    lifetimes: {\n      attached: function attached() {\n        var properties = this.properties;\n\n        var options = {\n          mpType: isPage.call(this) ? 'page' : 'component',\n          mpInstance: this,\n          propsData: properties };\n\n\n        initVueIds(properties.vueId, this);\n\n        // 处理父子关系\n        initRelation.call(this, {\n          vuePid: this._$vuePid,\n          vueOptions: options });\n\n\n        // 初始化 vue 实例\n        this.$vm = new VueComponent(options);\n\n        // 处理$slots,$scopedSlots（暂不支持动态变化$slots）\n        initSlots(this.$vm, properties.vueSlots);\n\n        // 触发首次 setData\n        this.$vm.$mount();\n      },\n      ready: function ready() {\n        // 当组件 props 默认值为 true，初始化时传入 false 会导致 created,ready 触发, 但 attached 不触发\n        // https://developers.weixin.qq.com/community/develop/doc/00066ae2844cc0f8eb883e2a557800\n        if (this.$vm) {\n          this.$vm._isMounted = true;\n          this.$vm.__call_hook('mounted');\n          this.$vm.__call_hook('onReady');\n        }\n      },\n      detached: function detached() {\n        this.$vm && this.$vm.$destroy();\n      } },\n\n    pageLifetimes: {\n      show: function show(args) {\n        this.$vm && this.$vm.__call_hook('onPageShow', args);\n      },\n      hide: function hide() {\n        this.$vm && this.$vm.__call_hook('onPageHide');\n      },\n      resize: function resize(size) {\n        this.$vm && this.$vm.__call_hook('onPageResize', size);\n      } },\n\n    methods: {\n      __l: handleLink,\n      __e: handleEvent } };\n\n\n\n  if (Array.isArray(vueOptions.wxsCallMethods)) {\n    vueOptions.wxsCallMethods.forEach(function (callMethod) {\n      componentOptions.methods[callMethod] = function (args) {\n        return this.$vm[callMethod](args);\n      };\n    });\n  }\n\n  if (isPage) {\n    return componentOptions;\n  }\n  return [componentOptions, VueComponent];\n}\n\nfunction parseComponent(vueComponentOptions) {\n  return parseBaseComponent(vueComponentOptions, {\n    isPage: isPage,\n    initRelation: initRelation });\n\n}\n\nfunction parseComponent$1(vueComponentOptions) {\n  var componentOptions = parseComponent(vueComponentOptions);\n\n  componentOptions.methods.$getAppWebview = function () {\n    return plus.webview.getWebviewById(\"\".concat(this.__wxWebviewId__));\n  };\n  return componentOptions;\n}\n\nvar hooks$2 = [\n'onShow',\n'onHide',\n'onUnload'];\n\n\nhooks$2.push.apply(hooks$2, PAGE_EVENT_HOOKS);\n\nfunction parseBasePage(vuePageOptions, _ref6)\n\n\n{var isPage = _ref6.isPage,initRelation = _ref6.initRelation;\n  var pageOptions = parseComponent$1(vuePageOptions);\n\n  initHooks(pageOptions.methods, hooks$2, vuePageOptions);\n\n  pageOptions.methods.onLoad = function (args) {\n    this.$vm.$mp.query = args; // 兼容 mpvue\n    this.$vm.__call_hook('onLoad', args);\n  };\n\n  return pageOptions;\n}\n\nfunction parsePage(vuePageOptions) {\n  return parseBasePage(vuePageOptions, {\n    isPage: isPage,\n    initRelation: initRelation });\n\n}\n\nvar hooks$3 = [\n'onBackPress',\n'onNavigationBarButtonTap',\n'onNavigationBarSearchInputChanged',\n'onNavigationBarSearchInputConfirmed',\n'onNavigationBarSearchInputClicked'];\n\n\nfunction parsePage$1(vuePageOptions) {\n  var pageOptions = parsePage(vuePageOptions);\n\n  initHooks(pageOptions.methods, hooks$3);\n\n  return pageOptions;\n}\n\nfunction createPage(vuePageOptions) {\n  {\n    return Component(parsePage$1(vuePageOptions));\n  }\n}\n\nfunction createComponent(vueOptions) {\n  {\n    return Component(parseComponent$1(vueOptions));\n  }\n}\n\ntodos.forEach(function (todoApi) {\n  protocols[todoApi] = false;\n});\n\ncanIUses.forEach(function (canIUseApi) {\n  var apiName = protocols[canIUseApi] && protocols[canIUseApi].name ? protocols[canIUseApi].name :\n  canIUseApi;\n  if (!wx.canIUse(apiName)) {\n    protocols[canIUseApi] = false;\n  }\n});\n\nvar uni = {};\n\nif (typeof Proxy !== 'undefined' && \"app-plus\" !== 'app-plus') {\n  uni = new Proxy({}, {\n    get: function get(target, name) {\n      if (target[name]) {\n        return target[name];\n      }\n      if (baseApi[name]) {\n        return baseApi[name];\n      }\n      if (api[name]) {\n        return promisify(name, api[name]);\n      }\n      if (eventApi[name]) {\n        return eventApi[name];\n      }\n      if (!hasOwn(wx, name) && !hasOwn(protocols, name)) {\n        return;\n      }\n      return promisify(name, wrapper(name, wx[name]));\n    },\n    set: function set(target, name, value) {\n      target[name] = value;\n      return true;\n    } });\n\n} else {\n  Object.keys(baseApi).forEach(function (name) {\n    uni[name] = baseApi[name];\n  });\n\n  Object.keys(eventApi).forEach(function (name) {\n    uni[name] = eventApi[name];\n  });\n\n  Object.keys(api).forEach(function (name) {\n    uni[name] = promisify(name, api[name]);\n  });\n\n  Object.keys(wx).forEach(function (name) {\n    if (hasOwn(wx, name) || hasOwn(protocols, name)) {\n      uni[name] = promisify(name, wrapper(name, wx[name]));\n    }\n  });\n}\n\n{\n  if (typeof global !== 'undefined') {\n    global.uni = uni;\n    global.UniEmitter = eventApi;\n  }\n}\n\nwx.createApp = createApp;\nwx.createPage = createPage;\nwx.createComponent = createComponent;\n\nvar uni$1 = uni;var _default =\n\nuni$1;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ }),

/***/ 13:
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js ***!
  \**********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return normalizeComponent; });\n/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nfunction normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode, /* vue-cli only */\n  components, // fixed by xxxxxx auto components\n  renderjs // fixed by xxxxxx renderjs\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // fixed by xxxxxx auto components\n  if (components) {\n    options.components = Object.assign(components, options.components || {})\n  }\n  // fixed by xxxxxx renderjs\n  if (renderjs) {\n    (renderjs.beforeCreate || (renderjs.beforeCreate = [])).unshift(function() {\n      this[renderjs.__module] = this\n    });\n    (options.mixins || (options.mixins = [])).push(renderjs)\n  }\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDJFQUEyRTtBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjEzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFscyBfX1ZVRV9TU1JfQ09OVEVYVF9fICovXG5cbi8vIElNUE9SVEFOVDogRG8gTk9UIHVzZSBFUzIwMTUgZmVhdHVyZXMgaW4gdGhpcyBmaWxlIChleGNlcHQgZm9yIG1vZHVsZXMpLlxuLy8gVGhpcyBtb2R1bGUgaXMgYSBydW50aW1lIHV0aWxpdHkgZm9yIGNsZWFuZXIgY29tcG9uZW50IG1vZHVsZSBvdXRwdXQgYW5kIHdpbGxcbi8vIGJlIGluY2x1ZGVkIGluIHRoZSBmaW5hbCB3ZWJwYWNrIHVzZXIgYnVuZGxlLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub3JtYWxpemVDb21wb25lbnQgKFxuICBzY3JpcHRFeHBvcnRzLFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZnVuY3Rpb25hbFRlbXBsYXRlLFxuICBpbmplY3RTdHlsZXMsXG4gIHNjb3BlSWQsXG4gIG1vZHVsZUlkZW50aWZpZXIsIC8qIHNlcnZlciBvbmx5ICovXG4gIHNoYWRvd01vZGUsIC8qIHZ1ZS1jbGkgb25seSAqL1xuICBjb21wb25lbnRzLCAvLyBmaXhlZCBieSB4eHh4eHggYXV0byBjb21wb25lbnRzXG4gIHJlbmRlcmpzIC8vIGZpeGVkIGJ5IHh4eHh4eCByZW5kZXJqc1xuKSB7XG4gIC8vIFZ1ZS5leHRlbmQgY29uc3RydWN0b3IgZXhwb3J0IGludGVyb3BcbiAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygc2NyaXB0RXhwb3J0cyA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gc2NyaXB0RXhwb3J0cy5vcHRpb25zXG4gICAgOiBzY3JpcHRFeHBvcnRzXG5cbiAgLy8gZml4ZWQgYnkgeHh4eHh4IGF1dG8gY29tcG9uZW50c1xuICBpZiAoY29tcG9uZW50cykge1xuICAgIG9wdGlvbnMuY29tcG9uZW50cyA9IE9iamVjdC5hc3NpZ24oY29tcG9uZW50cywgb3B0aW9ucy5jb21wb25lbnRzIHx8IHt9KVxuICB9XG4gIC8vIGZpeGVkIGJ5IHh4eHh4eCByZW5kZXJqc1xuICBpZiAocmVuZGVyanMpIHtcbiAgICAocmVuZGVyanMuYmVmb3JlQ3JlYXRlIHx8IChyZW5kZXJqcy5iZWZvcmVDcmVhdGUgPSBbXSkpLnVuc2hpZnQoZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzW3JlbmRlcmpzLl9fbW9kdWxlXSA9IHRoaXNcbiAgICB9KTtcbiAgICAob3B0aW9ucy5taXhpbnMgfHwgKG9wdGlvbnMubWl4aW5zID0gW10pKS5wdXNoKHJlbmRlcmpzKVxuICB9XG5cbiAgLy8gcmVuZGVyIGZ1bmN0aW9uc1xuICBpZiAocmVuZGVyKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSByZW5kZXJcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IHN0YXRpY1JlbmRlckZuc1xuICAgIG9wdGlvbnMuX2NvbXBpbGVkID0gdHJ1ZVxuICB9XG5cbiAgLy8gZnVuY3Rpb25hbCB0ZW1wbGF0ZVxuICBpZiAoZnVuY3Rpb25hbFRlbXBsYXRlKSB7XG4gICAgb3B0aW9ucy5mdW5jdGlvbmFsID0gdHJ1ZVxuICB9XG5cbiAgLy8gc2NvcGVkSWRcbiAgaWYgKHNjb3BlSWQpIHtcbiAgICBvcHRpb25zLl9zY29wZUlkID0gJ2RhdGEtdi0nICsgc2NvcGVJZFxuICB9XG5cbiAgdmFyIGhvb2tcbiAgaWYgKG1vZHVsZUlkZW50aWZpZXIpIHsgLy8gc2VydmVyIGJ1aWxkXG4gICAgaG9vayA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAvLyAyLjMgaW5qZWN0aW9uXG4gICAgICBjb250ZXh0ID1cbiAgICAgICAgY29udGV4dCB8fCAvLyBjYWNoZWQgY2FsbFxuICAgICAgICAodGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dCkgfHwgLy8gc3RhdGVmdWxcbiAgICAgICAgKHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LiR2bm9kZSAmJiB0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCkgLy8gZnVuY3Rpb25hbFxuICAgICAgLy8gMi4yIHdpdGggcnVuSW5OZXdDb250ZXh0OiB0cnVlXG4gICAgICBpZiAoIWNvbnRleHQgJiYgdHlwZW9mIF9fVlVFX1NTUl9DT05URVhUX18gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnRleHQgPSBfX1ZVRV9TU1JfQ09OVEVYVF9fXG4gICAgICB9XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHN0eWxlc1xuICAgICAgaWYgKGluamVjdFN0eWxlcykge1xuICAgICAgICBpbmplY3RTdHlsZXMuY2FsbCh0aGlzLCBjb250ZXh0KVxuICAgICAgfVxuICAgICAgLy8gcmVnaXN0ZXIgY29tcG9uZW50IG1vZHVsZSBpZGVudGlmaWVyIGZvciBhc3luYyBjaHVuayBpbmZlcnJlbmNlXG4gICAgICBpZiAoY29udGV4dCAmJiBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cykge1xuICAgICAgICBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQobW9kdWxlSWRlbnRpZmllcilcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdXNlZCBieSBzc3IgaW4gY2FzZSBjb21wb25lbnQgaXMgY2FjaGVkIGFuZCBiZWZvcmVDcmVhdGVcbiAgICAvLyBuZXZlciBnZXRzIGNhbGxlZFxuICAgIG9wdGlvbnMuX3NzclJlZ2lzdGVyID0gaG9va1xuICB9IGVsc2UgaWYgKGluamVjdFN0eWxlcykge1xuICAgIGhvb2sgPSBzaGFkb3dNb2RlXG4gICAgICA/IGZ1bmN0aW9uICgpIHsgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgdGhpcy4kcm9vdC4kb3B0aW9ucy5zaGFkb3dSb290KSB9XG4gICAgICA6IGluamVjdFN0eWxlc1xuICB9XG5cbiAgaWYgKGhvb2spIHtcbiAgICBpZiAob3B0aW9ucy5mdW5jdGlvbmFsKSB7XG4gICAgICAvLyBmb3IgdGVtcGxhdGUtb25seSBob3QtcmVsb2FkIGJlY2F1c2UgaW4gdGhhdCBjYXNlIHRoZSByZW5kZXIgZm4gZG9lc24ndFxuICAgICAgLy8gZ28gdGhyb3VnaCB0aGUgbm9ybWFsaXplclxuICAgICAgb3B0aW9ucy5faW5qZWN0U3R5bGVzID0gaG9va1xuICAgICAgLy8gcmVnaXN0ZXIgZm9yIGZ1bmN0aW9hbCBjb21wb25lbnQgaW4gdnVlIGZpbGVcbiAgICAgIHZhciBvcmlnaW5hbFJlbmRlciA9IG9wdGlvbnMucmVuZGVyXG4gICAgICBvcHRpb25zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcldpdGhTdHlsZUluamVjdGlvbiAoaCwgY29udGV4dCkge1xuICAgICAgICBob29rLmNhbGwoY29udGV4dClcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsUmVuZGVyKGgsIGNvbnRleHQpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgcmVnaXN0cmF0aW9uIGFzIGJlZm9yZUNyZWF0ZSBob29rXG4gICAgICB2YXIgZXhpc3RpbmcgPSBvcHRpb25zLmJlZm9yZUNyZWF0ZVxuICAgICAgb3B0aW9ucy5iZWZvcmVDcmVhdGUgPSBleGlzdGluZ1xuICAgICAgICA/IFtdLmNvbmNhdChleGlzdGluZywgaG9vaylcbiAgICAgICAgOiBbaG9va11cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGV4cG9ydHM6IHNjcmlwdEV4cG9ydHMsXG4gICAgb3B0aW9uczogb3B0aW9uc1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///13\n");

/***/ }),

/***/ 14:
/*!****************************************************************************!*\
  !*** C:/Users/DELL/Documents/HBuilderProjects/CanNengApp/static/js/aes.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _crypto = _interopRequireDefault(__webpack_require__(/*! ../js/crypto.js */ 15));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\n// const key = CryptoJS.enc.Utf8.parse('1234123412ABCDEF') // 十六位十六进制数作为密钥\n// const iv = CryptoJS.enc.Utf8.parse('ABCDEF1234123412') // 十六位十六进制数作为密钥偏移量\n\n// 解密方法\nfunction Decrypt(word, key) {\n  var ckey = _crypto.default.enc.Utf8.parse(key); // 十六位十六进制数作为密钥\n  // let encryptedHexStr = CryptoJS.enc.Hex.parse(word)\n  // let srcs = CryptoJS.enc.Base64.stringify(encryptedHexStr)\n\n  var decrypt = _crypto.default.AES.decrypt(word, ckey, {\n\n    mode: _crypto.default.mode.ECB,\n    padding: _crypto.default.pad.Pkcs7 });\n\n  var decryptedStr = decrypt.toString(_crypto.default.enc.Utf8);\n  __f__(\"log\", 'decryptedStr', decryptedStr.toString(), \" at static\\\\js\\\\aes.js:18\");\n\n  return decryptedStr.toString();\n}\n\n// 加密方法\nfunction Encrypt(word, key) {\n  var ckey = _crypto.default.enc.Utf8.parse(key);\n  // let srcs = CryptoJS.enc.Utf8.parse(word)\n  var encrypted = _crypto.default.AES.encrypt(word, ckey, {\n    mode: _crypto.default.mode.ECB,\n    padding: _crypto.default.pad.Pkcs7 });\n\n  return encrypted.toString();\n}var _default =\n{\n  Decrypt: Decrypt,\n  Encrypt: Encrypt };exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 4)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vc3RhdGljL2pzL2Flcy5qcyJdLCJuYW1lcyI6WyJEZWNyeXB0Iiwid29yZCIsImtleSIsImNrZXkiLCJDcnlwdG9KUyIsImVuYyIsIlV0ZjgiLCJwYXJzZSIsImRlY3J5cHQiLCJBRVMiLCJtb2RlIiwiRUNCIiwicGFkZGluZyIsInBhZCIsIlBrY3M3IiwiZGVjcnlwdGVkU3RyIiwidG9TdHJpbmciLCJFbmNyeXB0IiwiZW5jcnlwdGVkIiwiZW5jcnlwdCJdLCJtYXBwaW5ncyI6Im9JQUFBLHFGOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxTQUFTQSxPQUFULENBQWtCQyxJQUFsQixFQUF3QkMsR0FBeEIsRUFBNkI7QUFDM0IsTUFBSUMsSUFBSSxHQUFHQyxnQkFBU0MsR0FBVCxDQUFhQyxJQUFiLENBQWtCQyxLQUFsQixDQUF3QkwsR0FBeEIsQ0FBWCxDQUQyQixDQUNhO0FBQ3hDO0FBQ0E7O0FBRUEsTUFBSU0sT0FBTyxHQUFHSixnQkFBU0ssR0FBVCxDQUFhRCxPQUFiLENBQXFCUCxJQUFyQixFQUEyQkUsSUFBM0IsRUFBaUM7O0FBRTdDTyxRQUFJLEVBQUVOLGdCQUFTTSxJQUFULENBQWNDLEdBRnlCO0FBRzdDQyxXQUFPLEVBQUVSLGdCQUFTUyxHQUFULENBQWFDLEtBSHVCLEVBQWpDLENBQWQ7O0FBS0EsTUFBSUMsWUFBWSxHQUFHUCxPQUFPLENBQUNRLFFBQVIsQ0FBaUJaLGdCQUFTQyxHQUFULENBQWFDLElBQTlCLENBQW5CO0FBQ0EsZUFBWSxjQUFaLEVBQTRCUyxZQUFZLENBQUNDLFFBQWIsRUFBNUI7O0FBRUEsU0FBT0QsWUFBWSxDQUFDQyxRQUFiLEVBQVA7QUFDRDs7QUFFRDtBQUNBLFNBQVNDLE9BQVQsQ0FBa0JoQixJQUFsQixFQUF3QkMsR0FBeEIsRUFBNkI7QUFDM0IsTUFBSUMsSUFBSSxHQUFHQyxnQkFBU0MsR0FBVCxDQUFhQyxJQUFiLENBQWtCQyxLQUFsQixDQUF3QkwsR0FBeEIsQ0FBWDtBQUNBO0FBQ0EsTUFBSWdCLFNBQVMsR0FBR2QsZ0JBQVNLLEdBQVQsQ0FBYVUsT0FBYixDQUFxQmxCLElBQXJCLEVBQTJCRSxJQUEzQixFQUFpQztBQUMvQ08sUUFBSSxFQUFFTixnQkFBU00sSUFBVCxDQUFjQyxHQUQyQjtBQUUvQ0MsV0FBTyxFQUFFUixnQkFBU1MsR0FBVCxDQUFhQyxLQUZ5QixFQUFqQyxDQUFoQjs7QUFJQSxTQUFPSSxTQUFTLENBQUNGLFFBQVYsRUFBUDtBQUNELEM7QUFDYztBQUNiaEIsU0FBTyxFQUFQQSxPQURhO0FBRWJpQixTQUFPLEVBQVBBLE9BRmEsRSIsImZpbGUiOiIxNC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDcnlwdG9KUyBmcm9tICcuLi9qcy9jcnlwdG8uanMnXG5cbi8vIGNvbnN0IGtleSA9IENyeXB0b0pTLmVuYy5VdGY4LnBhcnNlKCcxMjM0MTIzNDEyQUJDREVGJykgLy8g5Y2B5YWt5L2N5Y2B5YWt6L+b5Yi25pWw5L2c5Li65a+G6ZKlXG4vLyBjb25zdCBpdiA9IENyeXB0b0pTLmVuYy5VdGY4LnBhcnNlKCdBQkNERUYxMjM0MTIzNDEyJykgLy8g5Y2B5YWt5L2N5Y2B5YWt6L+b5Yi25pWw5L2c5Li65a+G6ZKl5YGP56e76YePXG5cbi8vIOino+WvhuaWueazlVxuZnVuY3Rpb24gRGVjcnlwdCAod29yZCwga2V5KSB7XG4gIGxldCBja2V5ID0gQ3J5cHRvSlMuZW5jLlV0ZjgucGFyc2Uoa2V5KSAvLyDljYHlha3kvY3ljYHlha3ov5vliLbmlbDkvZzkuLrlr4bpkqVcbiAgLy8gbGV0IGVuY3J5cHRlZEhleFN0ciA9IENyeXB0b0pTLmVuYy5IZXgucGFyc2Uod29yZClcbiAgLy8gbGV0IHNyY3MgPSBDcnlwdG9KUy5lbmMuQmFzZTY0LnN0cmluZ2lmeShlbmNyeXB0ZWRIZXhTdHIpXG5cbiAgbGV0IGRlY3J5cHQgPSBDcnlwdG9KUy5BRVMuZGVjcnlwdCh3b3JkLCBja2V5LCB7XG5cbiAgICBtb2RlOiBDcnlwdG9KUy5tb2RlLkVDQixcbiAgICBwYWRkaW5nOiBDcnlwdG9KUy5wYWQuUGtjczdcbiAgfSlcbiAgbGV0IGRlY3J5cHRlZFN0ciA9IGRlY3J5cHQudG9TdHJpbmcoQ3J5cHRvSlMuZW5jLlV0ZjgpXG4gIGNvbnNvbGUubG9nKCdkZWNyeXB0ZWRTdHInLCBkZWNyeXB0ZWRTdHIudG9TdHJpbmcoKSlcblxuICByZXR1cm4gZGVjcnlwdGVkU3RyLnRvU3RyaW5nKClcbn1cblxuLy8g5Yqg5a+G5pa55rOVXG5mdW5jdGlvbiBFbmNyeXB0ICh3b3JkLCBrZXkpIHtcbiAgbGV0IGNrZXkgPSBDcnlwdG9KUy5lbmMuVXRmOC5wYXJzZShrZXkpXG4gIC8vIGxldCBzcmNzID0gQ3J5cHRvSlMuZW5jLlV0ZjgucGFyc2Uod29yZClcbiAgbGV0IGVuY3J5cHRlZCA9IENyeXB0b0pTLkFFUy5lbmNyeXB0KHdvcmQsIGNrZXksIHtcbiAgICBtb2RlOiBDcnlwdG9KUy5tb2RlLkVDQixcbiAgICBwYWRkaW5nOiBDcnlwdG9KUy5wYWQuUGtjczdcbiAgfSlcbiAgcmV0dXJuIGVuY3J5cHRlZC50b1N0cmluZygpXG59XG5leHBvcnQgZGVmYXVsdCB7XG4gIERlY3J5cHQsXG4gIEVuY3J5cHRcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///14\n");

/***/ }),

/***/ 15:
/*!*******************************************************************************!*\
  !*** C:/Users/DELL/Documents/HBuilderProjects/CanNengApp/static/js/crypto.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(";(function (root, factory) {\n  if (true) {\n    // CommonJS\n    module.exports = exports = factory();\n  } else\n  {}\n})(void 0, function () {\n\n  /**\n                         * CryptoJS core components.\n                         */\n  var CryptoJS = CryptoJS || function (Math, undefined) {\n    /*\n                                                          * Local polyfil of Object.create\n                                                          */\n    var create = Object.create || function () {\n      function F() {};\n\n      return function (obj) {\n        var subtype;\n\n        F.prototype = obj;\n\n        subtype = new F();\n\n        F.prototype = null;\n\n        return subtype;\n      };\n    }();\n\n    /**\n          * CryptoJS namespace.\n          */\n    var C = {};\n\n    /**\n                 * Library namespace.\n                 */\n    var C_lib = C.lib = {};\n\n    /**\n                             * Base object for prototypal inheritance.\n                             */\n    var Base = C_lib.Base = function () {\n\n\n      return {\n        /**\n                * Creates a new object that inherits from this object.\n                *\n                * @param {Object} overrides Properties to copy into the new object.\n                *\n                * @return {Object} The new object.\n                *\n                * @static\n                *\n                * @example\n                *\n                *     var MyType = CryptoJS.lib.Base.extend({\n                *         field: 'value',\n                *\n                *         method: function () {\n                *         }\n                *     });\n                */\n        extend: function extend(overrides) {\n          // Spawn\n          var subtype = create(this);\n\n          // Augment\n          if (overrides) {\n            subtype.mixIn(overrides);\n          }\n\n          // Create default initializer\n          if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {\n            subtype.init = function () {\n              subtype.$super.init.apply(this, arguments);\n            };\n          }\n\n          // Initializer's prototype is the subtype object\n          subtype.init.prototype = subtype;\n\n          // Reference supertype\n          subtype.$super = this;\n\n          return subtype;\n        },\n\n        /**\n            * Extends this object and runs the init method.\n            * Arguments to create() will be passed to init().\n            *\n            * @return {Object} The new object.\n            *\n            * @static\n            *\n            * @example\n            *\n            *     var instance = MyType.create();\n            */\n        create: function create() {\n          var instance = this.extend();\n          instance.init.apply(instance, arguments);\n\n          return instance;\n        },\n\n        /**\n            * Initializes a newly created object.\n            * Override this method to add some logic when your objects are created.\n            *\n            * @example\n            *\n            *     var MyType = CryptoJS.lib.Base.extend({\n            *         init: function () {\n            *             // ...\n            *         }\n            *     });\n            */\n        init: function init() {\n        },\n\n        /**\n            * Copies properties into this object.\n            *\n            * @param {Object} properties The properties to mix in.\n            *\n            * @example\n            *\n            *     MyType.mixIn({\n            *         field: 'value'\n            *     });\n            */\n        mixIn: function mixIn(properties) {\n          for (var propertyName in properties) {\n            if (properties.hasOwnProperty(propertyName)) {\n              this[propertyName] = properties[propertyName];\n            }\n          }\n\n          // IE won't copy toString using the loop above\n          if (properties.hasOwnProperty('toString')) {\n            this.toString = properties.toString;\n          }\n        },\n\n        /**\n            * Creates a copy of this object.\n            *\n            * @return {Object} The clone.\n            *\n            * @example\n            *\n            *     var clone = instance.clone();\n            */\n        clone: function clone() {\n          return this.init.prototype.extend(this);\n        } };\n\n    }();\n\n    /**\n          * An array of 32-bit words.\n          *\n          * @property {Array} words The array of 32-bit words.\n          * @property {number} sigBytes The number of significant bytes in this word array.\n          */\n    var WordArray = C_lib.WordArray = Base.extend({\n      /**\n                                                     * Initializes a newly created word array.\n                                                     *\n                                                     * @param {Array} words (Optional) An array of 32-bit words.\n                                                     * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n                                                     *\n                                                     * @example\n                                                     *\n                                                     *     var wordArray = CryptoJS.lib.WordArray.create();\n                                                     *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n                                                     *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n                                                     */\n      init: function init(words, sigBytes) {\n        words = this.words = words || [];\n\n        if (sigBytes != undefined) {\n          this.sigBytes = sigBytes;\n        } else {\n          this.sigBytes = words.length * 4;\n        }\n      },\n\n      /**\n          * Converts this word array to a string.\n          *\n          * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n          *\n          * @return {string} The stringified word array.\n          *\n          * @example\n          *\n          *     var string = wordArray + '';\n          *     var string = wordArray.toString();\n          *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n          */\n      toString: function toString(encoder) {\n        return (encoder || Hex).stringify(this);\n      },\n\n      /**\n          * Concatenates a word array to this word array.\n          *\n          * @param {WordArray} wordArray The word array to append.\n          *\n          * @return {WordArray} This word array.\n          *\n          * @example\n          *\n          *     wordArray1.concat(wordArray2);\n          */\n      concat: function concat(wordArray) {\n        // Shortcuts\n        var thisWords = this.words;\n        var thatWords = wordArray.words;\n        var thisSigBytes = this.sigBytes;\n        var thatSigBytes = wordArray.sigBytes;\n\n        // Clamp excess bits\n        this.clamp();\n\n        // Concat\n        if (thisSigBytes % 4) {\n          // Copy one byte at a time\n          for (var i = 0; i < thatSigBytes; i++) {\n            var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n            thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;\n          }\n        } else {\n          // Copy one word at a time\n          for (var i = 0; i < thatSigBytes; i += 4) {\n            thisWords[thisSigBytes + i >>> 2] = thatWords[i >>> 2];\n          }\n        }\n        this.sigBytes += thatSigBytes;\n\n        // Chainable\n        return this;\n      },\n\n      /**\n          * Removes insignificant bits.\n          *\n          * @example\n          *\n          *     wordArray.clamp();\n          */\n      clamp: function clamp() {\n        // Shortcuts\n        var words = this.words;\n        var sigBytes = this.sigBytes;\n\n        // Clamp\n        words[sigBytes >>> 2] &= 0xffffffff << 32 - sigBytes % 4 * 8;\n        words.length = Math.ceil(sigBytes / 4);\n      },\n\n      /**\n          * Creates a copy of this word array.\n          *\n          * @return {WordArray} The clone.\n          *\n          * @example\n          *\n          *     var clone = wordArray.clone();\n          */\n      clone: function clone() {\n        var clone = Base.clone.call(this);\n        clone.words = this.words.slice(0);\n\n        return clone;\n      },\n\n      /**\n          * Creates a word array filled with random bytes.\n          *\n          * @param {number} nBytes The number of random bytes to generate.\n          *\n          * @return {WordArray} The random word array.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var wordArray = CryptoJS.lib.WordArray.random(16);\n          */\n      random: function random(nBytes) {\n        var words = [];\n\n        var r = function r(m_w) {\n          var m_w = m_w;\n          var m_z = 0x3ade68b1;\n          var mask = 0xffffffff;\n\n          return function () {\n            m_z = 0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10) & mask;\n            m_w = 0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10) & mask;\n            var result = (m_z << 0x10) + m_w & mask;\n            result /= 0x100000000;\n            result += 0.5;\n            return result * (Math.random() > .5 ? 1 : -1);\n          };\n        };\n\n        for (var i = 0, rcache; i < nBytes; i += 4) {\n          var _r = r((rcache || Math.random()) * 0x100000000);\n\n          rcache = _r() * 0x3ade67b7;\n          words.push(_r() * 0x100000000 | 0);\n        }\n\n        return new WordArray.init(words, nBytes);\n      } });\n\n\n    /**\n             * Encoder namespace.\n             */\n    var C_enc = C.enc = {};\n\n    /**\n                             * Hex encoding strategy.\n                             */\n    var Hex = C_enc.Hex = {\n      /**\n                             * Converts a word array to a hex string.\n                             *\n                             * @param {WordArray} wordArray The word array.\n                             *\n                             * @return {string} The hex string.\n                             *\n                             * @static\n                             *\n                             * @example\n                             *\n                             *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n                             */\n      stringify: function stringify(wordArray) {\n        // Shortcuts\n        var words = wordArray.words;\n        var sigBytes = wordArray.sigBytes;\n\n        // Convert\n        var hexChars = [];\n        for (var i = 0; i < sigBytes; i++) {\n          var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n          hexChars.push((bite >>> 4).toString(16));\n          hexChars.push((bite & 0x0f).toString(16));\n        }\n\n        return hexChars.join('');\n      },\n\n      /**\n          * Converts a hex string to a word array.\n          *\n          * @param {string} hexStr The hex string.\n          *\n          * @return {WordArray} The word array.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n          */\n      parse: function parse(hexStr) {\n        // Shortcut\n        var hexStrLength = hexStr.length;\n\n        // Convert\n        var words = [];\n        for (var i = 0; i < hexStrLength; i += 2) {\n          words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;\n        }\n\n        return new WordArray.init(words, hexStrLength / 2);\n      } };\n\n\n    /**\n            * Latin1 encoding strategy.\n            */\n    var Latin1 = C_enc.Latin1 = {\n      /**\n                                   * Converts a word array to a Latin1 string.\n                                   *\n                                   * @param {WordArray} wordArray The word array.\n                                   *\n                                   * @return {string} The Latin1 string.\n                                   *\n                                   * @static\n                                   *\n                                   * @example\n                                   *\n                                   *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n                                   */\n      stringify: function stringify(wordArray) {\n        // Shortcuts\n        var words = wordArray.words;\n        var sigBytes = wordArray.sigBytes;\n\n        // Convert\n        var latin1Chars = [];\n        for (var i = 0; i < sigBytes; i++) {\n          var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n          latin1Chars.push(String.fromCharCode(bite));\n        }\n\n        return latin1Chars.join('');\n      },\n\n      /**\n          * Converts a Latin1 string to a word array.\n          *\n          * @param {string} latin1Str The Latin1 string.\n          *\n          * @return {WordArray} The word array.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n          */\n      parse: function parse(latin1Str) {\n        // Shortcut\n        var latin1StrLength = latin1Str.length;\n\n        // Convert\n        var words = [];\n        for (var i = 0; i < latin1StrLength; i++) {\n          words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << 24 - i % 4 * 8;\n        }\n\n        return new WordArray.init(words, latin1StrLength);\n      } };\n\n\n    /**\n            * UTF-8 encoding strategy.\n            */\n    var Utf8 = C_enc.Utf8 = {\n      /**\n                               * Converts a word array to a UTF-8 string.\n                               *\n                               * @param {WordArray} wordArray The word array.\n                               *\n                               * @return {string} The UTF-8 string.\n                               *\n                               * @static\n                               *\n                               * @example\n                               *\n                               *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n                               */\n      stringify: function stringify(wordArray) {\n        try {\n          return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n        } catch (e) {\n          throw new Error('Malformed UTF-8 data');\n        }\n      },\n\n      /**\n          * Converts a UTF-8 string to a word array.\n          *\n          * @param {string} utf8Str The UTF-8 string.\n          *\n          * @return {WordArray} The word array.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n          */\n      parse: function parse(utf8Str) {\n        return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n      } };\n\n\n    /**\n            * Abstract buffered block algorithm template.\n            *\n            * The property blockSize must be implemented in a concrete subtype.\n            *\n            * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n            */\n    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n      /**\n                                                                               * Resets this block algorithm's data buffer to its initial state.\n                                                                               *\n                                                                               * @example\n                                                                               *\n                                                                               *     bufferedBlockAlgorithm.reset();\n                                                                               */\n      reset: function reset() {\n        // Initial values\n        this._data = new WordArray.init();\n        this._nDataBytes = 0;\n      },\n\n      /**\n          * Adds new data to this block algorithm's buffer.\n          *\n          * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n          *\n          * @example\n          *\n          *     bufferedBlockAlgorithm._append('data');\n          *     bufferedBlockAlgorithm._append(wordArray);\n          */\n      _append: function _append(data) {\n        // Convert string to WordArray, else assume WordArray already\n        if (typeof data == 'string') {\n          data = Utf8.parse(data);\n        }\n\n        // Append\n        this._data.concat(data);\n        this._nDataBytes += data.sigBytes;\n      },\n\n      /**\n          * Processes available data blocks.\n          *\n          * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n          *\n          * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n          *\n          * @return {WordArray} The processed data.\n          *\n          * @example\n          *\n          *     var processedData = bufferedBlockAlgorithm._process();\n          *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n          */\n      _process: function _process(doFlush) {\n        // Shortcuts\n        var data = this._data;\n        var dataWords = data.words;\n        var dataSigBytes = data.sigBytes;\n        var blockSize = this.blockSize;\n        var blockSizeBytes = blockSize * 4;\n\n        // Count blocks ready\n        var nBlocksReady = dataSigBytes / blockSizeBytes;\n        if (doFlush) {\n          // Round up to include partial blocks\n          nBlocksReady = Math.ceil(nBlocksReady);\n        } else {\n          // Round down to include only full blocks,\n          // less the number of blocks that must remain in the buffer\n          nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n        }\n\n        // Count words ready\n        var nWordsReady = nBlocksReady * blockSize;\n\n        // Count bytes ready\n        var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n        // Process blocks\n        if (nWordsReady) {\n          for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n            // Perform concrete-algorithm logic\n            this._doProcessBlock(dataWords, offset);\n          }\n\n          // Remove processed words\n          var processedWords = dataWords.splice(0, nWordsReady);\n          data.sigBytes -= nBytesReady;\n        }\n\n        // Return processed words\n        return new WordArray.init(processedWords, nBytesReady);\n      },\n\n      /**\n          * Creates a copy of this object.\n          *\n          * @return {Object} The clone.\n          *\n          * @example\n          *\n          *     var clone = bufferedBlockAlgorithm.clone();\n          */\n      clone: function clone() {\n        var clone = Base.clone.call(this);\n        clone._data = this._data.clone();\n\n        return clone;\n      },\n\n      _minBufferSize: 0 });\n\n\n    /**\n                             * Abstract hasher template.\n                             *\n                             * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n                             */\n    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n      /**\n                                                                 * Configuration options.\n                                                                 */\n      cfg: Base.extend(),\n\n      /**\n                           * Initializes a newly created hasher.\n                           *\n                           * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n                           *\n                           * @example\n                           *\n                           *     var hasher = CryptoJS.algo.SHA256.create();\n                           */\n      init: function init(cfg) {\n        // Apply config defaults\n        this.cfg = this.cfg.extend(cfg);\n\n        // Set initial values\n        this.reset();\n      },\n\n      /**\n          * Resets this hasher to its initial state.\n          *\n          * @example\n          *\n          *     hasher.reset();\n          */\n      reset: function reset() {\n        // Reset data buffer\n        BufferedBlockAlgorithm.reset.call(this);\n\n        // Perform concrete-hasher logic\n        this._doReset();\n      },\n\n      /**\n          * Updates this hasher with a message.\n          *\n          * @param {WordArray|string} messageUpdate The message to append.\n          *\n          * @return {Hasher} This hasher.\n          *\n          * @example\n          *\n          *     hasher.update('message');\n          *     hasher.update(wordArray);\n          */\n      update: function update(messageUpdate) {\n        // Append\n        this._append(messageUpdate);\n\n        // Update the hash\n        this._process();\n\n        // Chainable\n        return this;\n      },\n\n      /**\n          * Finalizes the hash computation.\n          * Note that the finalize operation is effectively a destructive, read-once operation.\n          *\n          * @param {WordArray|string} messageUpdate (Optional) A final message update.\n          *\n          * @return {WordArray} The hash.\n          *\n          * @example\n          *\n          *     var hash = hasher.finalize();\n          *     var hash = hasher.finalize('message');\n          *     var hash = hasher.finalize(wordArray);\n          */\n      finalize: function finalize(messageUpdate) {\n        // Final message update\n        if (messageUpdate) {\n          this._append(messageUpdate);\n        }\n\n        // Perform concrete-hasher logic\n        var hash = this._doFinalize();\n\n        return hash;\n      },\n\n      blockSize: 512 / 32,\n\n      /**\n                            * Creates a shortcut function to a hasher's object interface.\n                            *\n                            * @param {Hasher} hasher The hasher to create a helper for.\n                            *\n                            * @return {Function} The shortcut function.\n                            *\n                            * @static\n                            *\n                            * @example\n                            *\n                            *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n                            */\n      _createHelper: function _createHelper(hasher) {\n        return function (message, cfg) {\n          return new hasher.init(cfg).finalize(message);\n        };\n      },\n\n      /**\n          * Creates a shortcut function to the HMAC's object interface.\n          *\n          * @param {Hasher} hasher The hasher to use in this HMAC helper.\n          *\n          * @return {Function} The shortcut function.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n          */\n      _createHmacHelper: function _createHmacHelper(hasher) {\n        return function (message, key) {\n          return new C_algo.HMAC.init(hasher, key).finalize(message);\n        };\n      } });\n\n\n    /**\n             * Algorithm namespace.\n             */\n    var C_algo = C.algo = {};\n\n    return C;\n  }(Math);\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var C_enc = C.enc;\n\n    /**\n                        * Base64 encoding strategy.\n                        */\n    var Base64 = C_enc.Base64 = {\n      /**\n                                   * Converts a word array to a Base64 string.\n                                   *\n                                   * @param {WordArray} wordArray The word array.\n                                   *\n                                   * @return {string} The Base64 string.\n                                   *\n                                   * @static\n                                   *\n                                   * @example\n                                   *\n                                   *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\n                                   */\n      stringify: function stringify(wordArray) {\n        // Shortcuts\n        var words = wordArray.words;\n        var sigBytes = wordArray.sigBytes;\n        var map = this._map;\n\n        // Clamp excess bits\n        wordArray.clamp();\n\n        // Convert\n        var base64Chars = [];\n        for (var i = 0; i < sigBytes; i += 3) {\n          var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n          var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 0xff;\n          var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 0xff;\n\n          var triplet = byte1 << 16 | byte2 << 8 | byte3;\n\n          for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {\n            base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 0x3f));\n          }\n        }\n\n        // Add padding\n        var paddingChar = map.charAt(64);\n        if (paddingChar) {\n          while (base64Chars.length % 4) {\n            base64Chars.push(paddingChar);\n          }\n        }\n\n        return base64Chars.join('');\n      },\n\n      /**\n          * Converts a Base64 string to a word array.\n          *\n          * @param {string} base64Str The Base64 string.\n          *\n          * @return {WordArray} The word array.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\n          */\n      parse: function parse(base64Str) {\n        // Shortcuts\n        var base64StrLength = base64Str.length;\n        var map = this._map;\n        var reverseMap = this._reverseMap;\n\n        if (!reverseMap) {\n          reverseMap = this._reverseMap = [];\n          for (var j = 0; j < map.length; j++) {\n            reverseMap[map.charCodeAt(j)] = j;\n          }\n        }\n\n        // Ignore padding\n        var paddingChar = map.charAt(64);\n        if (paddingChar) {\n          var paddingIndex = base64Str.indexOf(paddingChar);\n          if (paddingIndex !== -1) {\n            base64StrLength = paddingIndex;\n          }\n        }\n\n        // Convert\n        return parseLoop(base64Str, base64StrLength, reverseMap);\n\n      },\n\n      _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=' };\n\n\n    function parseLoop(base64Str, base64StrLength, reverseMap) {\n      var words = [];\n      var nBytes = 0;\n      for (var i = 0; i < base64StrLength; i++) {\n        if (i % 4) {\n          var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;\n          var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;\n          words[nBytes >>> 2] |= (bits1 | bits2) << 24 - nBytes % 4 * 8;\n          nBytes++;\n        }\n      }\n      return WordArray.create(words, nBytes);\n    }\n  })();\n\n\n  (function (Math) {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var Hasher = C_lib.Hasher;\n    var C_algo = C.algo;\n\n    // Constants table\n    var T = [];\n\n    // Compute constants\n    (function () {\n      for (var i = 0; i < 64; i++) {\n        T[i] = Math.abs(Math.sin(i + 1)) * 0x100000000 | 0;\n      }\n    })();\n\n    /**\n           * MD5 hash algorithm.\n           */\n    var MD5 = C_algo.MD5 = Hasher.extend({\n      _doReset: function _doReset() {\n        this._hash = new WordArray.init([\n        0x67452301, 0xefcdab89,\n        0x98badcfe, 0x10325476]);\n\n      },\n\n      _doProcessBlock: function _doProcessBlock(M, offset) {\n        // Swap endian\n        for (var i = 0; i < 16; i++) {\n          // Shortcuts\n          var offset_i = offset + i;\n          var M_offset_i = M[offset_i];\n\n          M[offset_i] =\n          (M_offset_i << 8 | M_offset_i >>> 24) & 0x00ff00ff |\n          (M_offset_i << 24 | M_offset_i >>> 8) & 0xff00ff00;\n\n        }\n\n        // Shortcuts\n        var H = this._hash.words;\n\n        var M_offset_0 = M[offset + 0];\n        var M_offset_1 = M[offset + 1];\n        var M_offset_2 = M[offset + 2];\n        var M_offset_3 = M[offset + 3];\n        var M_offset_4 = M[offset + 4];\n        var M_offset_5 = M[offset + 5];\n        var M_offset_6 = M[offset + 6];\n        var M_offset_7 = M[offset + 7];\n        var M_offset_8 = M[offset + 8];\n        var M_offset_9 = M[offset + 9];\n        var M_offset_10 = M[offset + 10];\n        var M_offset_11 = M[offset + 11];\n        var M_offset_12 = M[offset + 12];\n        var M_offset_13 = M[offset + 13];\n        var M_offset_14 = M[offset + 14];\n        var M_offset_15 = M[offset + 15];\n\n        // Working varialbes\n        var a = H[0];\n        var b = H[1];\n        var c = H[2];\n        var d = H[3];\n\n        // Computation\n        a = FF(a, b, c, d, M_offset_0, 7, T[0]);\n        d = FF(d, a, b, c, M_offset_1, 12, T[1]);\n        c = FF(c, d, a, b, M_offset_2, 17, T[2]);\n        b = FF(b, c, d, a, M_offset_3, 22, T[3]);\n        a = FF(a, b, c, d, M_offset_4, 7, T[4]);\n        d = FF(d, a, b, c, M_offset_5, 12, T[5]);\n        c = FF(c, d, a, b, M_offset_6, 17, T[6]);\n        b = FF(b, c, d, a, M_offset_7, 22, T[7]);\n        a = FF(a, b, c, d, M_offset_8, 7, T[8]);\n        d = FF(d, a, b, c, M_offset_9, 12, T[9]);\n        c = FF(c, d, a, b, M_offset_10, 17, T[10]);\n        b = FF(b, c, d, a, M_offset_11, 22, T[11]);\n        a = FF(a, b, c, d, M_offset_12, 7, T[12]);\n        d = FF(d, a, b, c, M_offset_13, 12, T[13]);\n        c = FF(c, d, a, b, M_offset_14, 17, T[14]);\n        b = FF(b, c, d, a, M_offset_15, 22, T[15]);\n\n        a = GG(a, b, c, d, M_offset_1, 5, T[16]);\n        d = GG(d, a, b, c, M_offset_6, 9, T[17]);\n        c = GG(c, d, a, b, M_offset_11, 14, T[18]);\n        b = GG(b, c, d, a, M_offset_0, 20, T[19]);\n        a = GG(a, b, c, d, M_offset_5, 5, T[20]);\n        d = GG(d, a, b, c, M_offset_10, 9, T[21]);\n        c = GG(c, d, a, b, M_offset_15, 14, T[22]);\n        b = GG(b, c, d, a, M_offset_4, 20, T[23]);\n        a = GG(a, b, c, d, M_offset_9, 5, T[24]);\n        d = GG(d, a, b, c, M_offset_14, 9, T[25]);\n        c = GG(c, d, a, b, M_offset_3, 14, T[26]);\n        b = GG(b, c, d, a, M_offset_8, 20, T[27]);\n        a = GG(a, b, c, d, M_offset_13, 5, T[28]);\n        d = GG(d, a, b, c, M_offset_2, 9, T[29]);\n        c = GG(c, d, a, b, M_offset_7, 14, T[30]);\n        b = GG(b, c, d, a, M_offset_12, 20, T[31]);\n\n        a = HH(a, b, c, d, M_offset_5, 4, T[32]);\n        d = HH(d, a, b, c, M_offset_8, 11, T[33]);\n        c = HH(c, d, a, b, M_offset_11, 16, T[34]);\n        b = HH(b, c, d, a, M_offset_14, 23, T[35]);\n        a = HH(a, b, c, d, M_offset_1, 4, T[36]);\n        d = HH(d, a, b, c, M_offset_4, 11, T[37]);\n        c = HH(c, d, a, b, M_offset_7, 16, T[38]);\n        b = HH(b, c, d, a, M_offset_10, 23, T[39]);\n        a = HH(a, b, c, d, M_offset_13, 4, T[40]);\n        d = HH(d, a, b, c, M_offset_0, 11, T[41]);\n        c = HH(c, d, a, b, M_offset_3, 16, T[42]);\n        b = HH(b, c, d, a, M_offset_6, 23, T[43]);\n        a = HH(a, b, c, d, M_offset_9, 4, T[44]);\n        d = HH(d, a, b, c, M_offset_12, 11, T[45]);\n        c = HH(c, d, a, b, M_offset_15, 16, T[46]);\n        b = HH(b, c, d, a, M_offset_2, 23, T[47]);\n\n        a = II(a, b, c, d, M_offset_0, 6, T[48]);\n        d = II(d, a, b, c, M_offset_7, 10, T[49]);\n        c = II(c, d, a, b, M_offset_14, 15, T[50]);\n        b = II(b, c, d, a, M_offset_5, 21, T[51]);\n        a = II(a, b, c, d, M_offset_12, 6, T[52]);\n        d = II(d, a, b, c, M_offset_3, 10, T[53]);\n        c = II(c, d, a, b, M_offset_10, 15, T[54]);\n        b = II(b, c, d, a, M_offset_1, 21, T[55]);\n        a = II(a, b, c, d, M_offset_8, 6, T[56]);\n        d = II(d, a, b, c, M_offset_15, 10, T[57]);\n        c = II(c, d, a, b, M_offset_6, 15, T[58]);\n        b = II(b, c, d, a, M_offset_13, 21, T[59]);\n        a = II(a, b, c, d, M_offset_4, 6, T[60]);\n        d = II(d, a, b, c, M_offset_11, 10, T[61]);\n        c = II(c, d, a, b, M_offset_2, 15, T[62]);\n        b = II(b, c, d, a, M_offset_9, 21, T[63]);\n\n        // Intermediate hash value\n        H[0] = H[0] + a | 0;\n        H[1] = H[1] + b | 0;\n        H[2] = H[2] + c | 0;\n        H[3] = H[3] + d | 0;\n      },\n\n      _doFinalize: function _doFinalize() {\n        // Shortcuts\n        var data = this._data;\n        var dataWords = data.words;\n\n        var nBitsTotal = this._nDataBytes * 8;\n        var nBitsLeft = data.sigBytes * 8;\n\n        // Add padding\n        dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;\n\n        var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);\n        var nBitsTotalL = nBitsTotal;\n        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] =\n        (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 0x00ff00ff |\n        (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 0xff00ff00;\n\n        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] =\n        (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 0x00ff00ff |\n        (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 0xff00ff00;\n\n\n        data.sigBytes = (dataWords.length + 1) * 4;\n\n        // Hash final blocks\n        this._process();\n\n        // Shortcuts\n        var hash = this._hash;\n        var H = hash.words;\n\n        // Swap endian\n        for (var i = 0; i < 4; i++) {\n          // Shortcut\n          var H_i = H[i];\n\n          H[i] = (H_i << 8 | H_i >>> 24) & 0x00ff00ff |\n          (H_i << 24 | H_i >>> 8) & 0xff00ff00;\n        }\n\n        // Return final computed hash\n        return hash;\n      },\n\n      clone: function clone() {\n        var clone = Hasher.clone.call(this);\n        clone._hash = this._hash.clone();\n\n        return clone;\n      } });\n\n\n    function FF(a, b, c, d, x, s, t) {\n      var n = a + (b & c | ~b & d) + x + t;\n      return (n << s | n >>> 32 - s) + b;\n    }\n\n    function GG(a, b, c, d, x, s, t) {\n      var n = a + (b & d | c & ~d) + x + t;\n      return (n << s | n >>> 32 - s) + b;\n    }\n\n    function HH(a, b, c, d, x, s, t) {\n      var n = a + (b ^ c ^ d) + x + t;\n      return (n << s | n >>> 32 - s) + b;\n    }\n\n    function II(a, b, c, d, x, s, t) {\n      var n = a + (c ^ (b | ~d)) + x + t;\n      return (n << s | n >>> 32 - s) + b;\n    }\n\n    /**\n       * Shortcut function to the hasher's object interface.\n       *\n       * @param {WordArray|string} message The message to hash.\n       *\n       * @return {WordArray} The hash.\n       *\n       * @static\n       *\n       * @example\n       *\n       *     var hash = CryptoJS.MD5('message');\n       *     var hash = CryptoJS.MD5(wordArray);\n       */\n    C.MD5 = Hasher._createHelper(MD5);\n\n    /**\n                                        * Shortcut function to the HMAC's object interface.\n                                        *\n                                        * @param {WordArray|string} message The message to hash.\n                                        * @param {WordArray|string} key The secret key.\n                                        *\n                                        * @return {WordArray} The HMAC.\n                                        *\n                                        * @static\n                                        *\n                                        * @example\n                                        *\n                                        *     var hmac = CryptoJS.HmacMD5(message, key);\n                                        */\n    C.HmacMD5 = Hasher._createHmacHelper(MD5);\n  })(Math);\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var Hasher = C_lib.Hasher;\n    var C_algo = C.algo;\n\n    // Reusable object\n    var W = [];\n\n    /**\n                 * SHA-1 hash algorithm.\n                 */\n    var SHA1 = C_algo.SHA1 = Hasher.extend({\n      _doReset: function _doReset() {\n        this._hash = new WordArray.init([\n        0x67452301, 0xefcdab89,\n        0x98badcfe, 0x10325476,\n        0xc3d2e1f0]);\n\n      },\n\n      _doProcessBlock: function _doProcessBlock(M, offset) {\n        // Shortcut\n        var H = this._hash.words;\n\n        // Working variables\n        var a = H[0];\n        var b = H[1];\n        var c = H[2];\n        var d = H[3];\n        var e = H[4];\n\n        // Computation\n        for (var i = 0; i < 80; i++) {\n          if (i < 16) {\n            W[i] = M[offset + i] | 0;\n          } else {\n            var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n            W[i] = n << 1 | n >>> 31;\n          }\n\n          var t = (a << 5 | a >>> 27) + e + W[i];\n          if (i < 20) {\n            t += (b & c | ~b & d) + 0x5a827999;\n          } else if (i < 40) {\n            t += (b ^ c ^ d) + 0x6ed9eba1;\n          } else if (i < 60) {\n            t += (b & c | b & d | c & d) - 0x70e44324;\n          } else /* if (i < 80) */{\n              t += (b ^ c ^ d) - 0x359d3e2a;\n            }\n\n          e = d;\n          d = c;\n          c = b << 30 | b >>> 2;\n          b = a;\n          a = t;\n        }\n\n        // Intermediate hash value\n        H[0] = H[0] + a | 0;\n        H[1] = H[1] + b | 0;\n        H[2] = H[2] + c | 0;\n        H[3] = H[3] + d | 0;\n        H[4] = H[4] + e | 0;\n      },\n\n      _doFinalize: function _doFinalize() {\n        // Shortcuts\n        var data = this._data;\n        var dataWords = data.words;\n\n        var nBitsTotal = this._nDataBytes * 8;\n        var nBitsLeft = data.sigBytes * 8;\n\n        // Add padding\n        dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;\n        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;\n        data.sigBytes = dataWords.length * 4;\n\n        // Hash final blocks\n        this._process();\n\n        // Return final computed hash\n        return this._hash;\n      },\n\n      clone: function clone() {\n        var clone = Hasher.clone.call(this);\n        clone._hash = this._hash.clone();\n\n        return clone;\n      } });\n\n\n    /**\n             * Shortcut function to the hasher's object interface.\n             *\n             * @param {WordArray|string} message The message to hash.\n             *\n             * @return {WordArray} The hash.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var hash = CryptoJS.SHA1('message');\n             *     var hash = CryptoJS.SHA1(wordArray);\n             */\n    C.SHA1 = Hasher._createHelper(SHA1);\n\n    /**\n                                          * Shortcut function to the HMAC's object interface.\n                                          *\n                                          * @param {WordArray|string} message The message to hash.\n                                          * @param {WordArray|string} key The secret key.\n                                          *\n                                          * @return {WordArray} The HMAC.\n                                          *\n                                          * @static\n                                          *\n                                          * @example\n                                          *\n                                          *     var hmac = CryptoJS.HmacSHA1(message, key);\n                                          */\n    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);\n  })();\n\n\n  (function (Math) {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var Hasher = C_lib.Hasher;\n    var C_algo = C.algo;\n\n    // Initialization and round constants tables\n    var H = [];\n    var K = [];\n\n    // Compute constants\n    (function () {\n      function isPrime(n) {\n        var sqrtN = Math.sqrt(n);\n        for (var factor = 2; factor <= sqrtN; factor++) {\n          if (!(n % factor)) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n      function getFractionalBits(n) {\n        return (n - (n | 0)) * 0x100000000 | 0;\n      }\n\n      var n = 2;\n      var nPrime = 0;\n      while (nPrime < 64) {\n        if (isPrime(n)) {\n          if (nPrime < 8) {\n            H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));\n          }\n          K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));\n\n          nPrime++;\n        }\n\n        n++;\n      }\n    })();\n\n    // Reusable object\n    var W = [];\n\n    /**\n                 * SHA-256 hash algorithm.\n                 */\n    var SHA256 = C_algo.SHA256 = Hasher.extend({\n      _doReset: function _doReset() {\n        this._hash = new WordArray.init(H.slice(0));\n      },\n\n      _doProcessBlock: function _doProcessBlock(M, offset) {\n        // Shortcut\n        var H = this._hash.words;\n\n        // Working variables\n        var a = H[0];\n        var b = H[1];\n        var c = H[2];\n        var d = H[3];\n        var e = H[4];\n        var f = H[5];\n        var g = H[6];\n        var h = H[7];\n\n        // Computation\n        for (var i = 0; i < 64; i++) {\n          if (i < 16) {\n            W[i] = M[offset + i] | 0;\n          } else {\n            var gamma0x = W[i - 15];\n            var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (\n            gamma0x << 14 | gamma0x >>> 18) ^\n            gamma0x >>> 3;\n\n            var gamma1x = W[i - 2];\n            var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (\n            gamma1x << 13 | gamma1x >>> 19) ^\n            gamma1x >>> 10;\n\n            W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n          }\n\n          var ch = e & f ^ ~e & g;\n          var maj = a & b ^ a & c ^ b & c;\n\n          var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);\n          var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);\n\n          var t1 = h + sigma1 + ch + K[i] + W[i];\n          var t2 = sigma0 + maj;\n\n          h = g;\n          g = f;\n          f = e;\n          e = d + t1 | 0;\n          d = c;\n          c = b;\n          b = a;\n          a = t1 + t2 | 0;\n        }\n\n        // Intermediate hash value\n        H[0] = H[0] + a | 0;\n        H[1] = H[1] + b | 0;\n        H[2] = H[2] + c | 0;\n        H[3] = H[3] + d | 0;\n        H[4] = H[4] + e | 0;\n        H[5] = H[5] + f | 0;\n        H[6] = H[6] + g | 0;\n        H[7] = H[7] + h | 0;\n      },\n\n      _doFinalize: function _doFinalize() {\n        // Shortcuts\n        var data = this._data;\n        var dataWords = data.words;\n\n        var nBitsTotal = this._nDataBytes * 8;\n        var nBitsLeft = data.sigBytes * 8;\n\n        // Add padding\n        dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;\n        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;\n        data.sigBytes = dataWords.length * 4;\n\n        // Hash final blocks\n        this._process();\n\n        // Return final computed hash\n        return this._hash;\n      },\n\n      clone: function clone() {\n        var clone = Hasher.clone.call(this);\n        clone._hash = this._hash.clone();\n\n        return clone;\n      } });\n\n\n    /**\n             * Shortcut function to the hasher's object interface.\n             *\n             * @param {WordArray|string} message The message to hash.\n             *\n             * @return {WordArray} The hash.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var hash = CryptoJS.SHA256('message');\n             *     var hash = CryptoJS.SHA256(wordArray);\n             */\n    C.SHA256 = Hasher._createHelper(SHA256);\n\n    /**\n                                              * Shortcut function to the HMAC's object interface.\n                                              *\n                                              * @param {WordArray|string} message The message to hash.\n                                              * @param {WordArray|string} key The secret key.\n                                              *\n                                              * @return {WordArray} The HMAC.\n                                              *\n                                              * @static\n                                              *\n                                              * @example\n                                              *\n                                              *     var hmac = CryptoJS.HmacSHA256(message, key);\n                                              */\n    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);\n  })(Math);\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var C_enc = C.enc;\n\n    /**\n                        * UTF-16 BE encoding strategy.\n                        */\n    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {\n      /**\n                                                   * Converts a word array to a UTF-16 BE string.\n                                                   *\n                                                   * @param {WordArray} wordArray The word array.\n                                                   *\n                                                   * @return {string} The UTF-16 BE string.\n                                                   *\n                                                   * @static\n                                                   *\n                                                   * @example\n                                                   *\n                                                   *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);\n                                                   */\n      stringify: function stringify(wordArray) {\n        // Shortcuts\n        var words = wordArray.words;\n        var sigBytes = wordArray.sigBytes;\n\n        // Convert\n        var utf16Chars = [];\n        for (var i = 0; i < sigBytes; i += 2) {\n          var codePoint = words[i >>> 2] >>> 16 - i % 4 * 8 & 0xffff;\n          utf16Chars.push(String.fromCharCode(codePoint));\n        }\n\n        return utf16Chars.join('');\n      },\n\n      /**\n          * Converts a UTF-16 BE string to a word array.\n          *\n          * @param {string} utf16Str The UTF-16 BE string.\n          *\n          * @return {WordArray} The word array.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);\n          */\n      parse: function parse(utf16Str) {\n        // Shortcut\n        var utf16StrLength = utf16Str.length;\n\n        // Convert\n        var words = [];\n        for (var i = 0; i < utf16StrLength; i++) {\n          words[i >>> 1] |= utf16Str.charCodeAt(i) << 16 - i % 2 * 16;\n        }\n\n        return WordArray.create(words, utf16StrLength * 2);\n      } };\n\n\n    /**\n            * UTF-16 LE encoding strategy.\n            */\n    C_enc.Utf16LE = {\n      /**\n                       * Converts a word array to a UTF-16 LE string.\n                       *\n                       * @param {WordArray} wordArray The word array.\n                       *\n                       * @return {string} The UTF-16 LE string.\n                       *\n                       * @static\n                       *\n                       * @example\n                       *\n                       *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);\n                       */\n      stringify: function stringify(wordArray) {\n        // Shortcuts\n        var words = wordArray.words;\n        var sigBytes = wordArray.sigBytes;\n\n        // Convert\n        var utf16Chars = [];\n        for (var i = 0; i < sigBytes; i += 2) {\n          var codePoint = swapEndian(words[i >>> 2] >>> 16 - i % 4 * 8 & 0xffff);\n          utf16Chars.push(String.fromCharCode(codePoint));\n        }\n\n        return utf16Chars.join('');\n      },\n\n      /**\n          * Converts a UTF-16 LE string to a word array.\n          *\n          * @param {string} utf16Str The UTF-16 LE string.\n          *\n          * @return {WordArray} The word array.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);\n          */\n      parse: function parse(utf16Str) {\n        // Shortcut\n        var utf16StrLength = utf16Str.length;\n\n        // Convert\n        var words = [];\n        for (var i = 0; i < utf16StrLength; i++) {\n          words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << 16 - i % 2 * 16);\n        }\n\n        return WordArray.create(words, utf16StrLength * 2);\n      } };\n\n\n    function swapEndian(word) {\n      return word << 8 & 0xff00ff00 | word >>> 8 & 0x00ff00ff;\n    }\n  })();\n\n\n  (function () {\n    // Check if typed arrays are supported\n    if (typeof ArrayBuffer != 'function') {\n      return;\n    }\n\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n\n    // Reference original init\n    var superInit = WordArray.init;\n\n    // Augment WordArray.init to handle typed arrays\n    var subInit = WordArray.init = function (typedArray) {\n      // Convert buffers to uint8\n      if (typedArray instanceof ArrayBuffer) {\n        typedArray = new Uint8Array(typedArray);\n      }\n\n      // Convert other array views to uint8\n      if (\n      typedArray instanceof Int8Array ||\n      typeof Uint8ClampedArray !== \"undefined\" && typedArray instanceof Uint8ClampedArray ||\n      typedArray instanceof Int16Array ||\n      typedArray instanceof Uint16Array ||\n      typedArray instanceof Int32Array ||\n      typedArray instanceof Uint32Array ||\n      typedArray instanceof Float32Array ||\n      typedArray instanceof Float64Array)\n      {\n        typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\n      }\n\n      // Handle Uint8Array\n      if (typedArray instanceof Uint8Array) {\n        // Shortcut\n        var typedArrayByteLength = typedArray.byteLength;\n\n        // Extract bytes\n        var words = [];\n        for (var i = 0; i < typedArrayByteLength; i++) {\n          words[i >>> 2] |= typedArray[i] << 24 - i % 4 * 8;\n        }\n\n        // Initialize this word array\n        superInit.call(this, words, typedArrayByteLength);\n      } else {\n        // Else call normal init\n        superInit.apply(this, arguments);\n      }\n    };\n\n    subInit.prototype = WordArray;\n  })();\n\n\n  /** @preserve\n        (c) 2012 by Cédric Mesnil. All rights reserved.\n        \tRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n        \t    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n            - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n        \tTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n        */\n\n\n\n\n  (function (Math) {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var Hasher = C_lib.Hasher;\n    var C_algo = C.algo;\n\n    // Constants table\n    var _zl = WordArray.create([\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n    7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n    3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n    1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n    4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13]);\n    var _zr = WordArray.create([\n    5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n    6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n    15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n    8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n    12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11]);\n    var _sl = WordArray.create([\n    11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n    7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n    11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n    11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n    9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6]);\n    var _sr = WordArray.create([\n    8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n    9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n    9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n    15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n    8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11]);\n\n    var _hl = WordArray.create([0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);\n    var _hr = WordArray.create([0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);\n\n    /**\n                                                                                               * RIPEMD160 hash algorithm.\n                                                                                               */\n    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({\n      _doReset: function _doReset() {\n        this._hash = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);\n      },\n\n      _doProcessBlock: function _doProcessBlock(M, offset) {\n\n        // Swap endian\n        for (var i = 0; i < 16; i++) {\n          // Shortcuts\n          var offset_i = offset + i;\n          var M_offset_i = M[offset_i];\n\n          // Swap\n          M[offset_i] =\n          (M_offset_i << 8 | M_offset_i >>> 24) & 0x00ff00ff |\n          (M_offset_i << 24 | M_offset_i >>> 8) & 0xff00ff00;\n\n        }\n        // Shortcut\n        var H = this._hash.words;\n        var hl = _hl.words;\n        var hr = _hr.words;\n        var zl = _zl.words;\n        var zr = _zr.words;\n        var sl = _sl.words;\n        var sr = _sr.words;\n\n        // Working variables\n        var al, bl, cl, dl, el;\n        var ar, br, cr, dr, er;\n\n        ar = al = H[0];\n        br = bl = H[1];\n        cr = cl = H[2];\n        dr = dl = H[3];\n        er = el = H[4];\n        // Computation\n        var t;\n        for (var i = 0; i < 80; i += 1) {\n          t = al + M[offset + zl[i]] | 0;\n          if (i < 16) {\n            t += f1(bl, cl, dl) + hl[0];\n          } else if (i < 32) {\n            t += f2(bl, cl, dl) + hl[1];\n          } else if (i < 48) {\n            t += f3(bl, cl, dl) + hl[2];\n          } else if (i < 64) {\n            t += f4(bl, cl, dl) + hl[3];\n          } else {// if (i<80) {\n            t += f5(bl, cl, dl) + hl[4];\n          }\n          t = t | 0;\n          t = rotl(t, sl[i]);\n          t = t + el | 0;\n          al = el;\n          el = dl;\n          dl = rotl(cl, 10);\n          cl = bl;\n          bl = t;\n\n          t = ar + M[offset + zr[i]] | 0;\n          if (i < 16) {\n            t += f5(br, cr, dr) + hr[0];\n          } else if (i < 32) {\n            t += f4(br, cr, dr) + hr[1];\n          } else if (i < 48) {\n            t += f3(br, cr, dr) + hr[2];\n          } else if (i < 64) {\n            t += f2(br, cr, dr) + hr[3];\n          } else {// if (i<80) {\n            t += f1(br, cr, dr) + hr[4];\n          }\n          t = t | 0;\n          t = rotl(t, sr[i]);\n          t = t + er | 0;\n          ar = er;\n          er = dr;\n          dr = rotl(cr, 10);\n          cr = br;\n          br = t;\n        }\n        // Intermediate hash value\n        t = H[1] + cl + dr | 0;\n        H[1] = H[2] + dl + er | 0;\n        H[2] = H[3] + el + ar | 0;\n        H[3] = H[4] + al + br | 0;\n        H[4] = H[0] + bl + cr | 0;\n        H[0] = t;\n      },\n\n      _doFinalize: function _doFinalize() {\n        // Shortcuts\n        var data = this._data;\n        var dataWords = data.words;\n\n        var nBitsTotal = this._nDataBytes * 8;\n        var nBitsLeft = data.sigBytes * 8;\n\n        // Add padding\n        dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;\n        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] =\n        (nBitsTotal << 8 | nBitsTotal >>> 24) & 0x00ff00ff |\n        (nBitsTotal << 24 | nBitsTotal >>> 8) & 0xff00ff00;\n\n        data.sigBytes = (dataWords.length + 1) * 4;\n\n        // Hash final blocks\n        this._process();\n\n        // Shortcuts\n        var hash = this._hash;\n        var H = hash.words;\n\n        // Swap endian\n        for (var i = 0; i < 5; i++) {\n          // Shortcut\n          var H_i = H[i];\n\n          // Swap\n          H[i] = (H_i << 8 | H_i >>> 24) & 0x00ff00ff |\n          (H_i << 24 | H_i >>> 8) & 0xff00ff00;\n        }\n\n        // Return final computed hash\n        return hash;\n      },\n\n      clone: function clone() {\n        var clone = Hasher.clone.call(this);\n        clone._hash = this._hash.clone();\n\n        return clone;\n      } });\n\n\n\n    function f1(x, y, z) {\n      return x ^ y ^ z;\n\n    }\n\n    function f2(x, y, z) {\n      return x & y | ~x & z;\n    }\n\n    function f3(x, y, z) {\n      return (x | ~y) ^ z;\n    }\n\n    function f4(x, y, z) {\n      return x & z | y & ~z;\n    }\n\n    function f5(x, y, z) {\n      return x ^ (y | ~z);\n\n    }\n\n    function rotl(x, n) {\n      return x << n | x >>> 32 - n;\n    }\n\n\n    /**\n       * Shortcut function to the hasher's object interface.\n       *\n       * @param {WordArray|string} message The message to hash.\n       *\n       * @return {WordArray} The hash.\n       *\n       * @static\n       *\n       * @example\n       *\n       *     var hash = CryptoJS.RIPEMD160('message');\n       *     var hash = CryptoJS.RIPEMD160(wordArray);\n       */\n    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);\n\n    /**\n                                                    * Shortcut function to the HMAC's object interface.\n                                                    *\n                                                    * @param {WordArray|string} message The message to hash.\n                                                    * @param {WordArray|string} key The secret key.\n                                                    *\n                                                    * @return {WordArray} The HMAC.\n                                                    *\n                                                    * @static\n                                                    *\n                                                    * @example\n                                                    *\n                                                    *     var hmac = CryptoJS.HmacRIPEMD160(message, key);\n                                                    */\n    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);\n  })(Math);\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var C_enc = C.enc;\n    var Utf8 = C_enc.Utf8;\n    var C_algo = C.algo;\n\n    /**\n                          * HMAC algorithm.\n                          */\n    var HMAC = C_algo.HMAC = Base.extend({\n      /**\n                                            * Initializes a newly created HMAC.\n                                            *\n                                            * @param {Hasher} hasher The hash algorithm to use.\n                                            * @param {WordArray|string} key The secret key.\n                                            *\n                                            * @example\n                                            *\n                                            *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n                                            */\n      init: function init(hasher, key) {\n        // Init hasher\n        hasher = this._hasher = new hasher.init();\n\n        // Convert string to WordArray, else assume WordArray already\n        if (typeof key == 'string') {\n          key = Utf8.parse(key);\n        }\n\n        // Shortcuts\n        var hasherBlockSize = hasher.blockSize;\n        var hasherBlockSizeBytes = hasherBlockSize * 4;\n\n        // Allow arbitrary length keys\n        if (key.sigBytes > hasherBlockSizeBytes) {\n          key = hasher.finalize(key);\n        }\n\n        // Clamp excess bits\n        key.clamp();\n\n        // Clone key for inner and outer pads\n        var oKey = this._oKey = key.clone();\n        var iKey = this._iKey = key.clone();\n\n        // Shortcuts\n        var oKeyWords = oKey.words;\n        var iKeyWords = iKey.words;\n\n        // XOR keys with pad constants\n        for (var i = 0; i < hasherBlockSize; i++) {\n          oKeyWords[i] ^= 0x5c5c5c5c;\n          iKeyWords[i] ^= 0x36363636;\n        }\n        oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\n\n        // Set initial values\n        this.reset();\n      },\n\n      /**\n          * Resets this HMAC to its initial state.\n          *\n          * @example\n          *\n          *     hmacHasher.reset();\n          */\n      reset: function reset() {\n        // Shortcut\n        var hasher = this._hasher;\n\n        // Reset\n        hasher.reset();\n        hasher.update(this._iKey);\n      },\n\n      /**\n          * Updates this HMAC with a message.\n          *\n          * @param {WordArray|string} messageUpdate The message to append.\n          *\n          * @return {HMAC} This HMAC instance.\n          *\n          * @example\n          *\n          *     hmacHasher.update('message');\n          *     hmacHasher.update(wordArray);\n          */\n      update: function update(messageUpdate) {\n        this._hasher.update(messageUpdate);\n\n        // Chainable\n        return this;\n      },\n\n      /**\n          * Finalizes the HMAC computation.\n          * Note that the finalize operation is effectively a destructive, read-once operation.\n          *\n          * @param {WordArray|string} messageUpdate (Optional) A final message update.\n          *\n          * @return {WordArray} The HMAC.\n          *\n          * @example\n          *\n          *     var hmac = hmacHasher.finalize();\n          *     var hmac = hmacHasher.finalize('message');\n          *     var hmac = hmacHasher.finalize(wordArray);\n          */\n      finalize: function finalize(messageUpdate) {\n        // Shortcut\n        var hasher = this._hasher;\n\n        // Compute HMAC\n        var innerHash = hasher.finalize(messageUpdate);\n        hasher.reset();\n        var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n\n        return hmac;\n      } });\n\n  })();\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var WordArray = C_lib.WordArray;\n    var C_algo = C.algo;\n    var SHA1 = C_algo.SHA1;\n    var HMAC = C_algo.HMAC;\n\n    /**\n                             * Password-Based Key Derivation Function 2 algorithm.\n                             */\n    var PBKDF2 = C_algo.PBKDF2 = Base.extend({\n      /**\n                                                * Configuration options.\n                                                *\n                                                * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n                                                * @property {Hasher} hasher The hasher to use. Default: SHA1\n                                                * @property {number} iterations The number of iterations to perform. Default: 1\n                                                */\n      cfg: Base.extend({\n        keySize: 128 / 32,\n        hasher: SHA1,\n        iterations: 1 }),\n\n\n      /**\n                           * Initializes a newly created key derivation function.\n                           *\n                           * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n                           *\n                           * @example\n                           *\n                           *     var kdf = CryptoJS.algo.PBKDF2.create();\n                           *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });\n                           *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });\n                           */\n      init: function init(cfg) {\n        this.cfg = this.cfg.extend(cfg);\n      },\n\n      /**\n          * Computes the Password-Based Key Derivation Function 2.\n          *\n          * @param {WordArray|string} password The password.\n          * @param {WordArray|string} salt A salt.\n          *\n          * @return {WordArray} The derived key.\n          *\n          * @example\n          *\n          *     var key = kdf.compute(password, salt);\n          */\n      compute: function compute(password, salt) {\n        // Shortcut\n        var cfg = this.cfg;\n\n        // Init HMAC\n        var hmac = HMAC.create(cfg.hasher, password);\n\n        // Initial values\n        var derivedKey = WordArray.create();\n        var blockIndex = WordArray.create([0x00000001]);\n\n        // Shortcuts\n        var derivedKeyWords = derivedKey.words;\n        var blockIndexWords = blockIndex.words;\n        var keySize = cfg.keySize;\n        var iterations = cfg.iterations;\n\n        // Generate key\n        while (derivedKeyWords.length < keySize) {\n          var block = hmac.update(salt).finalize(blockIndex);\n          hmac.reset();\n\n          // Shortcuts\n          var blockWords = block.words;\n          var blockWordsLength = blockWords.length;\n\n          // Iterations\n          var intermediate = block;\n          for (var i = 1; i < iterations; i++) {\n            intermediate = hmac.finalize(intermediate);\n            hmac.reset();\n\n            // Shortcut\n            var intermediateWords = intermediate.words;\n\n            // XOR intermediate with block\n            for (var j = 0; j < blockWordsLength; j++) {\n              blockWords[j] ^= intermediateWords[j];\n            }\n          }\n\n          derivedKey.concat(block);\n          blockIndexWords[0]++;\n        }\n        derivedKey.sigBytes = keySize * 4;\n\n        return derivedKey;\n      } });\n\n\n    /**\n             * Computes the Password-Based Key Derivation Function 2.\n             *\n             * @param {WordArray|string} password The password.\n             * @param {WordArray|string} salt A salt.\n             * @param {Object} cfg (Optional) The configuration options to use for this computation.\n             *\n             * @return {WordArray} The derived key.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var key = CryptoJS.PBKDF2(password, salt);\n             *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });\n             *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });\n             */\n    C.PBKDF2 = function (password, salt, cfg) {\n      return PBKDF2.create(cfg).compute(password, salt);\n    };\n  })();\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var WordArray = C_lib.WordArray;\n    var C_algo = C.algo;\n    var MD5 = C_algo.MD5;\n\n    /**\n                           * This key derivation function is meant to conform with EVP_BytesToKey.\n                           * www.openssl.org/docs/crypto/EVP_BytesToKey.html\n                           */\n    var EvpKDF = C_algo.EvpKDF = Base.extend({\n      /**\n                                                * Configuration options.\n                                                *\n                                                * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n                                                * @property {Hasher} hasher The hash algorithm to use. Default: MD5\n                                                * @property {number} iterations The number of iterations to perform. Default: 1\n                                                */\n      cfg: Base.extend({\n        keySize: 128 / 32,\n        hasher: MD5,\n        iterations: 1 }),\n\n\n      /**\n                           * Initializes a newly created key derivation function.\n                           *\n                           * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n                           *\n                           * @example\n                           *\n                           *     var kdf = CryptoJS.algo.EvpKDF.create();\n                           *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });\n                           *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });\n                           */\n      init: function init(cfg) {\n        this.cfg = this.cfg.extend(cfg);\n      },\n\n      /**\n          * Derives a key from a password.\n          *\n          * @param {WordArray|string} password The password.\n          * @param {WordArray|string} salt A salt.\n          *\n          * @return {WordArray} The derived key.\n          *\n          * @example\n          *\n          *     var key = kdf.compute(password, salt);\n          */\n      compute: function compute(password, salt) {\n        // Shortcut\n        var cfg = this.cfg;\n\n        // Init hasher\n        var hasher = cfg.hasher.create();\n\n        // Initial values\n        var derivedKey = WordArray.create();\n\n        // Shortcuts\n        var derivedKeyWords = derivedKey.words;\n        var keySize = cfg.keySize;\n        var iterations = cfg.iterations;\n\n        // Generate key\n        while (derivedKeyWords.length < keySize) {\n          if (block) {\n            hasher.update(block);\n          }\n          var block = hasher.update(password).finalize(salt);\n          hasher.reset();\n\n          // Iterations\n          for (var i = 1; i < iterations; i++) {\n            block = hasher.finalize(block);\n            hasher.reset();\n          }\n\n          derivedKey.concat(block);\n        }\n        derivedKey.sigBytes = keySize * 4;\n\n        return derivedKey;\n      } });\n\n\n    /**\n             * Derives a key from a password.\n             *\n             * @param {WordArray|string} password The password.\n             * @param {WordArray|string} salt A salt.\n             * @param {Object} cfg (Optional) The configuration options to use for this computation.\n             *\n             * @return {WordArray} The derived key.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var key = CryptoJS.EvpKDF(password, salt);\n             *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });\n             *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });\n             */\n    C.EvpKDF = function (password, salt, cfg) {\n      return EvpKDF.create(cfg).compute(password, salt);\n    };\n  })();\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var C_algo = C.algo;\n    var SHA256 = C_algo.SHA256;\n\n    /**\n                                 * SHA-224 hash algorithm.\n                                 */\n    var SHA224 = C_algo.SHA224 = SHA256.extend({\n      _doReset: function _doReset() {\n        this._hash = new WordArray.init([\n        0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n        0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4]);\n\n      },\n\n      _doFinalize: function _doFinalize() {\n        var hash = SHA256._doFinalize.call(this);\n\n        hash.sigBytes -= 4;\n\n        return hash;\n      } });\n\n\n    /**\n             * Shortcut function to the hasher's object interface.\n             *\n             * @param {WordArray|string} message The message to hash.\n             *\n             * @return {WordArray} The hash.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var hash = CryptoJS.SHA224('message');\n             *     var hash = CryptoJS.SHA224(wordArray);\n             */\n    C.SHA224 = SHA256._createHelper(SHA224);\n\n    /**\n                                              * Shortcut function to the HMAC's object interface.\n                                              *\n                                              * @param {WordArray|string} message The message to hash.\n                                              * @param {WordArray|string} key The secret key.\n                                              *\n                                              * @return {WordArray} The HMAC.\n                                              *\n                                              * @static\n                                              *\n                                              * @example\n                                              *\n                                              *     var hmac = CryptoJS.HmacSHA224(message, key);\n                                              */\n    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);\n  })();\n\n\n  (function (undefined) {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var X32WordArray = C_lib.WordArray;\n\n    /**\n                                         * x64 namespace.\n                                         */\n    var C_x64 = C.x64 = {};\n\n    /**\n                             * A 64-bit word.\n                             */\n    var X64Word = C_x64.Word = Base.extend({\n      /**\n                                              * Initializes a newly created 64-bit word.\n                                              *\n                                              * @param {number} high The high 32 bits.\n                                              * @param {number} low The low 32 bits.\n                                              *\n                                              * @example\n                                              *\n                                              *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);\n                                              */\n      init: function init(high, low) {\n        this.high = high;\n        this.low = low;\n      }\n\n      /**\n         * Bitwise NOTs this word.\n         *\n         * @return {X64Word} A new x64-Word object after negating.\n         *\n         * @example\n         *\n         *     var negated = x64Word.not();\n         */\n      // not: function () {\n      // var high = ~this.high;\n      // var low = ~this.low;\n\n      // return X64Word.create(high, low);\n      // },\n\n      /**\n       * Bitwise ANDs this word with the passed word.\n       *\n       * @param {X64Word} word The x64-Word to AND with this word.\n       *\n       * @return {X64Word} A new x64-Word object after ANDing.\n       *\n       * @example\n       *\n       *     var anded = x64Word.and(anotherX64Word);\n       */\n      // and: function (word) {\n      // var high = this.high & word.high;\n      // var low = this.low & word.low;\n\n      // return X64Word.create(high, low);\n      // },\n\n      /**\n       * Bitwise ORs this word with the passed word.\n       *\n       * @param {X64Word} word The x64-Word to OR with this word.\n       *\n       * @return {X64Word} A new x64-Word object after ORing.\n       *\n       * @example\n       *\n       *     var ored = x64Word.or(anotherX64Word);\n       */\n      // or: function (word) {\n      // var high = this.high | word.high;\n      // var low = this.low | word.low;\n\n      // return X64Word.create(high, low);\n      // },\n\n      /**\n       * Bitwise XORs this word with the passed word.\n       *\n       * @param {X64Word} word The x64-Word to XOR with this word.\n       *\n       * @return {X64Word} A new x64-Word object after XORing.\n       *\n       * @example\n       *\n       *     var xored = x64Word.xor(anotherX64Word);\n       */\n      // xor: function (word) {\n      // var high = this.high ^ word.high;\n      // var low = this.low ^ word.low;\n\n      // return X64Word.create(high, low);\n      // },\n\n      /**\n       * Shifts this word n bits to the left.\n       *\n       * @param {number} n The number of bits to shift.\n       *\n       * @return {X64Word} A new x64-Word object after shifting.\n       *\n       * @example\n       *\n       *     var shifted = x64Word.shiftL(25);\n       */\n      // shiftL: function (n) {\n      // if (n < 32) {\n      // var high = (this.high << n) | (this.low >>> (32 - n));\n      // var low = this.low << n;\n      // } else {\n      // var high = this.low << (n - 32);\n      // var low = 0;\n      // }\n\n      // return X64Word.create(high, low);\n      // },\n\n      /**\n       * Shifts this word n bits to the right.\n       *\n       * @param {number} n The number of bits to shift.\n       *\n       * @return {X64Word} A new x64-Word object after shifting.\n       *\n       * @example\n       *\n       *     var shifted = x64Word.shiftR(7);\n       */\n      // shiftR: function (n) {\n      // if (n < 32) {\n      // var low = (this.low >>> n) | (this.high << (32 - n));\n      // var high = this.high >>> n;\n      // } else {\n      // var low = this.high >>> (n - 32);\n      // var high = 0;\n      // }\n\n      // return X64Word.create(high, low);\n      // },\n\n      /**\n       * Rotates this word n bits to the left.\n       *\n       * @param {number} n The number of bits to rotate.\n       *\n       * @return {X64Word} A new x64-Word object after rotating.\n       *\n       * @example\n       *\n       *     var rotated = x64Word.rotL(25);\n       */\n      // rotL: function (n) {\n      // return this.shiftL(n).or(this.shiftR(64 - n));\n      // },\n\n      /**\n       * Rotates this word n bits to the right.\n       *\n       * @param {number} n The number of bits to rotate.\n       *\n       * @return {X64Word} A new x64-Word object after rotating.\n       *\n       * @example\n       *\n       *     var rotated = x64Word.rotR(7);\n       */\n      // rotR: function (n) {\n      // return this.shiftR(n).or(this.shiftL(64 - n));\n      // },\n\n      /**\n       * Adds this word with the passed word.\n       *\n       * @param {X64Word} word The x64-Word to add with this word.\n       *\n       * @return {X64Word} A new x64-Word object after adding.\n       *\n       * @example\n       *\n       *     var added = x64Word.add(anotherX64Word);\n       */\n      // add: function (word) {\n      // var low = (this.low + word.low) | 0;\n      // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;\n      // var high = (this.high + word.high + carry) | 0;\n\n      // return X64Word.create(high, low);\n      // }\n    });\n\n    /**\n         * An array of 64-bit words.\n         *\n         * @property {Array} words The array of CryptoJS.x64.Word objects.\n         * @property {number} sigBytes The number of significant bytes in this word array.\n         */\n    var X64WordArray = C_x64.WordArray = Base.extend({\n      /**\n                                                        * Initializes a newly created word array.\n                                                        *\n                                                        * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.\n                                                        * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n                                                        *\n                                                        * @example\n                                                        *\n                                                        *     var wordArray = CryptoJS.x64.WordArray.create();\n                                                        *\n                                                        *     var wordArray = CryptoJS.x64.WordArray.create([\n                                                        *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n                                                        *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n                                                        *     ]);\n                                                        *\n                                                        *     var wordArray = CryptoJS.x64.WordArray.create([\n                                                        *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n                                                        *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n                                                        *     ], 10);\n                                                        */\n      init: function init(words, sigBytes) {\n        words = this.words = words || [];\n\n        if (sigBytes != undefined) {\n          this.sigBytes = sigBytes;\n        } else {\n          this.sigBytes = words.length * 8;\n        }\n      },\n\n      /**\n          * Converts this 64-bit word array to a 32-bit word array.\n          *\n          * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.\n          *\n          * @example\n          *\n          *     var x32WordArray = x64WordArray.toX32();\n          */\n      toX32: function toX32() {\n        // Shortcuts\n        var x64Words = this.words;\n        var x64WordsLength = x64Words.length;\n\n        // Convert\n        var x32Words = [];\n        for (var i = 0; i < x64WordsLength; i++) {\n          var x64Word = x64Words[i];\n          x32Words.push(x64Word.high);\n          x32Words.push(x64Word.low);\n        }\n\n        return X32WordArray.create(x32Words, this.sigBytes);\n      },\n\n      /**\n          * Creates a copy of this word array.\n          *\n          * @return {X64WordArray} The clone.\n          *\n          * @example\n          *\n          *     var clone = x64WordArray.clone();\n          */\n      clone: function clone() {\n        var clone = Base.clone.call(this);\n\n        // Clone \"words\" array\n        var words = clone.words = this.words.slice(0);\n\n        // Clone each X64Word object\n        var wordsLength = words.length;\n        for (var i = 0; i < wordsLength; i++) {\n          words[i] = words[i].clone();\n        }\n\n        return clone;\n      } });\n\n  })();\n\n\n  (function (Math) {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var Hasher = C_lib.Hasher;\n    var C_x64 = C.x64;\n    var X64Word = C_x64.Word;\n    var C_algo = C.algo;\n\n    // Constants tables\n    var RHO_OFFSETS = [];\n    var PI_INDEXES = [];\n    var ROUND_CONSTANTS = [];\n\n    // Compute Constants\n    (function () {\n      // Compute rho offset constants\n      var x = 1,y = 0;\n      for (var t = 0; t < 24; t++) {\n        RHO_OFFSETS[x + 5 * y] = (t + 1) * (t + 2) / 2 % 64;\n\n        var newX = y % 5;\n        var newY = (2 * x + 3 * y) % 5;\n        x = newX;\n        y = newY;\n      }\n\n      // Compute pi index constants\n      for (var x = 0; x < 5; x++) {\n        for (var y = 0; y < 5; y++) {\n          PI_INDEXES[x + 5 * y] = y + (2 * x + 3 * y) % 5 * 5;\n        }\n      }\n\n      // Compute round constants\n      var LFSR = 0x01;\n      for (var i = 0; i < 24; i++) {\n        var roundConstantMsw = 0;\n        var roundConstantLsw = 0;\n\n        for (var j = 0; j < 7; j++) {\n          if (LFSR & 0x01) {\n            var bitPosition = (1 << j) - 1;\n            if (bitPosition < 32) {\n              roundConstantLsw ^= 1 << bitPosition;\n            } else /* if (bitPosition >= 32) */{\n                roundConstantMsw ^= 1 << bitPosition - 32;\n              }\n          }\n\n          // Compute next LFSR\n          if (LFSR & 0x80) {\n            // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1\n            LFSR = LFSR << 1 ^ 0x71;\n          } else {\n            LFSR <<= 1;\n          }\n        }\n\n        ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);\n      }\n    })();\n\n    // Reusable objects for temporary values\n    var T = [];\n    (function () {\n      for (var i = 0; i < 25; i++) {\n        T[i] = X64Word.create();\n      }\n    })();\n\n    /**\n           * SHA-3 hash algorithm.\n           */\n    var SHA3 = C_algo.SHA3 = Hasher.extend({\n      /**\n                                              * Configuration options.\n                                              *\n                                              * @property {number} outputLength\n                                              *   The desired number of bits in the output hash.\n                                              *   Only values permitted are: 224, 256, 384, 512.\n                                              *   Default: 512\n                                              */\n      cfg: Hasher.cfg.extend({\n        outputLength: 512 }),\n\n\n      _doReset: function _doReset() {\n        var state = this._state = [];\n        for (var i = 0; i < 25; i++) {\n          state[i] = new X64Word.init();\n        }\n\n        this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;\n      },\n\n      _doProcessBlock: function _doProcessBlock(M, offset) {\n        // Shortcuts\n        var state = this._state;\n        var nBlockSizeLanes = this.blockSize / 2;\n\n        // Absorb\n        for (var i = 0; i < nBlockSizeLanes; i++) {\n          // Shortcuts\n          var M2i = M[offset + 2 * i];\n          var M2i1 = M[offset + 2 * i + 1];\n\n          // Swap endian\n          M2i =\n          (M2i << 8 | M2i >>> 24) & 0x00ff00ff |\n          (M2i << 24 | M2i >>> 8) & 0xff00ff00;\n\n          M2i1 =\n          (M2i1 << 8 | M2i1 >>> 24) & 0x00ff00ff |\n          (M2i1 << 24 | M2i1 >>> 8) & 0xff00ff00;\n\n\n          // Absorb message into state\n          var lane = state[i];\n          lane.high ^= M2i1;\n          lane.low ^= M2i;\n        }\n\n        // Rounds\n        for (var round = 0; round < 24; round++) {\n          // Theta\n          for (var x = 0; x < 5; x++) {\n            // Mix column lanes\n            var tMsw = 0,tLsw = 0;\n            for (var y = 0; y < 5; y++) {\n              var lane = state[x + 5 * y];\n              tMsw ^= lane.high;\n              tLsw ^= lane.low;\n            }\n\n            // Temporary values\n            var Tx = T[x];\n            Tx.high = tMsw;\n            Tx.low = tLsw;\n          }\n          for (var x = 0; x < 5; x++) {\n            // Shortcuts\n            var Tx4 = T[(x + 4) % 5];\n            var Tx1 = T[(x + 1) % 5];\n            var Tx1Msw = Tx1.high;\n            var Tx1Lsw = Tx1.low;\n\n            // Mix surrounding columns\n            var tMsw = Tx4.high ^ (Tx1Msw << 1 | Tx1Lsw >>> 31);\n            var tLsw = Tx4.low ^ (Tx1Lsw << 1 | Tx1Msw >>> 31);\n            for (var y = 0; y < 5; y++) {\n              var lane = state[x + 5 * y];\n              lane.high ^= tMsw;\n              lane.low ^= tLsw;\n            }\n          }\n\n          // Rho Pi\n          for (var laneIndex = 1; laneIndex < 25; laneIndex++) {\n            // Shortcuts\n            var lane = state[laneIndex];\n            var laneMsw = lane.high;\n            var laneLsw = lane.low;\n            var rhoOffset = RHO_OFFSETS[laneIndex];\n\n            // Rotate lanes\n            if (rhoOffset < 32) {\n              var tMsw = laneMsw << rhoOffset | laneLsw >>> 32 - rhoOffset;\n              var tLsw = laneLsw << rhoOffset | laneMsw >>> 32 - rhoOffset;\n            } else /* if (rhoOffset >= 32) */{\n                var tMsw = laneLsw << rhoOffset - 32 | laneMsw >>> 64 - rhoOffset;\n                var tLsw = laneMsw << rhoOffset - 32 | laneLsw >>> 64 - rhoOffset;\n              }\n\n            // Transpose lanes\n            var TPiLane = T[PI_INDEXES[laneIndex]];\n            TPiLane.high = tMsw;\n            TPiLane.low = tLsw;\n          }\n\n          // Rho pi at x = y = 0\n          var T0 = T[0];\n          var state0 = state[0];\n          T0.high = state0.high;\n          T0.low = state0.low;\n\n          // Chi\n          for (var x = 0; x < 5; x++) {\n            for (var y = 0; y < 5; y++) {\n              // Shortcuts\n              var laneIndex = x + 5 * y;\n              var lane = state[laneIndex];\n              var TLane = T[laneIndex];\n              var Tx1Lane = T[(x + 1) % 5 + 5 * y];\n              var Tx2Lane = T[(x + 2) % 5 + 5 * y];\n\n              // Mix rows\n              lane.high = TLane.high ^ ~Tx1Lane.high & Tx2Lane.high;\n              lane.low = TLane.low ^ ~Tx1Lane.low & Tx2Lane.low;\n            }\n          }\n\n          // Iota\n          var lane = state[0];\n          var roundConstant = ROUND_CONSTANTS[round];\n          lane.high ^= roundConstant.high;\n          lane.low ^= roundConstant.low;;\n        }\n      },\n\n      _doFinalize: function _doFinalize() {\n        // Shortcuts\n        var data = this._data;\n        var dataWords = data.words;\n        var nBitsTotal = this._nDataBytes * 8;\n        var nBitsLeft = data.sigBytes * 8;\n        var blockSizeBits = this.blockSize * 32;\n\n        // Add padding\n        dataWords[nBitsLeft >>> 5] |= 0x1 << 24 - nBitsLeft % 32;\n        dataWords[(Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits >>> 5) - 1] |= 0x80;\n        data.sigBytes = dataWords.length * 4;\n\n        // Hash final blocks\n        this._process();\n\n        // Shortcuts\n        var state = this._state;\n        var outputLengthBytes = this.cfg.outputLength / 8;\n        var outputLengthLanes = outputLengthBytes / 8;\n\n        // Squeeze\n        var hashWords = [];\n        for (var i = 0; i < outputLengthLanes; i++) {\n          // Shortcuts\n          var lane = state[i];\n          var laneMsw = lane.high;\n          var laneLsw = lane.low;\n\n          // Swap endian\n          laneMsw =\n          (laneMsw << 8 | laneMsw >>> 24) & 0x00ff00ff |\n          (laneMsw << 24 | laneMsw >>> 8) & 0xff00ff00;\n\n          laneLsw =\n          (laneLsw << 8 | laneLsw >>> 24) & 0x00ff00ff |\n          (laneLsw << 24 | laneLsw >>> 8) & 0xff00ff00;\n\n\n          // Squeeze state to retrieve hash\n          hashWords.push(laneLsw);\n          hashWords.push(laneMsw);\n        }\n\n        // Return final computed hash\n        return new WordArray.init(hashWords, outputLengthBytes);\n      },\n\n      clone: function clone() {\n        var clone = Hasher.clone.call(this);\n\n        var state = clone._state = this._state.slice(0);\n        for (var i = 0; i < 25; i++) {\n          state[i] = state[i].clone();\n        }\n\n        return clone;\n      } });\n\n\n    /**\n             * Shortcut function to the hasher's object interface.\n             *\n             * @param {WordArray|string} message The message to hash.\n             *\n             * @return {WordArray} The hash.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var hash = CryptoJS.SHA3('message');\n             *     var hash = CryptoJS.SHA3(wordArray);\n             */\n    C.SHA3 = Hasher._createHelper(SHA3);\n\n    /**\n                                          * Shortcut function to the HMAC's object interface.\n                                          *\n                                          * @param {WordArray|string} message The message to hash.\n                                          * @param {WordArray|string} key The secret key.\n                                          *\n                                          * @return {WordArray} The HMAC.\n                                          *\n                                          * @static\n                                          *\n                                          * @example\n                                          *\n                                          *     var hmac = CryptoJS.HmacSHA3(message, key);\n                                          */\n    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);\n  })(Math);\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Hasher = C_lib.Hasher;\n    var C_x64 = C.x64;\n    var X64Word = C_x64.Word;\n    var X64WordArray = C_x64.WordArray;\n    var C_algo = C.algo;\n\n    function X64Word_create() {\n      return X64Word.create.apply(X64Word, arguments);\n    }\n\n    // Constants\n    var K = [\n    X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),\n    X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),\n    X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),\n    X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),\n    X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),\n    X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),\n    X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),\n    X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),\n    X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),\n    X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),\n    X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),\n    X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),\n    X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),\n    X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),\n    X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),\n    X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),\n    X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),\n    X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),\n    X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),\n    X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),\n    X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),\n    X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),\n    X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),\n    X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),\n    X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),\n    X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),\n    X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),\n    X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),\n    X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),\n    X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),\n    X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),\n    X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),\n    X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),\n    X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),\n    X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),\n    X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),\n    X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),\n    X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),\n    X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),\n    X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)];\n\n\n    // Reusable objects\n    var W = [];\n    (function () {\n      for (var i = 0; i < 80; i++) {\n        W[i] = X64Word_create();\n      }\n    })();\n\n    /**\n           * SHA-512 hash algorithm.\n           */\n    var SHA512 = C_algo.SHA512 = Hasher.extend({\n      _doReset: function _doReset() {\n        this._hash = new X64WordArray.init([\n        new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),\n        new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),\n        new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),\n        new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)]);\n\n      },\n\n      _doProcessBlock: function _doProcessBlock(M, offset) {\n        // Shortcuts\n        var H = this._hash.words;\n\n        var H0 = H[0];\n        var H1 = H[1];\n        var H2 = H[2];\n        var H3 = H[3];\n        var H4 = H[4];\n        var H5 = H[5];\n        var H6 = H[6];\n        var H7 = H[7];\n\n        var H0h = H0.high;\n        var H0l = H0.low;\n        var H1h = H1.high;\n        var H1l = H1.low;\n        var H2h = H2.high;\n        var H2l = H2.low;\n        var H3h = H3.high;\n        var H3l = H3.low;\n        var H4h = H4.high;\n        var H4l = H4.low;\n        var H5h = H5.high;\n        var H5l = H5.low;\n        var H6h = H6.high;\n        var H6l = H6.low;\n        var H7h = H7.high;\n        var H7l = H7.low;\n\n        // Working variables\n        var ah = H0h;\n        var al = H0l;\n        var bh = H1h;\n        var bl = H1l;\n        var ch = H2h;\n        var cl = H2l;\n        var dh = H3h;\n        var dl = H3l;\n        var eh = H4h;\n        var el = H4l;\n        var fh = H5h;\n        var fl = H5l;\n        var gh = H6h;\n        var gl = H6l;\n        var hh = H7h;\n        var hl = H7l;\n\n        // Rounds\n        for (var i = 0; i < 80; i++) {\n          // Shortcut\n          var Wi = W[i];\n\n          // Extend message\n          if (i < 16) {\n            var Wih = Wi.high = M[offset + i * 2] | 0;\n            var Wil = Wi.low = M[offset + i * 2 + 1] | 0;\n          } else {\n            // Gamma0\n            var gamma0x = W[i - 15];\n            var gamma0xh = gamma0x.high;\n            var gamma0xl = gamma0x.low;\n            var gamma0h = (gamma0xh >>> 1 | gamma0xl << 31) ^ (gamma0xh >>> 8 | gamma0xl << 24) ^ gamma0xh >>> 7;\n            var gamma0l = (gamma0xl >>> 1 | gamma0xh << 31) ^ (gamma0xl >>> 8 | gamma0xh << 24) ^ (gamma0xl >>> 7 | gamma0xh << 25);\n\n            // Gamma1\n            var gamma1x = W[i - 2];\n            var gamma1xh = gamma1x.high;\n            var gamma1xl = gamma1x.low;\n            var gamma1h = (gamma1xh >>> 19 | gamma1xl << 13) ^ (gamma1xh << 3 | gamma1xl >>> 29) ^ gamma1xh >>> 6;\n            var gamma1l = (gamma1xl >>> 19 | gamma1xh << 13) ^ (gamma1xl << 3 | gamma1xh >>> 29) ^ (gamma1xl >>> 6 | gamma1xh << 26);\n\n            // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]\n            var Wi7 = W[i - 7];\n            var Wi7h = Wi7.high;\n            var Wi7l = Wi7.low;\n\n            var Wi16 = W[i - 16];\n            var Wi16h = Wi16.high;\n            var Wi16l = Wi16.low;\n\n            var Wil = gamma0l + Wi7l;\n            var Wih = gamma0h + Wi7h + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);\n            var Wil = Wil + gamma1l;\n            var Wih = Wih + gamma1h + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);\n            var Wil = Wil + Wi16l;\n            var Wih = Wih + Wi16h + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);\n\n            Wi.high = Wih;\n            Wi.low = Wil;\n          }\n\n          var chh = eh & fh ^ ~eh & gh;\n          var chl = el & fl ^ ~el & gl;\n          var majh = ah & bh ^ ah & ch ^ bh & ch;\n          var majl = al & bl ^ al & cl ^ bl & cl;\n\n          var sigma0h = (ah >>> 28 | al << 4) ^ (ah << 30 | al >>> 2) ^ (ah << 25 | al >>> 7);\n          var sigma0l = (al >>> 28 | ah << 4) ^ (al << 30 | ah >>> 2) ^ (al << 25 | ah >>> 7);\n          var sigma1h = (eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9);\n          var sigma1l = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9);\n\n          // t1 = h + sigma1 + ch + K[i] + W[i]\n          var Ki = K[i];\n          var Kih = Ki.high;\n          var Kil = Ki.low;\n\n          var t1l = hl + sigma1l;\n          var t1h = hh + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);\n          var t1l = t1l + chl;\n          var t1h = t1h + chh + (t1l >>> 0 < chl >>> 0 ? 1 : 0);\n          var t1l = t1l + Kil;\n          var t1h = t1h + Kih + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);\n          var t1l = t1l + Wil;\n          var t1h = t1h + Wih + (t1l >>> 0 < Wil >>> 0 ? 1 : 0);\n\n          // t2 = sigma0 + maj\n          var t2l = sigma0l + majl;\n          var t2h = sigma0h + majh + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0);\n\n          // Update working variables\n          hh = gh;\n          hl = gl;\n          gh = fh;\n          gl = fl;\n          fh = eh;\n          fl = el;\n          el = dl + t1l | 0;\n          eh = dh + t1h + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;\n          dh = ch;\n          dl = cl;\n          ch = bh;\n          cl = bl;\n          bh = ah;\n          bl = al;\n          al = t1l + t2l | 0;\n          ah = t1h + t2h + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;\n        }\n\n        // Intermediate hash value\n        H0l = H0.low = H0l + al;\n        H0.high = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0);\n        H1l = H1.low = H1l + bl;\n        H1.high = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0);\n        H2l = H2.low = H2l + cl;\n        H2.high = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0);\n        H3l = H3.low = H3l + dl;\n        H3.high = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0);\n        H4l = H4.low = H4l + el;\n        H4.high = H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0);\n        H5l = H5.low = H5l + fl;\n        H5.high = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0);\n        H6l = H6.low = H6l + gl;\n        H6.high = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0);\n        H7l = H7.low = H7l + hl;\n        H7.high = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0);\n      },\n\n      _doFinalize: function _doFinalize() {\n        // Shortcuts\n        var data = this._data;\n        var dataWords = data.words;\n\n        var nBitsTotal = this._nDataBytes * 8;\n        var nBitsLeft = data.sigBytes * 8;\n\n        // Add padding\n        dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;\n        dataWords[(nBitsLeft + 128 >>> 10 << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);\n        dataWords[(nBitsLeft + 128 >>> 10 << 5) + 31] = nBitsTotal;\n        data.sigBytes = dataWords.length * 4;\n\n        // Hash final blocks\n        this._process();\n\n        // Convert hash to 32-bit word array before returning\n        var hash = this._hash.toX32();\n\n        // Return final computed hash\n        return hash;\n      },\n\n      clone: function clone() {\n        var clone = Hasher.clone.call(this);\n        clone._hash = this._hash.clone();\n\n        return clone;\n      },\n\n      blockSize: 1024 / 32 });\n\n\n    /**\n                                * Shortcut function to the hasher's object interface.\n                                *\n                                * @param {WordArray|string} message The message to hash.\n                                *\n                                * @return {WordArray} The hash.\n                                *\n                                * @static\n                                *\n                                * @example\n                                *\n                                *     var hash = CryptoJS.SHA512('message');\n                                *     var hash = CryptoJS.SHA512(wordArray);\n                                */\n    C.SHA512 = Hasher._createHelper(SHA512);\n\n    /**\n                                              * Shortcut function to the HMAC's object interface.\n                                              *\n                                              * @param {WordArray|string} message The message to hash.\n                                              * @param {WordArray|string} key The secret key.\n                                              *\n                                              * @return {WordArray} The HMAC.\n                                              *\n                                              * @static\n                                              *\n                                              * @example\n                                              *\n                                              *     var hmac = CryptoJS.HmacSHA512(message, key);\n                                              */\n    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);\n  })();\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_x64 = C.x64;\n    var X64Word = C_x64.Word;\n    var X64WordArray = C_x64.WordArray;\n    var C_algo = C.algo;\n    var SHA512 = C_algo.SHA512;\n\n    /**\n                                 * SHA-384 hash algorithm.\n                                 */\n    var SHA384 = C_algo.SHA384 = SHA512.extend({\n      _doReset: function _doReset() {\n        this._hash = new X64WordArray.init([\n        new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507),\n        new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939),\n        new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511),\n        new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)]);\n\n      },\n\n      _doFinalize: function _doFinalize() {\n        var hash = SHA512._doFinalize.call(this);\n\n        hash.sigBytes -= 16;\n\n        return hash;\n      } });\n\n\n    /**\n             * Shortcut function to the hasher's object interface.\n             *\n             * @param {WordArray|string} message The message to hash.\n             *\n             * @return {WordArray} The hash.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var hash = CryptoJS.SHA384('message');\n             *     var hash = CryptoJS.SHA384(wordArray);\n             */\n    C.SHA384 = SHA512._createHelper(SHA384);\n\n    /**\n                                              * Shortcut function to the HMAC's object interface.\n                                              *\n                                              * @param {WordArray|string} message The message to hash.\n                                              * @param {WordArray|string} key The secret key.\n                                              *\n                                              * @return {WordArray} The HMAC.\n                                              *\n                                              * @static\n                                              *\n                                              * @example\n                                              *\n                                              *     var hmac = CryptoJS.HmacSHA384(message, key);\n                                              */\n    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);\n  })();\n\n\n  /**\n         * Cipher core components.\n         */\n  CryptoJS.lib.Cipher || function (undefined) {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var WordArray = C_lib.WordArray;\n    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;\n    var C_enc = C.enc;\n    var Utf8 = C_enc.Utf8;\n    var Base64 = C_enc.Base64;\n    var C_algo = C.algo;\n    var EvpKDF = C_algo.EvpKDF;\n\n    /**\n                                 * Abstract base cipher template.\n                                 *\n                                 * @property {number} keySize This cipher's key size. Default: 4 (128 bits)\n                                 * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)\n                                 * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.\n                                 * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.\n                                 */\n    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({\n      /**\n                                                                 * Configuration options.\n                                                                 *\n                                                                 * @property {WordArray} iv The IV to use for this operation.\n                                                                 */\n      cfg: Base.extend(),\n\n      /**\n                           * Creates this cipher in encryption mode.\n                           *\n                           * @param {WordArray} key The key.\n                           * @param {Object} cfg (Optional) The configuration options to use for this operation.\n                           *\n                           * @return {Cipher} A cipher instance.\n                           *\n                           * @static\n                           *\n                           * @example\n                           *\n                           *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });\n                           */\n      createEncryptor: function createEncryptor(key, cfg) {\n        return this.create(this._ENC_XFORM_MODE, key, cfg);\n      },\n\n      /**\n          * Creates this cipher in decryption mode.\n          *\n          * @param {WordArray} key The key.\n          * @param {Object} cfg (Optional) The configuration options to use for this operation.\n          *\n          * @return {Cipher} A cipher instance.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });\n          */\n      createDecryptor: function createDecryptor(key, cfg) {\n        return this.create(this._DEC_XFORM_MODE, key, cfg);\n      },\n\n      /**\n          * Initializes a newly created cipher.\n          *\n          * @param {number} xformMode Either the encryption or decryption transormation mode constant.\n          * @param {WordArray} key The key.\n          * @param {Object} cfg (Optional) The configuration options to use for this operation.\n          *\n          * @example\n          *\n          *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });\n          */\n      init: function init(xformMode, key, cfg) {\n        // Apply config defaults\n        this.cfg = this.cfg.extend(cfg);\n\n        // Store transform mode and key\n        this._xformMode = xformMode;\n        this._key = key;\n\n        // Set initial values\n        this.reset();\n      },\n\n      /**\n          * Resets this cipher to its initial state.\n          *\n          * @example\n          *\n          *     cipher.reset();\n          */\n      reset: function reset() {\n        // Reset data buffer\n        BufferedBlockAlgorithm.reset.call(this);\n\n        // Perform concrete-cipher logic\n        this._doReset();\n      },\n\n      /**\n          * Adds data to be encrypted or decrypted.\n          *\n          * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.\n          *\n          * @return {WordArray} The data after processing.\n          *\n          * @example\n          *\n          *     var encrypted = cipher.process('data');\n          *     var encrypted = cipher.process(wordArray);\n          */\n      process: function process(dataUpdate) {\n        // Append\n        this._append(dataUpdate);\n\n        // Process available blocks\n        return this._process();\n      },\n\n      /**\n          * Finalizes the encryption or decryption process.\n          * Note that the finalize operation is effectively a destructive, read-once operation.\n          *\n          * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.\n          *\n          * @return {WordArray} The data after final processing.\n          *\n          * @example\n          *\n          *     var encrypted = cipher.finalize();\n          *     var encrypted = cipher.finalize('data');\n          *     var encrypted = cipher.finalize(wordArray);\n          */\n      finalize: function finalize(dataUpdate) {\n        // Final data update\n        if (dataUpdate) {\n          this._append(dataUpdate);\n        }\n\n        // Perform concrete-cipher logic\n        var finalProcessedData = this._doFinalize();\n\n        return finalProcessedData;\n      },\n\n      keySize: 128 / 32,\n\n      ivSize: 128 / 32,\n\n      _ENC_XFORM_MODE: 1,\n\n      _DEC_XFORM_MODE: 2,\n\n      /**\n                           * Creates shortcut functions to a cipher's object interface.\n                           *\n                           * @param {Cipher} cipher The cipher to create a helper for.\n                           *\n                           * @return {Object} An object with encrypt and decrypt shortcut functions.\n                           *\n                           * @static\n                           *\n                           * @example\n                           *\n                           *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);\n                           */\n      _createHelper: function () {\n        function selectCipherStrategy(key) {\n          if (typeof key == 'string') {\n            return PasswordBasedCipher;\n          } else {\n            return SerializableCipher;\n          }\n        }\n\n        return function (cipher) {\n          return {\n            encrypt: function encrypt(message, key, cfg) {\n              return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);\n            },\n\n            decrypt: function decrypt(ciphertext, key, cfg) {\n              return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);\n            } };\n\n        };\n      }() });\n\n\n    /**\n               * Abstract base stream cipher template.\n               *\n               * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)\n               */\n    var StreamCipher = C_lib.StreamCipher = Cipher.extend({\n      _doFinalize: function _doFinalize() {\n        // Process partial blocks\n        var finalProcessedBlocks = this._process(!!'flush');\n\n        return finalProcessedBlocks;\n      },\n\n      blockSize: 1 });\n\n\n    /**\n                        * Mode namespace.\n                        */\n    var C_mode = C.mode = {};\n\n    /**\n                               * Abstract base block cipher mode template.\n                               */\n    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({\n      /**\n                                                                 * Creates this mode for encryption.\n                                                                 *\n                                                                 * @param {Cipher} cipher A block cipher instance.\n                                                                 * @param {Array} iv The IV words.\n                                                                 *\n                                                                 * @static\n                                                                 *\n                                                                 * @example\n                                                                 *\n                                                                 *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);\n                                                                 */\n      createEncryptor: function createEncryptor(cipher, iv) {\n        return this.Encryptor.create(cipher, iv);\n      },\n\n      /**\n          * Creates this mode for decryption.\n          *\n          * @param {Cipher} cipher A block cipher instance.\n          * @param {Array} iv The IV words.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);\n          */\n      createDecryptor: function createDecryptor(cipher, iv) {\n        return this.Decryptor.create(cipher, iv);\n      },\n\n      /**\n          * Initializes a newly created mode.\n          *\n          * @param {Cipher} cipher A block cipher instance.\n          * @param {Array} iv The IV words.\n          *\n          * @example\n          *\n          *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);\n          */\n      init: function init(cipher, iv) {\n        this._cipher = cipher;\n        this._iv = iv;\n      } });\n\n\n    /**\n             * Cipher Block Chaining mode.\n             */\n    var CBC = C_mode.CBC = function () {\n      /**\n                                         * Abstract base CBC mode.\n                                         */\n      var CBC = BlockCipherMode.extend();\n\n      /**\n                                           * CBC encryptor.\n                                           */\n      CBC.Encryptor = CBC.extend({\n        /**\n                                    * Processes the data block at offset.\n                                    *\n                                    * @param {Array} words The data words to operate on.\n                                    * @param {number} offset The offset where the block starts.\n                                    *\n                                    * @example\n                                    *\n                                    *     mode.processBlock(data.words, offset);\n                                    */\n        processBlock: function processBlock(words, offset) {\n          // Shortcuts\n          var cipher = this._cipher;\n          var blockSize = cipher.blockSize;\n\n          // XOR and encrypt\n          xorBlock.call(this, words, offset, blockSize);\n          cipher.encryptBlock(words, offset);\n\n          // Remember this block to use with next block\n          this._prevBlock = words.slice(offset, offset + blockSize);\n        } });\n\n\n      /**\n               * CBC decryptor.\n               */\n      CBC.Decryptor = CBC.extend({\n        /**\n                                    * Processes the data block at offset.\n                                    *\n                                    * @param {Array} words The data words to operate on.\n                                    * @param {number} offset The offset where the block starts.\n                                    *\n                                    * @example\n                                    *\n                                    *     mode.processBlock(data.words, offset);\n                                    */\n        processBlock: function processBlock(words, offset) {\n          // Shortcuts\n          var cipher = this._cipher;\n          var blockSize = cipher.blockSize;\n\n          // Remember this block to use with next block\n          var thisBlock = words.slice(offset, offset + blockSize);\n\n          // Decrypt and XOR\n          cipher.decryptBlock(words, offset);\n          xorBlock.call(this, words, offset, blockSize);\n\n          // This block becomes the previous block\n          this._prevBlock = thisBlock;\n        } });\n\n\n      function xorBlock(words, offset, blockSize) {\n        // Shortcut\n        var iv = this._iv;\n\n        // Choose mixing block\n        if (iv) {\n          var block = iv;\n\n          // Remove IV for subsequent blocks\n          this._iv = undefined;\n        } else {\n          var block = this._prevBlock;\n        }\n\n        // XOR blocks\n        for (var i = 0; i < blockSize; i++) {\n          words[offset + i] ^= block[i];\n        }\n      }\n\n      return CBC;\n    }();\n\n    /**\n          * Padding namespace.\n          */\n    var C_pad = C.pad = {};\n\n    /**\n                             * PKCS #5/7 padding strategy.\n                             */\n    var Pkcs7 = C_pad.Pkcs7 = {\n      /**\n                                 * Pads data using the algorithm defined in PKCS #5/7.\n                                 *\n                                 * @param {WordArray} data The data to pad.\n                                 * @param {number} blockSize The multiple that the data should be padded to.\n                                 *\n                                 * @static\n                                 *\n                                 * @example\n                                 *\n                                 *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);\n                                 */\n      pad: function pad(data, blockSize) {\n        // Shortcut\n        var blockSizeBytes = blockSize * 4;\n\n        // Count padding bytes\n        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\n\n        // Create padding word\n        var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes;\n\n        // Create padding\n        var paddingWords = [];\n        for (var i = 0; i < nPaddingBytes; i += 4) {\n          paddingWords.push(paddingWord);\n        }\n        var padding = WordArray.create(paddingWords, nPaddingBytes);\n\n        // Add padding\n        data.concat(padding);\n      },\n\n      /**\n          * Unpads data that had been padded using the algorithm defined in PKCS #5/7.\n          *\n          * @param {WordArray} data The data to unpad.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     CryptoJS.pad.Pkcs7.unpad(wordArray);\n          */\n      unpad: function unpad(data) {\n        // Get number of padding bytes from last byte\n        var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff;\n\n        // Remove padding\n        data.sigBytes -= nPaddingBytes;\n      } };\n\n\n    /**\n            * Abstract base block cipher template.\n            *\n            * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)\n            */\n    var BlockCipher = C_lib.BlockCipher = Cipher.extend({\n      /**\n                                                           * Configuration options.\n                                                           *\n                                                           * @property {Mode} mode The block mode to use. Default: CBC\n                                                           * @property {Padding} padding The padding strategy to use. Default: Pkcs7\n                                                           */\n      cfg: Cipher.cfg.extend({\n        mode: CBC,\n        padding: Pkcs7 }),\n\n\n      reset: function reset() {\n        // Reset cipher\n        Cipher.reset.call(this);\n\n        // Shortcuts\n        var cfg = this.cfg;\n        var iv = cfg.iv;\n        var mode = cfg.mode;\n\n        // Reset block mode\n        if (this._xformMode == this._ENC_XFORM_MODE) {\n          var modeCreator = mode.createEncryptor;\n        } else /* if (this._xformMode == this._DEC_XFORM_MODE) */{\n            var modeCreator = mode.createDecryptor;\n            // Keep at least one block in the buffer for unpadding\n            this._minBufferSize = 1;\n          }\n\n        if (this._mode && this._mode.__creator == modeCreator) {\n          this._mode.init(this, iv && iv.words);\n        } else {\n          this._mode = modeCreator.call(mode, this, iv && iv.words);\n          this._mode.__creator = modeCreator;\n        }\n      },\n\n      _doProcessBlock: function _doProcessBlock(words, offset) {\n        this._mode.processBlock(words, offset);\n      },\n\n      _doFinalize: function _doFinalize() {\n        // Shortcut\n        var padding = this.cfg.padding;\n\n        // Finalize\n        if (this._xformMode == this._ENC_XFORM_MODE) {\n          // Pad data\n          padding.pad(this._data, this.blockSize);\n\n          // Process final blocks\n          var finalProcessedBlocks = this._process(!!'flush');\n        } else /* if (this._xformMode == this._DEC_XFORM_MODE) */{\n            // Process final blocks\n            var finalProcessedBlocks = this._process(!!'flush');\n\n            // Unpad data\n            padding.unpad(finalProcessedBlocks);\n          }\n\n        return finalProcessedBlocks;\n      },\n\n      blockSize: 128 / 32 });\n\n\n    /**\n                               * A collection of cipher parameters.\n                               *\n                               * @property {WordArray} ciphertext The raw ciphertext.\n                               * @property {WordArray} key The key to this ciphertext.\n                               * @property {WordArray} iv The IV used in the ciphering operation.\n                               * @property {WordArray} salt The salt used with a key derivation function.\n                               * @property {Cipher} algorithm The cipher algorithm.\n                               * @property {Mode} mode The block mode used in the ciphering operation.\n                               * @property {Padding} padding The padding scheme used in the ciphering operation.\n                               * @property {number} blockSize The block size of the cipher.\n                               * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.\n                               */\n    var CipherParams = C_lib.CipherParams = Base.extend({\n      /**\n                                                           * Initializes a newly created cipher params object.\n                                                           *\n                                                           * @param {Object} cipherParams An object with any of the possible cipher parameters.\n                                                           *\n                                                           * @example\n                                                           *\n                                                           *     var cipherParams = CryptoJS.lib.CipherParams.create({\n                                                           *         ciphertext: ciphertextWordArray,\n                                                           *         key: keyWordArray,\n                                                           *         iv: ivWordArray,\n                                                           *         salt: saltWordArray,\n                                                           *         algorithm: CryptoJS.algo.AES,\n                                                           *         mode: CryptoJS.mode.CBC,\n                                                           *         padding: CryptoJS.pad.PKCS7,\n                                                           *         blockSize: 4,\n                                                           *         formatter: CryptoJS.format.OpenSSL\n                                                           *     });\n                                                           */\n      init: function init(cipherParams) {\n        this.mixIn(cipherParams);\n      },\n\n      /**\n          * Converts this cipher params object to a string.\n          *\n          * @param {Format} formatter (Optional) The formatting strategy to use.\n          *\n          * @return {string} The stringified cipher params.\n          *\n          * @throws Error If neither the formatter nor the default formatter is set.\n          *\n          * @example\n          *\n          *     var string = cipherParams + '';\n          *     var string = cipherParams.toString();\n          *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);\n          */\n      toString: function toString(formatter) {\n        return (formatter || this.formatter).stringify(this);\n      } });\n\n\n    /**\n             * Format namespace.\n             */\n    var C_format = C.format = {};\n\n    /**\n                                   * OpenSSL formatting strategy.\n                                   */\n    var OpenSSLFormatter = C_format.OpenSSL = {\n      /**\n                                                 * Converts a cipher params object to an OpenSSL-compatible string.\n                                                 *\n                                                 * @param {CipherParams} cipherParams The cipher params object.\n                                                 *\n                                                 * @return {string} The OpenSSL-compatible string.\n                                                 *\n                                                 * @static\n                                                 *\n                                                 * @example\n                                                 *\n                                                 *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);\n                                                 */\n      stringify: function stringify(cipherParams) {\n        // Shortcuts\n        var ciphertext = cipherParams.ciphertext;\n        var salt = cipherParams.salt;\n\n        // Format\n        if (salt) {\n          var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);\n        } else {\n          var wordArray = ciphertext;\n        }\n\n        return wordArray.toString(Base64);\n      },\n\n      /**\n          * Converts an OpenSSL-compatible string to a cipher params object.\n          *\n          * @param {string} openSSLStr The OpenSSL-compatible string.\n          *\n          * @return {CipherParams} The cipher params object.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);\n          */\n      parse: function parse(openSSLStr) {\n        // Parse base64\n        var ciphertext = Base64.parse(openSSLStr);\n\n        // Shortcut\n        var ciphertextWords = ciphertext.words;\n\n        // Test for salt\n        if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {\n          // Extract salt\n          var salt = WordArray.create(ciphertextWords.slice(2, 4));\n\n          // Remove salt from ciphertext\n          ciphertextWords.splice(0, 4);\n          ciphertext.sigBytes -= 16;\n        }\n\n        return CipherParams.create({ ciphertext: ciphertext, salt: salt });\n      } };\n\n\n    /**\n            * A cipher wrapper that returns ciphertext as a serializable cipher params object.\n            */\n    var SerializableCipher = C_lib.SerializableCipher = Base.extend({\n      /**\n                                                                       * Configuration options.\n                                                                       *\n                                                                       * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL\n                                                                       */\n      cfg: Base.extend({\n        format: OpenSSLFormatter }),\n\n\n      /**\n                                      * Encrypts a message.\n                                      *\n                                      * @param {Cipher} cipher The cipher algorithm to use.\n                                      * @param {WordArray|string} message The message to encrypt.\n                                      * @param {WordArray} key The key.\n                                      * @param {Object} cfg (Optional) The configuration options to use for this operation.\n                                      *\n                                      * @return {CipherParams} A cipher params object.\n                                      *\n                                      * @static\n                                      *\n                                      * @example\n                                      *\n                                      *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);\n                                      *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });\n                                      *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n                                      */\n      encrypt: function encrypt(cipher, message, key, cfg) {\n        // Apply config defaults\n        cfg = this.cfg.extend(cfg);\n\n        // Encrypt\n        var encryptor = cipher.createEncryptor(key, cfg);\n        var ciphertext = encryptor.finalize(message);\n\n        // Shortcut\n        var cipherCfg = encryptor.cfg;\n\n        // Create and return serializable cipher params\n        return CipherParams.create({\n          ciphertext: ciphertext,\n          key: key,\n          iv: cipherCfg.iv,\n          algorithm: cipher,\n          mode: cipherCfg.mode,\n          padding: cipherCfg.padding,\n          blockSize: cipher.blockSize,\n          formatter: cfg.format });\n\n      },\n\n      /**\n          * Decrypts serialized ciphertext.\n          *\n          * @param {Cipher} cipher The cipher algorithm to use.\n          * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n          * @param {WordArray} key The key.\n          * @param {Object} cfg (Optional) The configuration options to use for this operation.\n          *\n          * @return {WordArray} The plaintext.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n          *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n          */\n      decrypt: function decrypt(cipher, ciphertext, key, cfg) {\n        // Apply config defaults\n        cfg = this.cfg.extend(cfg);\n\n        // Convert string to CipherParams\n        ciphertext = this._parse(ciphertext, cfg.format);\n\n        // Decrypt\n        var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);\n\n        return plaintext;\n      },\n\n      /**\n          * Converts serialized ciphertext to CipherParams,\n          * else assumed CipherParams already and returns ciphertext unchanged.\n          *\n          * @param {CipherParams|string} ciphertext The ciphertext.\n          * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.\n          *\n          * @return {CipherParams} The unserialized ciphertext.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);\n          */\n      _parse: function _parse(ciphertext, format) {\n        if (typeof ciphertext == 'string') {\n          return format.parse(ciphertext, this);\n        } else {\n          return ciphertext;\n        }\n      } });\n\n\n    /**\n             * Key derivation function namespace.\n             */\n    var C_kdf = C.kdf = {};\n\n    /**\n                             * OpenSSL key derivation function.\n                             */\n    var OpenSSLKdf = C_kdf.OpenSSL = {\n      /**\n                                        * Derives a key and IV from a password.\n                                        *\n                                        * @param {string} password The password to derive from.\n                                        * @param {number} keySize The size in words of the key to generate.\n                                        * @param {number} ivSize The size in words of the IV to generate.\n                                        * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\n                                        *\n                                        * @return {CipherParams} A cipher params object with the key, IV, and salt.\n                                        *\n                                        * @static\n                                        *\n                                        * @example\n                                        *\n                                        *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);\n                                        *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');\n                                        */\n      execute: function execute(password, keySize, ivSize, salt) {\n        // Generate random salt\n        if (!salt) {\n          salt = WordArray.random(64 / 8);\n        }\n\n        // Derive key and IV\n        var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);\n\n        // Separate key and IV\n        var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);\n        key.sigBytes = keySize * 4;\n\n        // Return params\n        return CipherParams.create({ key: key, iv: iv, salt: salt });\n      } };\n\n\n    /**\n            * A serializable cipher wrapper that derives the key from a password,\n            * and returns ciphertext as a serializable cipher params object.\n            */\n    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({\n      /**\n                                                                                       * Configuration options.\n                                                                                       *\n                                                                                       * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL\n                                                                                       */\n      cfg: SerializableCipher.cfg.extend({\n        kdf: OpenSSLKdf }),\n\n\n      /**\n                             * Encrypts a message using a password.\n                             *\n                             * @param {Cipher} cipher The cipher algorithm to use.\n                             * @param {WordArray|string} message The message to encrypt.\n                             * @param {string} password The password.\n                             * @param {Object} cfg (Optional) The configuration options to use for this operation.\n                             *\n                             * @return {CipherParams} A cipher params object.\n                             *\n                             * @static\n                             *\n                             * @example\n                             *\n                             *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');\n                             *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });\n                             */\n      encrypt: function encrypt(cipher, message, password, cfg) {\n        // Apply config defaults\n        cfg = this.cfg.extend(cfg);\n\n        // Derive key and other params\n        var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);\n\n        // Add IV to config\n        cfg.iv = derivedParams.iv;\n\n        // Encrypt\n        var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);\n\n        // Mix in derived params\n        ciphertext.mixIn(derivedParams);\n\n        return ciphertext;\n      },\n\n      /**\n          * Decrypts serialized ciphertext using a password.\n          *\n          * @param {Cipher} cipher The cipher algorithm to use.\n          * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n          * @param {string} password The password.\n          * @param {Object} cfg (Optional) The configuration options to use for this operation.\n          *\n          * @return {WordArray} The plaintext.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });\n          *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });\n          */\n      decrypt: function decrypt(cipher, ciphertext, password, cfg) {\n        // Apply config defaults\n        cfg = this.cfg.extend(cfg);\n\n        // Convert string to CipherParams\n        ciphertext = this._parse(ciphertext, cfg.format);\n\n        // Derive key and other params\n        var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);\n\n        // Add IV to config\n        cfg.iv = derivedParams.iv;\n\n        // Decrypt\n        var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);\n\n        return plaintext;\n      } });\n\n  }();\n\n\n  /**\n        * Cipher Feedback block mode.\n        */\n  CryptoJS.mode.CFB = function () {\n    var CFB = CryptoJS.lib.BlockCipherMode.extend();\n\n    CFB.Encryptor = CFB.extend({\n      processBlock: function processBlock(words, offset) {\n        // Shortcuts\n        var cipher = this._cipher;\n        var blockSize = cipher.blockSize;\n\n        generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);\n\n        // Remember this block to use with next block\n        this._prevBlock = words.slice(offset, offset + blockSize);\n      } });\n\n\n    CFB.Decryptor = CFB.extend({\n      processBlock: function processBlock(words, offset) {\n        // Shortcuts\n        var cipher = this._cipher;\n        var blockSize = cipher.blockSize;\n\n        // Remember this block to use with next block\n        var thisBlock = words.slice(offset, offset + blockSize);\n\n        generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);\n\n        // This block becomes the previous block\n        this._prevBlock = thisBlock;\n      } });\n\n\n    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {\n      // Shortcut\n      var iv = this._iv;\n\n      // Generate keystream\n      if (iv) {\n        var keystream = iv.slice(0);\n\n        // Remove IV for subsequent blocks\n        this._iv = undefined;\n      } else {\n        var keystream = this._prevBlock;\n      }\n      cipher.encryptBlock(keystream, 0);\n\n      // Encrypt\n      for (var i = 0; i < blockSize; i++) {\n        words[offset + i] ^= keystream[i];\n      }\n    }\n\n    return CFB;\n  }();\n\n\n  /**\n        * Electronic Codebook block mode.\n        */\n  CryptoJS.mode.ECB = function () {\n    var ECB = CryptoJS.lib.BlockCipherMode.extend();\n\n    ECB.Encryptor = ECB.extend({\n      processBlock: function processBlock(words, offset) {\n        this._cipher.encryptBlock(words, offset);\n      } });\n\n\n    ECB.Decryptor = ECB.extend({\n      processBlock: function processBlock(words, offset) {\n        this._cipher.decryptBlock(words, offset);\n      } });\n\n\n    return ECB;\n  }();\n\n\n  /**\n        * ANSI X.923 padding strategy.\n        */\n  CryptoJS.pad.AnsiX923 = {\n    pad: function pad(data, blockSize) {\n      // Shortcuts\n      var dataSigBytes = data.sigBytes;\n      var blockSizeBytes = blockSize * 4;\n\n      // Count padding bytes\n      var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;\n\n      // Compute last byte position\n      var lastBytePos = dataSigBytes + nPaddingBytes - 1;\n\n      // Pad\n      data.clamp();\n      data.words[lastBytePos >>> 2] |= nPaddingBytes << 24 - lastBytePos % 4 * 8;\n      data.sigBytes += nPaddingBytes;\n    },\n\n    unpad: function unpad(data) {\n      // Get number of padding bytes from last byte\n      var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff;\n\n      // Remove padding\n      data.sigBytes -= nPaddingBytes;\n    } };\n\n\n\n  /**\n          * ISO 10126 padding strategy.\n          */\n  CryptoJS.pad.Iso10126 = {\n    pad: function pad(data, blockSize) {\n      // Shortcut\n      var blockSizeBytes = blockSize * 4;\n\n      // Count padding bytes\n      var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\n\n      // Pad\n      data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).\n      concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));\n    },\n\n    unpad: function unpad(data) {\n      // Get number of padding bytes from last byte\n      var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff;\n\n      // Remove padding\n      data.sigBytes -= nPaddingBytes;\n    } };\n\n\n\n  /**\n          * ISO/IEC 9797-1 Padding Method 2.\n          */\n  CryptoJS.pad.Iso97971 = {\n    pad: function pad(data, blockSize) {\n      // Add 0x80 byte\n      data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));\n\n      // Zero pad the rest\n      CryptoJS.pad.ZeroPadding.pad(data, blockSize);\n    },\n\n    unpad: function unpad(data) {\n      // Remove zero padding\n      CryptoJS.pad.ZeroPadding.unpad(data);\n\n      // Remove one more byte -- the 0x80 byte\n      data.sigBytes--;\n    } };\n\n\n\n  /**\n          * Output Feedback block mode.\n          */\n  CryptoJS.mode.OFB = function () {\n    var OFB = CryptoJS.lib.BlockCipherMode.extend();\n\n    var Encryptor = OFB.Encryptor = OFB.extend({\n      processBlock: function processBlock(words, offset) {\n        // Shortcuts\n        var cipher = this._cipher;\n        var blockSize = cipher.blockSize;\n        var iv = this._iv;\n        var keystream = this._keystream;\n\n        // Generate keystream\n        if (iv) {\n          keystream = this._keystream = iv.slice(0);\n\n          // Remove IV for subsequent blocks\n          this._iv = undefined;\n        }\n        cipher.encryptBlock(keystream, 0);\n\n        // Encrypt\n        for (var i = 0; i < blockSize; i++) {\n          words[offset + i] ^= keystream[i];\n        }\n      } });\n\n\n    OFB.Decryptor = Encryptor;\n\n    return OFB;\n  }();\n\n\n  /**\n        * A noop padding strategy.\n        */\n  CryptoJS.pad.NoPadding = {\n    pad: function pad() {\n    },\n\n    unpad: function unpad() {\n    } };\n\n\n\n  (function (undefined) {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var CipherParams = C_lib.CipherParams;\n    var C_enc = C.enc;\n    var Hex = C_enc.Hex;\n    var C_format = C.format;\n\n    var HexFormatter = C_format.Hex = {\n      /**\n                                         * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.\n                                         *\n                                         * @param {CipherParams} cipherParams The cipher params object.\n                                         *\n                                         * @return {string} The hexadecimally encoded string.\n                                         *\n                                         * @static\n                                         *\n                                         * @example\n                                         *\n                                         *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);\n                                         */\n      stringify: function stringify(cipherParams) {\n        return cipherParams.ciphertext.toString(Hex);\n      },\n\n      /**\n          * Converts a hexadecimally encoded ciphertext string to a cipher params object.\n          *\n          * @param {string} input The hexadecimally encoded string.\n          *\n          * @return {CipherParams} The cipher params object.\n          *\n          * @static\n          *\n          * @example\n          *\n          *     var cipherParams = CryptoJS.format.Hex.parse(hexString);\n          */\n      parse: function parse(input) {\n        var ciphertext = Hex.parse(input);\n        return CipherParams.create({ ciphertext: ciphertext });\n      } };\n\n  })();\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var BlockCipher = C_lib.BlockCipher;\n    var C_algo = C.algo;\n\n    // Lookup tables\n    var SBOX = [];\n    var INV_SBOX = [];\n    var SUB_MIX_0 = [];\n    var SUB_MIX_1 = [];\n    var SUB_MIX_2 = [];\n    var SUB_MIX_3 = [];\n    var INV_SUB_MIX_0 = [];\n    var INV_SUB_MIX_1 = [];\n    var INV_SUB_MIX_2 = [];\n    var INV_SUB_MIX_3 = [];\n\n    // Compute lookup tables\n    (function () {\n      // Compute double table\n      var d = [];\n      for (var i = 0; i < 256; i++) {\n        if (i < 128) {\n          d[i] = i << 1;\n        } else {\n          d[i] = i << 1 ^ 0x11b;\n        }\n      }\n\n      // Walk GF(2^8)\n      var x = 0;\n      var xi = 0;\n      for (var i = 0; i < 256; i++) {\n        // Compute sbox\n        var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;\n        sx = sx >>> 8 ^ sx & 0xff ^ 0x63;\n        SBOX[x] = sx;\n        INV_SBOX[sx] = x;\n\n        // Compute multiplication\n        var x2 = d[x];\n        var x4 = d[x2];\n        var x8 = d[x4];\n\n        // Compute sub bytes, mix columns tables\n        var t = d[sx] * 0x101 ^ sx * 0x1010100;\n        SUB_MIX_0[x] = t << 24 | t >>> 8;\n        SUB_MIX_1[x] = t << 16 | t >>> 16;\n        SUB_MIX_2[x] = t << 8 | t >>> 24;\n        SUB_MIX_3[x] = t;\n\n        // Compute inv sub bytes, inv mix columns tables\n        var t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n        INV_SUB_MIX_0[sx] = t << 24 | t >>> 8;\n        INV_SUB_MIX_1[sx] = t << 16 | t >>> 16;\n        INV_SUB_MIX_2[sx] = t << 8 | t >>> 24;\n        INV_SUB_MIX_3[sx] = t;\n\n        // Compute next counter\n        if (!x) {\n          x = xi = 1;\n        } else {\n          x = x2 ^ d[d[d[x8 ^ x2]]];\n          xi ^= d[d[xi]];\n        }\n      }\n    })();\n\n    // Precomputed Rcon lookup\n    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\n\n    /**\n                                                                                    * AES block cipher algorithm.\n                                                                                    */\n    var AES = C_algo.AES = BlockCipher.extend({\n      _doReset: function _doReset() {\n        // Skip reset of nRounds has been set before and key did not change\n        if (this._nRounds && this._keyPriorReset === this._key) {\n          return;\n        }\n\n        // Shortcuts\n        var key = this._keyPriorReset = this._key;\n        var keyWords = key.words;\n        var keySize = key.sigBytes / 4;\n\n        // Compute number of rounds\n        var nRounds = this._nRounds = keySize + 6;\n\n        // Compute number of key schedule rows\n        var ksRows = (nRounds + 1) * 4;\n\n        // Compute key schedule\n        var keySchedule = this._keySchedule = [];\n        for (var ksRow = 0; ksRow < ksRows; ksRow++) {\n          if (ksRow < keySize) {\n            keySchedule[ksRow] = keyWords[ksRow];\n          } else {\n            var t = keySchedule[ksRow - 1];\n\n            if (!(ksRow % keySize)) {\n              // Rot word\n              t = t << 8 | t >>> 24;\n\n              // Sub word\n              t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 0xff] << 16 | SBOX[t >>> 8 & 0xff] << 8 | SBOX[t & 0xff];\n\n              // Mix Rcon\n              t ^= RCON[ksRow / keySize | 0] << 24;\n            } else if (keySize > 6 && ksRow % keySize == 4) {\n              // Sub word\n              t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 0xff] << 16 | SBOX[t >>> 8 & 0xff] << 8 | SBOX[t & 0xff];\n            }\n\n            keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;\n          }\n        }\n\n        // Compute inv key schedule\n        var invKeySchedule = this._invKeySchedule = [];\n        for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {\n          var ksRow = ksRows - invKsRow;\n\n          if (invKsRow % 4) {\n            var t = keySchedule[ksRow];\n          } else {\n            var t = keySchedule[ksRow - 4];\n          }\n\n          if (invKsRow < 4 || ksRow <= 4) {\n            invKeySchedule[invKsRow] = t;\n          } else {\n            invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[t >>> 16 & 0xff]] ^\n            INV_SUB_MIX_2[SBOX[t >>> 8 & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];\n          }\n        }\n      },\n\n      encryptBlock: function encryptBlock(M, offset) {\n        this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);\n      },\n\n      decryptBlock: function decryptBlock(M, offset) {\n        // Swap 2nd and 4th rows\n        var t = M[offset + 1];\n        M[offset + 1] = M[offset + 3];\n        M[offset + 3] = t;\n\n        this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);\n\n        // Inv swap 2nd and 4th rows\n        var t = M[offset + 1];\n        M[offset + 1] = M[offset + 3];\n        M[offset + 3] = t;\n      },\n\n      _doCryptBlock: function _doCryptBlock(M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {\n        // Shortcut\n        var nRounds = this._nRounds;\n\n        // Get input, add round key\n        var s0 = M[offset] ^ keySchedule[0];\n        var s1 = M[offset + 1] ^ keySchedule[1];\n        var s2 = M[offset + 2] ^ keySchedule[2];\n        var s3 = M[offset + 3] ^ keySchedule[3];\n\n        // Key schedule row counter\n        var ksRow = 4;\n\n        // Rounds\n        for (var round = 1; round < nRounds; round++) {\n          // Shift rows, sub bytes, mix columns, add round key\n          var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[s1 >>> 16 & 0xff] ^ SUB_MIX_2[s2 >>> 8 & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];\n          var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[s2 >>> 16 & 0xff] ^ SUB_MIX_2[s3 >>> 8 & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];\n          var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[s3 >>> 16 & 0xff] ^ SUB_MIX_2[s0 >>> 8 & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];\n          var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[s0 >>> 16 & 0xff] ^ SUB_MIX_2[s1 >>> 8 & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];\n\n          // Update state\n          s0 = t0;\n          s1 = t1;\n          s2 = t2;\n          s3 = t3;\n        }\n\n        // Shift rows, sub bytes, add round key\n        var t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 0xff] << 16 | SBOX[s2 >>> 8 & 0xff] << 8 | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];\n        var t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 0xff] << 16 | SBOX[s3 >>> 8 & 0xff] << 8 | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];\n        var t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 0xff] << 16 | SBOX[s0 >>> 8 & 0xff] << 8 | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];\n        var t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 0xff] << 16 | SBOX[s1 >>> 8 & 0xff] << 8 | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];\n\n        // Set output\n        M[offset] = t0;\n        M[offset + 1] = t1;\n        M[offset + 2] = t2;\n        M[offset + 3] = t3;\n      },\n\n      keySize: 256 / 32 });\n\n\n    /**\n                             * Shortcut functions to the cipher's object interface.\n                             *\n                             * @example\n                             *\n                             *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);\n                             *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);\n                             */\n    C.AES = BlockCipher._createHelper(AES);\n  })();\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var BlockCipher = C_lib.BlockCipher;\n    var C_algo = C.algo;\n\n    // Permuted Choice 1 constants\n    var PC1 = [\n    57, 49, 41, 33, 25, 17, 9, 1,\n    58, 50, 42, 34, 26, 18, 10, 2,\n    59, 51, 43, 35, 27, 19, 11, 3,\n    60, 52, 44, 36, 63, 55, 47, 39,\n    31, 23, 15, 7, 62, 54, 46, 38,\n    30, 22, 14, 6, 61, 53, 45, 37,\n    29, 21, 13, 5, 28, 20, 12, 4];\n\n\n    // Permuted Choice 2 constants\n    var PC2 = [\n    14, 17, 11, 24, 1, 5,\n    3, 28, 15, 6, 21, 10,\n    23, 19, 12, 4, 26, 8,\n    16, 7, 27, 20, 13, 2,\n    41, 52, 31, 37, 47, 55,\n    30, 40, 51, 45, 33, 48,\n    44, 49, 39, 56, 34, 53,\n    46, 42, 50, 36, 29, 32];\n\n\n    // Cumulative bit shift constants\n    var BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];\n\n    // SBOXes and round permutation constants\n    var SBOX_P = [\n    {\n      0x0: 0x808200,\n      0x10000000: 0x8000,\n      0x20000000: 0x808002,\n      0x30000000: 0x2,\n      0x40000000: 0x200,\n      0x50000000: 0x808202,\n      0x60000000: 0x800202,\n      0x70000000: 0x800000,\n      0x80000000: 0x202,\n      0x90000000: 0x800200,\n      0xa0000000: 0x8200,\n      0xb0000000: 0x808000,\n      0xc0000000: 0x8002,\n      0xd0000000: 0x800002,\n      0xe0000000: 0x0,\n      0xf0000000: 0x8202,\n      0x8000000: 0x0,\n      0x18000000: 0x808202,\n      0x28000000: 0x8202,\n      0x38000000: 0x8000,\n      0x48000000: 0x808200,\n      0x58000000: 0x200,\n      0x68000000: 0x808002,\n      0x78000000: 0x2,\n      0x88000000: 0x800200,\n      0x98000000: 0x8200,\n      0xa8000000: 0x808000,\n      0xb8000000: 0x800202,\n      0xc8000000: 0x800002,\n      0xd8000000: 0x8002,\n      0xe8000000: 0x202,\n      0xf8000000: 0x800000,\n      0x1: 0x8000,\n      0x10000001: 0x2,\n      0x20000001: 0x808200,\n      0x30000001: 0x800000,\n      0x40000001: 0x808002,\n      0x50000001: 0x8200,\n      0x60000001: 0x200,\n      0x70000001: 0x800202,\n      0x80000001: 0x808202,\n      0x90000001: 0x808000,\n      0xa0000001: 0x800002,\n      0xb0000001: 0x8202,\n      0xc0000001: 0x202,\n      0xd0000001: 0x800200,\n      0xe0000001: 0x8002,\n      0xf0000001: 0x0,\n      0x8000001: 0x808202,\n      0x18000001: 0x808000,\n      0x28000001: 0x800000,\n      0x38000001: 0x200,\n      0x48000001: 0x8000,\n      0x58000001: 0x800002,\n      0x68000001: 0x2,\n      0x78000001: 0x8202,\n      0x88000001: 0x8002,\n      0x98000001: 0x800202,\n      0xa8000001: 0x202,\n      0xb8000001: 0x808200,\n      0xc8000001: 0x800200,\n      0xd8000001: 0x0,\n      0xe8000001: 0x8200,\n      0xf8000001: 0x808002 },\n\n    {\n      0x0: 0x40084010,\n      0x1000000: 0x4000,\n      0x2000000: 0x80000,\n      0x3000000: 0x40080010,\n      0x4000000: 0x40000010,\n      0x5000000: 0x40084000,\n      0x6000000: 0x40004000,\n      0x7000000: 0x10,\n      0x8000000: 0x84000,\n      0x9000000: 0x40004010,\n      0xa000000: 0x40000000,\n      0xb000000: 0x84010,\n      0xc000000: 0x80010,\n      0xd000000: 0x0,\n      0xe000000: 0x4010,\n      0xf000000: 0x40080000,\n      0x800000: 0x40004000,\n      0x1800000: 0x84010,\n      0x2800000: 0x10,\n      0x3800000: 0x40004010,\n      0x4800000: 0x40084010,\n      0x5800000: 0x40000000,\n      0x6800000: 0x80000,\n      0x7800000: 0x40080010,\n      0x8800000: 0x80010,\n      0x9800000: 0x0,\n      0xa800000: 0x4000,\n      0xb800000: 0x40080000,\n      0xc800000: 0x40000010,\n      0xd800000: 0x84000,\n      0xe800000: 0x40084000,\n      0xf800000: 0x4010,\n      0x10000000: 0x0,\n      0x11000000: 0x40080010,\n      0x12000000: 0x40004010,\n      0x13000000: 0x40084000,\n      0x14000000: 0x40080000,\n      0x15000000: 0x10,\n      0x16000000: 0x84010,\n      0x17000000: 0x4000,\n      0x18000000: 0x4010,\n      0x19000000: 0x80000,\n      0x1a000000: 0x80010,\n      0x1b000000: 0x40000010,\n      0x1c000000: 0x84000,\n      0x1d000000: 0x40004000,\n      0x1e000000: 0x40000000,\n      0x1f000000: 0x40084010,\n      0x10800000: 0x84010,\n      0x11800000: 0x80000,\n      0x12800000: 0x40080000,\n      0x13800000: 0x4000,\n      0x14800000: 0x40004000,\n      0x15800000: 0x40084010,\n      0x16800000: 0x10,\n      0x17800000: 0x40000000,\n      0x18800000: 0x40084000,\n      0x19800000: 0x40000010,\n      0x1a800000: 0x40004010,\n      0x1b800000: 0x80010,\n      0x1c800000: 0x0,\n      0x1d800000: 0x4010,\n      0x1e800000: 0x40080010,\n      0x1f800000: 0x84000 },\n\n    {\n      0x0: 0x104,\n      0x100000: 0x0,\n      0x200000: 0x4000100,\n      0x300000: 0x10104,\n      0x400000: 0x10004,\n      0x500000: 0x4000004,\n      0x600000: 0x4010104,\n      0x700000: 0x4010000,\n      0x800000: 0x4000000,\n      0x900000: 0x4010100,\n      0xa00000: 0x10100,\n      0xb00000: 0x4010004,\n      0xc00000: 0x4000104,\n      0xd00000: 0x10000,\n      0xe00000: 0x4,\n      0xf00000: 0x100,\n      0x80000: 0x4010100,\n      0x180000: 0x4010004,\n      0x280000: 0x0,\n      0x380000: 0x4000100,\n      0x480000: 0x4000004,\n      0x580000: 0x10000,\n      0x680000: 0x10004,\n      0x780000: 0x104,\n      0x880000: 0x4,\n      0x980000: 0x100,\n      0xa80000: 0x4010000,\n      0xb80000: 0x10104,\n      0xc80000: 0x10100,\n      0xd80000: 0x4000104,\n      0xe80000: 0x4010104,\n      0xf80000: 0x4000000,\n      0x1000000: 0x4010100,\n      0x1100000: 0x10004,\n      0x1200000: 0x10000,\n      0x1300000: 0x4000100,\n      0x1400000: 0x100,\n      0x1500000: 0x4010104,\n      0x1600000: 0x4000004,\n      0x1700000: 0x0,\n      0x1800000: 0x4000104,\n      0x1900000: 0x4000000,\n      0x1a00000: 0x4,\n      0x1b00000: 0x10100,\n      0x1c00000: 0x4010000,\n      0x1d00000: 0x104,\n      0x1e00000: 0x10104,\n      0x1f00000: 0x4010004,\n      0x1080000: 0x4000000,\n      0x1180000: 0x104,\n      0x1280000: 0x4010100,\n      0x1380000: 0x0,\n      0x1480000: 0x10004,\n      0x1580000: 0x4000100,\n      0x1680000: 0x100,\n      0x1780000: 0x4010004,\n      0x1880000: 0x10000,\n      0x1980000: 0x4010104,\n      0x1a80000: 0x10104,\n      0x1b80000: 0x4000004,\n      0x1c80000: 0x4000104,\n      0x1d80000: 0x4010000,\n      0x1e80000: 0x4,\n      0x1f80000: 0x10100 },\n\n    {\n      0x0: 0x80401000,\n      0x10000: 0x80001040,\n      0x20000: 0x401040,\n      0x30000: 0x80400000,\n      0x40000: 0x0,\n      0x50000: 0x401000,\n      0x60000: 0x80000040,\n      0x70000: 0x400040,\n      0x80000: 0x80000000,\n      0x90000: 0x400000,\n      0xa0000: 0x40,\n      0xb0000: 0x80001000,\n      0xc0000: 0x80400040,\n      0xd0000: 0x1040,\n      0xe0000: 0x1000,\n      0xf0000: 0x80401040,\n      0x8000: 0x80001040,\n      0x18000: 0x40,\n      0x28000: 0x80400040,\n      0x38000: 0x80001000,\n      0x48000: 0x401000,\n      0x58000: 0x80401040,\n      0x68000: 0x0,\n      0x78000: 0x80400000,\n      0x88000: 0x1000,\n      0x98000: 0x80401000,\n      0xa8000: 0x400000,\n      0xb8000: 0x1040,\n      0xc8000: 0x80000000,\n      0xd8000: 0x400040,\n      0xe8000: 0x401040,\n      0xf8000: 0x80000040,\n      0x100000: 0x400040,\n      0x110000: 0x401000,\n      0x120000: 0x80000040,\n      0x130000: 0x0,\n      0x140000: 0x1040,\n      0x150000: 0x80400040,\n      0x160000: 0x80401000,\n      0x170000: 0x80001040,\n      0x180000: 0x80401040,\n      0x190000: 0x80000000,\n      0x1a0000: 0x80400000,\n      0x1b0000: 0x401040,\n      0x1c0000: 0x80001000,\n      0x1d0000: 0x400000,\n      0x1e0000: 0x40,\n      0x1f0000: 0x1000,\n      0x108000: 0x80400000,\n      0x118000: 0x80401040,\n      0x128000: 0x0,\n      0x138000: 0x401000,\n      0x148000: 0x400040,\n      0x158000: 0x80000000,\n      0x168000: 0x80001040,\n      0x178000: 0x40,\n      0x188000: 0x80000040,\n      0x198000: 0x1000,\n      0x1a8000: 0x80001000,\n      0x1b8000: 0x80400040,\n      0x1c8000: 0x1040,\n      0x1d8000: 0x80401000,\n      0x1e8000: 0x400000,\n      0x1f8000: 0x401040 },\n\n    {\n      0x0: 0x80,\n      0x1000: 0x1040000,\n      0x2000: 0x40000,\n      0x3000: 0x20000000,\n      0x4000: 0x20040080,\n      0x5000: 0x1000080,\n      0x6000: 0x21000080,\n      0x7000: 0x40080,\n      0x8000: 0x1000000,\n      0x9000: 0x20040000,\n      0xa000: 0x20000080,\n      0xb000: 0x21040080,\n      0xc000: 0x21040000,\n      0xd000: 0x0,\n      0xe000: 0x1040080,\n      0xf000: 0x21000000,\n      0x800: 0x1040080,\n      0x1800: 0x21000080,\n      0x2800: 0x80,\n      0x3800: 0x1040000,\n      0x4800: 0x40000,\n      0x5800: 0x20040080,\n      0x6800: 0x21040000,\n      0x7800: 0x20000000,\n      0x8800: 0x20040000,\n      0x9800: 0x0,\n      0xa800: 0x21040080,\n      0xb800: 0x1000080,\n      0xc800: 0x20000080,\n      0xd800: 0x21000000,\n      0xe800: 0x1000000,\n      0xf800: 0x40080,\n      0x10000: 0x40000,\n      0x11000: 0x80,\n      0x12000: 0x20000000,\n      0x13000: 0x21000080,\n      0x14000: 0x1000080,\n      0x15000: 0x21040000,\n      0x16000: 0x20040080,\n      0x17000: 0x1000000,\n      0x18000: 0x21040080,\n      0x19000: 0x21000000,\n      0x1a000: 0x1040000,\n      0x1b000: 0x20040000,\n      0x1c000: 0x40080,\n      0x1d000: 0x20000080,\n      0x1e000: 0x0,\n      0x1f000: 0x1040080,\n      0x10800: 0x21000080,\n      0x11800: 0x1000000,\n      0x12800: 0x1040000,\n      0x13800: 0x20040080,\n      0x14800: 0x20000000,\n      0x15800: 0x1040080,\n      0x16800: 0x80,\n      0x17800: 0x21040000,\n      0x18800: 0x40080,\n      0x19800: 0x21040080,\n      0x1a800: 0x0,\n      0x1b800: 0x21000000,\n      0x1c800: 0x1000080,\n      0x1d800: 0x40000,\n      0x1e800: 0x20040000,\n      0x1f800: 0x20000080 },\n\n    {\n      0x0: 0x10000008,\n      0x100: 0x2000,\n      0x200: 0x10200000,\n      0x300: 0x10202008,\n      0x400: 0x10002000,\n      0x500: 0x200000,\n      0x600: 0x200008,\n      0x700: 0x10000000,\n      0x800: 0x0,\n      0x900: 0x10002008,\n      0xa00: 0x202000,\n      0xb00: 0x8,\n      0xc00: 0x10200008,\n      0xd00: 0x202008,\n      0xe00: 0x2008,\n      0xf00: 0x10202000,\n      0x80: 0x10200000,\n      0x180: 0x10202008,\n      0x280: 0x8,\n      0x380: 0x200000,\n      0x480: 0x202008,\n      0x580: 0x10000008,\n      0x680: 0x10002000,\n      0x780: 0x2008,\n      0x880: 0x200008,\n      0x980: 0x2000,\n      0xa80: 0x10002008,\n      0xb80: 0x10200008,\n      0xc80: 0x0,\n      0xd80: 0x10202000,\n      0xe80: 0x202000,\n      0xf80: 0x10000000,\n      0x1000: 0x10002000,\n      0x1100: 0x10200008,\n      0x1200: 0x10202008,\n      0x1300: 0x2008,\n      0x1400: 0x200000,\n      0x1500: 0x10000000,\n      0x1600: 0x10000008,\n      0x1700: 0x202000,\n      0x1800: 0x202008,\n      0x1900: 0x0,\n      0x1a00: 0x8,\n      0x1b00: 0x10200000,\n      0x1c00: 0x2000,\n      0x1d00: 0x10002008,\n      0x1e00: 0x10202000,\n      0x1f00: 0x200008,\n      0x1080: 0x8,\n      0x1180: 0x202000,\n      0x1280: 0x200000,\n      0x1380: 0x10000008,\n      0x1480: 0x10002000,\n      0x1580: 0x2008,\n      0x1680: 0x10202008,\n      0x1780: 0x10200000,\n      0x1880: 0x10202000,\n      0x1980: 0x10200008,\n      0x1a80: 0x2000,\n      0x1b80: 0x202008,\n      0x1c80: 0x200008,\n      0x1d80: 0x0,\n      0x1e80: 0x10000000,\n      0x1f80: 0x10002008 },\n\n    {\n      0x0: 0x100000,\n      0x10: 0x2000401,\n      0x20: 0x400,\n      0x30: 0x100401,\n      0x40: 0x2100401,\n      0x50: 0x0,\n      0x60: 0x1,\n      0x70: 0x2100001,\n      0x80: 0x2000400,\n      0x90: 0x100001,\n      0xa0: 0x2000001,\n      0xb0: 0x2100400,\n      0xc0: 0x2100000,\n      0xd0: 0x401,\n      0xe0: 0x100400,\n      0xf0: 0x2000000,\n      0x8: 0x2100001,\n      0x18: 0x0,\n      0x28: 0x2000401,\n      0x38: 0x2100400,\n      0x48: 0x100000,\n      0x58: 0x2000001,\n      0x68: 0x2000000,\n      0x78: 0x401,\n      0x88: 0x100401,\n      0x98: 0x2000400,\n      0xa8: 0x2100000,\n      0xb8: 0x100001,\n      0xc8: 0x400,\n      0xd8: 0x2100401,\n      0xe8: 0x1,\n      0xf8: 0x100400,\n      0x100: 0x2000000,\n      0x110: 0x100000,\n      0x120: 0x2000401,\n      0x130: 0x2100001,\n      0x140: 0x100001,\n      0x150: 0x2000400,\n      0x160: 0x2100400,\n      0x170: 0x100401,\n      0x180: 0x401,\n      0x190: 0x2100401,\n      0x1a0: 0x100400,\n      0x1b0: 0x1,\n      0x1c0: 0x0,\n      0x1d0: 0x2100000,\n      0x1e0: 0x2000001,\n      0x1f0: 0x400,\n      0x108: 0x100400,\n      0x118: 0x2000401,\n      0x128: 0x2100001,\n      0x138: 0x1,\n      0x148: 0x2000000,\n      0x158: 0x100000,\n      0x168: 0x401,\n      0x178: 0x2100400,\n      0x188: 0x2000001,\n      0x198: 0x2100000,\n      0x1a8: 0x0,\n      0x1b8: 0x2100401,\n      0x1c8: 0x100401,\n      0x1d8: 0x400,\n      0x1e8: 0x2000400,\n      0x1f8: 0x100001 },\n\n    {\n      0x0: 0x8000820,\n      0x1: 0x20000,\n      0x2: 0x8000000,\n      0x3: 0x20,\n      0x4: 0x20020,\n      0x5: 0x8020820,\n      0x6: 0x8020800,\n      0x7: 0x800,\n      0x8: 0x8020000,\n      0x9: 0x8000800,\n      0xa: 0x20800,\n      0xb: 0x8020020,\n      0xc: 0x820,\n      0xd: 0x0,\n      0xe: 0x8000020,\n      0xf: 0x20820,\n      0x80000000: 0x800,\n      0x80000001: 0x8020820,\n      0x80000002: 0x8000820,\n      0x80000003: 0x8000000,\n      0x80000004: 0x8020000,\n      0x80000005: 0x20800,\n      0x80000006: 0x20820,\n      0x80000007: 0x20,\n      0x80000008: 0x8000020,\n      0x80000009: 0x820,\n      0x8000000a: 0x20020,\n      0x8000000b: 0x8020800,\n      0x8000000c: 0x0,\n      0x8000000d: 0x8020020,\n      0x8000000e: 0x8000800,\n      0x8000000f: 0x20000,\n      0x10: 0x20820,\n      0x11: 0x8020800,\n      0x12: 0x20,\n      0x13: 0x800,\n      0x14: 0x8000800,\n      0x15: 0x8000020,\n      0x16: 0x8020020,\n      0x17: 0x20000,\n      0x18: 0x0,\n      0x19: 0x20020,\n      0x1a: 0x8020000,\n      0x1b: 0x8000820,\n      0x1c: 0x8020820,\n      0x1d: 0x20800,\n      0x1e: 0x820,\n      0x1f: 0x8000000,\n      0x80000010: 0x20000,\n      0x80000011: 0x800,\n      0x80000012: 0x8020020,\n      0x80000013: 0x20820,\n      0x80000014: 0x20,\n      0x80000015: 0x8020000,\n      0x80000016: 0x8000000,\n      0x80000017: 0x8000820,\n      0x80000018: 0x8020820,\n      0x80000019: 0x8000020,\n      0x8000001a: 0x8000800,\n      0x8000001b: 0x0,\n      0x8000001c: 0x20800,\n      0x8000001d: 0x820,\n      0x8000001e: 0x20020,\n      0x8000001f: 0x8020800 }];\n\n\n\n    // Masks that select the SBOX input\n    var SBOX_MASK = [\n    0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,\n    0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f];\n\n\n    /**\n                                                      * DES block cipher algorithm.\n                                                      */\n    var DES = C_algo.DES = BlockCipher.extend({\n      _doReset: function _doReset() {\n        // Shortcuts\n        var key = this._key;\n        var keyWords = key.words;\n\n        // Select 56 bits according to PC1\n        var keyBits = [];\n        for (var i = 0; i < 56; i++) {\n          var keyBitPos = PC1[i] - 1;\n          keyBits[i] = keyWords[keyBitPos >>> 5] >>> 31 - keyBitPos % 32 & 1;\n        }\n\n        // Assemble 16 subkeys\n        var subKeys = this._subKeys = [];\n        for (var nSubKey = 0; nSubKey < 16; nSubKey++) {\n          // Create subkey\n          var subKey = subKeys[nSubKey] = [];\n\n          // Shortcut\n          var bitShift = BIT_SHIFTS[nSubKey];\n\n          // Select 48 bits according to PC2\n          for (var i = 0; i < 24; i++) {\n            // Select from the left 28 key bits\n            subKey[i / 6 | 0] |= keyBits[(PC2[i] - 1 + bitShift) % 28] << 31 - i % 6;\n\n            // Select from the right 28 key bits\n            subKey[4 + (i / 6 | 0)] |= keyBits[28 + (PC2[i + 24] - 1 + bitShift) % 28] << 31 - i % 6;\n          }\n\n          // Since each subkey is applied to an expanded 32-bit input,\n          // the subkey can be broken into 8 values scaled to 32-bits,\n          // which allows the key to be used without expansion\n          subKey[0] = subKey[0] << 1 | subKey[0] >>> 31;\n          for (var i = 1; i < 7; i++) {\n            subKey[i] = subKey[i] >>> (i - 1) * 4 + 3;\n          }\n          subKey[7] = subKey[7] << 5 | subKey[7] >>> 27;\n        }\n\n        // Compute inverse subkeys\n        var invSubKeys = this._invSubKeys = [];\n        for (var i = 0; i < 16; i++) {\n          invSubKeys[i] = subKeys[15 - i];\n        }\n      },\n\n      encryptBlock: function encryptBlock(M, offset) {\n        this._doCryptBlock(M, offset, this._subKeys);\n      },\n\n      decryptBlock: function decryptBlock(M, offset) {\n        this._doCryptBlock(M, offset, this._invSubKeys);\n      },\n\n      _doCryptBlock: function _doCryptBlock(M, offset, subKeys) {\n        // Get input\n        this._lBlock = M[offset];\n        this._rBlock = M[offset + 1];\n\n        // Initial permutation\n        exchangeLR.call(this, 4, 0x0f0f0f0f);\n        exchangeLR.call(this, 16, 0x0000ffff);\n        exchangeRL.call(this, 2, 0x33333333);\n        exchangeRL.call(this, 8, 0x00ff00ff);\n        exchangeLR.call(this, 1, 0x55555555);\n\n        // Rounds\n        for (var round = 0; round < 16; round++) {\n          // Shortcuts\n          var subKey = subKeys[round];\n          var lBlock = this._lBlock;\n          var rBlock = this._rBlock;\n\n          // Feistel function\n          var f = 0;\n          for (var i = 0; i < 8; i++) {\n            f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];\n          }\n          this._lBlock = rBlock;\n          this._rBlock = lBlock ^ f;\n        }\n\n        // Undo swap from last round\n        var t = this._lBlock;\n        this._lBlock = this._rBlock;\n        this._rBlock = t;\n\n        // Final permutation\n        exchangeLR.call(this, 1, 0x55555555);\n        exchangeRL.call(this, 8, 0x00ff00ff);\n        exchangeRL.call(this, 2, 0x33333333);\n        exchangeLR.call(this, 16, 0x0000ffff);\n        exchangeLR.call(this, 4, 0x0f0f0f0f);\n\n        // Set output\n        M[offset] = this._lBlock;\n        M[offset + 1] = this._rBlock;\n      },\n\n      keySize: 64 / 32,\n\n      ivSize: 64 / 32,\n\n      blockSize: 64 / 32 });\n\n\n    // Swap bits across the left and right words\n    function exchangeLR(offset, mask) {\n      var t = (this._lBlock >>> offset ^ this._rBlock) & mask;\n      this._rBlock ^= t;\n      this._lBlock ^= t << offset;\n    }\n\n    function exchangeRL(offset, mask) {\n      var t = (this._rBlock >>> offset ^ this._lBlock) & mask;\n      this._lBlock ^= t;\n      this._rBlock ^= t << offset;\n    }\n\n    /**\n       * Shortcut functions to the cipher's object interface.\n       *\n       * @example\n       *\n       *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);\n       *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);\n       */\n    C.DES = BlockCipher._createHelper(DES);\n\n    /**\n                                             * Triple-DES block cipher algorithm.\n                                             */\n    var TripleDES = C_algo.TripleDES = BlockCipher.extend({\n      _doReset: function _doReset() {\n        // Shortcuts\n        var key = this._key;\n        var keyWords = key.words;\n\n        // Create DES instances\n        this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));\n        this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));\n        this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));\n      },\n\n      encryptBlock: function encryptBlock(M, offset) {\n        this._des1.encryptBlock(M, offset);\n        this._des2.decryptBlock(M, offset);\n        this._des3.encryptBlock(M, offset);\n      },\n\n      decryptBlock: function decryptBlock(M, offset) {\n        this._des3.decryptBlock(M, offset);\n        this._des2.encryptBlock(M, offset);\n        this._des1.decryptBlock(M, offset);\n      },\n\n      keySize: 192 / 32,\n\n      ivSize: 64 / 32,\n\n      blockSize: 64 / 32 });\n\n\n    /**\n                              * Shortcut functions to the cipher's object interface.\n                              *\n                              * @example\n                              *\n                              *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);\n                              *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);\n                              */\n    C.TripleDES = BlockCipher._createHelper(TripleDES);\n  })();\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var StreamCipher = C_lib.StreamCipher;\n    var C_algo = C.algo;\n\n    /**\n                          * RC4 stream cipher algorithm.\n                          */\n    var RC4 = C_algo.RC4 = StreamCipher.extend({\n      _doReset: function _doReset() {\n        // Shortcuts\n        var key = this._key;\n        var keyWords = key.words;\n        var keySigBytes = key.sigBytes;\n\n        // Init sbox\n        var S = this._S = [];\n        for (var i = 0; i < 256; i++) {\n          S[i] = i;\n        }\n\n        // Key setup\n        for (var i = 0, j = 0; i < 256; i++) {\n          var keyByteIndex = i % keySigBytes;\n          var keyByte = keyWords[keyByteIndex >>> 2] >>> 24 - keyByteIndex % 4 * 8 & 0xff;\n\n          j = (j + S[i] + keyByte) % 256;\n\n          // Swap\n          var t = S[i];\n          S[i] = S[j];\n          S[j] = t;\n        }\n\n        // Counters\n        this._i = this._j = 0;\n      },\n\n      _doProcessBlock: function _doProcessBlock(M, offset) {\n        M[offset] ^= generateKeystreamWord.call(this);\n      },\n\n      keySize: 256 / 32,\n\n      ivSize: 0 });\n\n\n    function generateKeystreamWord() {\n      // Shortcuts\n      var S = this._S;\n      var i = this._i;\n      var j = this._j;\n\n      // Generate keystream word\n      var keystreamWord = 0;\n      for (var n = 0; n < 4; n++) {\n        i = (i + 1) % 256;\n        j = (j + S[i]) % 256;\n\n        // Swap\n        var t = S[i];\n        S[i] = S[j];\n        S[j] = t;\n\n        keystreamWord |= S[(S[i] + S[j]) % 256] << 24 - n * 8;\n      }\n\n      // Update counters\n      this._i = i;\n      this._j = j;\n\n      return keystreamWord;\n    }\n\n    /**\n       * Shortcut functions to the cipher's object interface.\n       *\n       * @example\n       *\n       *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);\n       *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);\n       */\n    C.RC4 = StreamCipher._createHelper(RC4);\n\n    /**\n                                              * Modified RC4 stream cipher algorithm.\n                                              */\n    var RC4Drop = C_algo.RC4Drop = RC4.extend({\n      /**\n                                                 * Configuration options.\n                                                 *\n                                                 * @property {number} drop The number of keystream words to drop. Default 192\n                                                 */\n      cfg: RC4.cfg.extend({\n        drop: 192 }),\n\n\n      _doReset: function _doReset() {\n        RC4._doReset.call(this);\n\n        // Drop\n        for (var i = this.cfg.drop; i > 0; i--) {\n          generateKeystreamWord.call(this);\n        }\n      } });\n\n\n    /**\n             * Shortcut functions to the cipher's object interface.\n             *\n             * @example\n             *\n             *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);\n             *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);\n             */\n    C.RC4Drop = StreamCipher._createHelper(RC4Drop);\n  })();\n\n\n  /** @preserve\n         * Counter block mode compatible with  Dr Brian Gladman fileenc.c\n         * derived from CryptoJS.mode.CTR\n         * Jan Hruby jhruby.web@gmail.com\n         */\n  CryptoJS.mode.CTRGladman = function () {\n    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();\n\n    function incWord(word)\n    {\n      if ((word >> 24 & 0xff) === 0xff) {//overflow\n        var b1 = word >> 16 & 0xff;\n        var b2 = word >> 8 & 0xff;\n        var b3 = word & 0xff;\n\n        if (b1 === 0xff) // overflow b1\n          {\n            b1 = 0;\n            if (b2 === 0xff)\n            {\n              b2 = 0;\n              if (b3 === 0xff)\n              {\n                b3 = 0;\n              } else\n\n              {\n                ++b3;\n              }\n            } else\n\n            {\n              ++b2;\n            }\n          } else\n\n        {\n          ++b1;\n        }\n\n        word = 0;\n        word += b1 << 16;\n        word += b2 << 8;\n        word += b3;\n      } else\n\n      {\n        word += 0x01 << 24;\n      }\n      return word;\n    }\n\n    function incCounter(counter)\n    {\n      if ((counter[0] = incWord(counter[0])) === 0)\n      {\n        // encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8\n        counter[1] = incWord(counter[1]);\n      }\n      return counter;\n    }\n\n    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({\n      processBlock: function processBlock(words, offset) {\n        // Shortcuts\n        var cipher = this._cipher;\n        var blockSize = cipher.blockSize;\n        var iv = this._iv;\n        var counter = this._counter;\n\n        // Generate keystream\n        if (iv) {\n          counter = this._counter = iv.slice(0);\n\n          // Remove IV for subsequent blocks\n          this._iv = undefined;\n        }\n\n        incCounter(counter);\n\n        var keystream = counter.slice(0);\n        cipher.encryptBlock(keystream, 0);\n\n        // Encrypt\n        for (var i = 0; i < blockSize; i++) {\n          words[offset + i] ^= keystream[i];\n        }\n      } });\n\n\n    CTRGladman.Decryptor = Encryptor;\n\n    return CTRGladman;\n  }();\n\n\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var StreamCipher = C_lib.StreamCipher;\n    var C_algo = C.algo;\n\n    // Reusable objects\n    var S = [];\n    var C_ = [];\n    var G = [];\n\n    /**\n                 * Rabbit stream cipher algorithm\n                 */\n    var Rabbit = C_algo.Rabbit = StreamCipher.extend({\n      _doReset: function _doReset() {\n        // Shortcuts\n        var K = this._key.words;\n        var iv = this.cfg.iv;\n\n        // Swap endian\n        for (var i = 0; i < 4; i++) {\n          K[i] = (K[i] << 8 | K[i] >>> 24) & 0x00ff00ff |\n          (K[i] << 24 | K[i] >>> 8) & 0xff00ff00;\n        }\n\n        // Generate initial state values\n        var X = this._X = [\n        K[0], K[3] << 16 | K[2] >>> 16,\n        K[1], K[0] << 16 | K[3] >>> 16,\n        K[2], K[1] << 16 | K[0] >>> 16,\n        K[3], K[2] << 16 | K[1] >>> 16];\n\n\n        // Generate initial counter values\n        var C = this._C = [\n        K[2] << 16 | K[2] >>> 16, K[0] & 0xffff0000 | K[1] & 0x0000ffff,\n        K[3] << 16 | K[3] >>> 16, K[1] & 0xffff0000 | K[2] & 0x0000ffff,\n        K[0] << 16 | K[0] >>> 16, K[2] & 0xffff0000 | K[3] & 0x0000ffff,\n        K[1] << 16 | K[1] >>> 16, K[3] & 0xffff0000 | K[0] & 0x0000ffff];\n\n\n        // Carry bit\n        this._b = 0;\n\n        // Iterate the system four times\n        for (var i = 0; i < 4; i++) {\n          nextState.call(this);\n        }\n\n        // Modify the counters\n        for (var i = 0; i < 8; i++) {\n          C[i] ^= X[i + 4 & 7];\n        }\n\n        // IV setup\n        if (iv) {\n          // Shortcuts\n          var IV = iv.words;\n          var IV_0 = IV[0];\n          var IV_1 = IV[1];\n\n          // Generate four subvectors\n          var i0 = (IV_0 << 8 | IV_0 >>> 24) & 0x00ff00ff | (IV_0 << 24 | IV_0 >>> 8) & 0xff00ff00;\n          var i2 = (IV_1 << 8 | IV_1 >>> 24) & 0x00ff00ff | (IV_1 << 24 | IV_1 >>> 8) & 0xff00ff00;\n          var i1 = i0 >>> 16 | i2 & 0xffff0000;\n          var i3 = i2 << 16 | i0 & 0x0000ffff;\n\n          // Modify counter values\n          C[0] ^= i0;\n          C[1] ^= i1;\n          C[2] ^= i2;\n          C[3] ^= i3;\n          C[4] ^= i0;\n          C[5] ^= i1;\n          C[6] ^= i2;\n          C[7] ^= i3;\n\n          // Iterate the system four times\n          for (var i = 0; i < 4; i++) {\n            nextState.call(this);\n          }\n        }\n      },\n\n      _doProcessBlock: function _doProcessBlock(M, offset) {\n        // Shortcut\n        var X = this._X;\n\n        // Iterate the system\n        nextState.call(this);\n\n        // Generate four keystream words\n        S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;\n        S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;\n        S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;\n        S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;\n\n        for (var i = 0; i < 4; i++) {\n          // Swap endian\n          S[i] = (S[i] << 8 | S[i] >>> 24) & 0x00ff00ff |\n          (S[i] << 24 | S[i] >>> 8) & 0xff00ff00;\n\n          // Encrypt\n          M[offset + i] ^= S[i];\n        }\n      },\n\n      blockSize: 128 / 32,\n\n      ivSize: 64 / 32 });\n\n\n    function nextState() {\n      // Shortcuts\n      var X = this._X;\n      var C = this._C;\n\n      // Save old counter values\n      for (var i = 0; i < 8; i++) {\n        C_[i] = C[i];\n      }\n\n      // Calculate new counter values\n      C[0] = C[0] + 0x4d34d34d + this._b | 0;\n      C[1] = C[1] + 0xd34d34d3 + (C[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;\n      C[2] = C[2] + 0x34d34d34 + (C[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;\n      C[3] = C[3] + 0x4d34d34d + (C[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;\n      C[4] = C[4] + 0xd34d34d3 + (C[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;\n      C[5] = C[5] + 0x34d34d34 + (C[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;\n      C[6] = C[6] + 0x4d34d34d + (C[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;\n      C[7] = C[7] + 0xd34d34d3 + (C[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;\n      this._b = C[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;\n\n      // Calculate the g-values\n      for (var i = 0; i < 8; i++) {\n        var gx = X[i] + C[i];\n\n        // Construct high and low argument for squaring\n        var ga = gx & 0xffff;\n        var gb = gx >>> 16;\n\n        // Calculate high and low result of squaring\n        var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;\n        var gl = ((gx & 0xffff0000) * gx | 0) + ((gx & 0x0000ffff) * gx | 0);\n\n        // High XOR low\n        G[i] = gh ^ gl;\n      }\n\n      // Calculate new state values\n      X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;\n      X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;\n      X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;\n      X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;\n      X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;\n      X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;\n      X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;\n      X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;\n    }\n\n    /**\n       * Shortcut functions to the cipher's object interface.\n       *\n       * @example\n       *\n       *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);\n       *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);\n       */\n    C.Rabbit = StreamCipher._createHelper(Rabbit);\n  })();\n\n\n  /**\n         * Counter block mode.\n         */\n  CryptoJS.mode.CTR = function () {\n    var CTR = CryptoJS.lib.BlockCipherMode.extend();\n\n    var Encryptor = CTR.Encryptor = CTR.extend({\n      processBlock: function processBlock(words, offset) {\n        // Shortcuts\n        var cipher = this._cipher;\n        var blockSize = cipher.blockSize;\n        var iv = this._iv;\n        var counter = this._counter;\n\n        // Generate keystream\n        if (iv) {\n          counter = this._counter = iv.slice(0);\n\n          // Remove IV for subsequent blocks\n          this._iv = undefined;\n        }\n        var keystream = counter.slice(0);\n        cipher.encryptBlock(keystream, 0);\n\n        // Increment counter\n        counter[blockSize - 1] = counter[blockSize - 1] + 1 | 0;\n\n        // Encrypt\n        for (var i = 0; i < blockSize; i++) {\n          words[offset + i] ^= keystream[i];\n        }\n      } });\n\n\n    CTR.Decryptor = Encryptor;\n\n    return CTR;\n  }();\n\n\n  (function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var StreamCipher = C_lib.StreamCipher;\n    var C_algo = C.algo;\n\n    // Reusable objects\n    var S = [];\n    var C_ = [];\n    var G = [];\n\n    /**\n                 * Rabbit stream cipher algorithm.\n                 *\n                 * This is a legacy version that neglected to convert the key to little-endian.\n                 * This error doesn't affect the cipher's security,\n                 * but it does affect its compatibility with other implementations.\n                 */\n    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({\n      _doReset: function _doReset() {\n        // Shortcuts\n        var K = this._key.words;\n        var iv = this.cfg.iv;\n\n        // Generate initial state values\n        var X = this._X = [\n        K[0], K[3] << 16 | K[2] >>> 16,\n        K[1], K[0] << 16 | K[3] >>> 16,\n        K[2], K[1] << 16 | K[0] >>> 16,\n        K[3], K[2] << 16 | K[1] >>> 16];\n\n\n        // Generate initial counter values\n        var C = this._C = [\n        K[2] << 16 | K[2] >>> 16, K[0] & 0xffff0000 | K[1] & 0x0000ffff,\n        K[3] << 16 | K[3] >>> 16, K[1] & 0xffff0000 | K[2] & 0x0000ffff,\n        K[0] << 16 | K[0] >>> 16, K[2] & 0xffff0000 | K[3] & 0x0000ffff,\n        K[1] << 16 | K[1] >>> 16, K[3] & 0xffff0000 | K[0] & 0x0000ffff];\n\n\n        // Carry bit\n        this._b = 0;\n\n        // Iterate the system four times\n        for (var i = 0; i < 4; i++) {\n          nextState.call(this);\n        }\n\n        // Modify the counters\n        for (var i = 0; i < 8; i++) {\n          C[i] ^= X[i + 4 & 7];\n        }\n\n        // IV setup\n        if (iv) {\n          // Shortcuts\n          var IV = iv.words;\n          var IV_0 = IV[0];\n          var IV_1 = IV[1];\n\n          // Generate four subvectors\n          var i0 = (IV_0 << 8 | IV_0 >>> 24) & 0x00ff00ff | (IV_0 << 24 | IV_0 >>> 8) & 0xff00ff00;\n          var i2 = (IV_1 << 8 | IV_1 >>> 24) & 0x00ff00ff | (IV_1 << 24 | IV_1 >>> 8) & 0xff00ff00;\n          var i1 = i0 >>> 16 | i2 & 0xffff0000;\n          var i3 = i2 << 16 | i0 & 0x0000ffff;\n\n          // Modify counter values\n          C[0] ^= i0;\n          C[1] ^= i1;\n          C[2] ^= i2;\n          C[3] ^= i3;\n          C[4] ^= i0;\n          C[5] ^= i1;\n          C[6] ^= i2;\n          C[7] ^= i3;\n\n          // Iterate the system four times\n          for (var i = 0; i < 4; i++) {\n            nextState.call(this);\n          }\n        }\n      },\n\n      _doProcessBlock: function _doProcessBlock(M, offset) {\n        // Shortcut\n        var X = this._X;\n\n        // Iterate the system\n        nextState.call(this);\n\n        // Generate four keystream words\n        S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;\n        S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;\n        S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;\n        S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;\n\n        for (var i = 0; i < 4; i++) {\n          // Swap endian\n          S[i] = (S[i] << 8 | S[i] >>> 24) & 0x00ff00ff |\n          (S[i] << 24 | S[i] >>> 8) & 0xff00ff00;\n\n          // Encrypt\n          M[offset + i] ^= S[i];\n        }\n      },\n\n      blockSize: 128 / 32,\n\n      ivSize: 64 / 32 });\n\n\n    function nextState() {\n      // Shortcuts\n      var X = this._X;\n      var C = this._C;\n\n      // Save old counter values\n      for (var i = 0; i < 8; i++) {\n        C_[i] = C[i];\n      }\n\n      // Calculate new counter values\n      C[0] = C[0] + 0x4d34d34d + this._b | 0;\n      C[1] = C[1] + 0xd34d34d3 + (C[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;\n      C[2] = C[2] + 0x34d34d34 + (C[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;\n      C[3] = C[3] + 0x4d34d34d + (C[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;\n      C[4] = C[4] + 0xd34d34d3 + (C[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;\n      C[5] = C[5] + 0x34d34d34 + (C[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;\n      C[6] = C[6] + 0x4d34d34d + (C[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;\n      C[7] = C[7] + 0xd34d34d3 + (C[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;\n      this._b = C[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;\n\n      // Calculate the g-values\n      for (var i = 0; i < 8; i++) {\n        var gx = X[i] + C[i];\n\n        // Construct high and low argument for squaring\n        var ga = gx & 0xffff;\n        var gb = gx >>> 16;\n\n        // Calculate high and low result of squaring\n        var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;\n        var gl = ((gx & 0xffff0000) * gx | 0) + ((gx & 0x0000ffff) * gx | 0);\n\n        // High XOR low\n        G[i] = gh ^ gl;\n      }\n\n      // Calculate new state values\n      X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;\n      X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;\n      X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;\n      X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;\n      X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;\n      X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;\n      X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;\n      X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;\n    }\n\n    /**\n       * Shortcut functions to the cipher's object interface.\n       *\n       * @example\n       *\n       *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);\n       *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);\n       */\n    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);\n  })();\n\n\n  /**\n         * Zero padding strategy.\n         */\n  CryptoJS.pad.ZeroPadding = {\n    pad: function pad(data, blockSize) {\n      // Shortcut\n      var blockSizeBytes = blockSize * 4;\n\n      // Pad\n      data.clamp();\n      data.sigBytes += blockSizeBytes - (data.sigBytes % blockSizeBytes || blockSizeBytes);\n    },\n\n    unpad: function unpad(data) {\n      // Shortcut\n      var dataWords = data.words;\n\n      // Unpad\n      var i = data.sigBytes - 1;\n      while (!(dataWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff)) {\n        i--;\n      }\n      data.sigBytes = i + 1;\n    } };\n\n\n\n  return CryptoJS;\n\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///15\n");

/***/ }),

/***/ 16:
/*!*********************************************************************************!*\
  !*** C:/Users/DELL/Documents/HBuilderProjects/CanNengApp/static/js/errorMsg.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;function judgeError(msgCode, msg) {\n  // if(msgCode=='10004'||msgCode=='10006'||msgCode=='10007'||msgCode=='10009'||msgCode=='10011'){\n  // \treturn '请检查输入'\n  // }else \n  if (msgCode == '10031') {\n    return '未注册的手机号';\n  } else if (msgCode == '10022' || msgCode == '10025') {\n    return '验证码错误';\n  } else if (msgCode == '10019') {\n    return '推荐码不正确';\n  } else if (msgCode == '10003' || msgCode == '10013' || msgCode == '10021' || msgCode == '10028') {\n    return '请联系管理员';\n  } else if (msgCode == '10005') {\n    return '账户被锁定30分钟';\n  } else if (msgCode == '10010' || msgCode == '10111' || msgCode == '10172') {\n    return '用户不存在';\n  } else if (msgCode == '10016' || msgCode == '10018' || msgCode == '10027') {\n    return '网络异常，请重试';\n  } else if (msgCode == '10030') {\n    return '网络异常，请重试';\n  } else if (msgCode == '10112') {\n    return '未找到该暂态事件信息';\n  } else if (msgCode == '10173') {\n    return '未找到该终端消息';\n  } else {\n    return msg;\n  }\n}var _default =\n{\n  judgeError: judgeError };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vc3RhdGljL2pzL2Vycm9yTXNnLmpzIl0sIm5hbWVzIjpbImp1ZGdlRXJyb3IiLCJtc2dDb2RlIiwibXNnIl0sIm1hcHBpbmdzIjoidUZBQUEsU0FBU0EsVUFBVCxDQUFvQkMsT0FBcEIsRUFBNEJDLEdBQTVCLEVBQWdDO0FBQy9CO0FBQ0E7QUFDQTtBQUNBLE1BQUdELE9BQU8sSUFBRSxPQUFaLEVBQW9CO0FBQ25CLFdBQU8sU0FBUDtBQUNBLEdBRkQsTUFFTSxJQUFHQSxPQUFPLElBQUUsT0FBVCxJQUFrQkEsT0FBTyxJQUFFLE9BQTlCLEVBQXNDO0FBQzNDLFdBQU8sT0FBUDtBQUNBLEdBRkssTUFFQSxJQUFHQSxPQUFPLElBQUUsT0FBWixFQUFvQjtBQUN6QixXQUFPLFFBQVA7QUFDQSxHQUZLLE1BRUEsSUFBR0EsT0FBTyxJQUFFLE9BQVQsSUFBa0JBLE9BQU8sSUFBRSxPQUEzQixJQUFvQ0EsT0FBTyxJQUFFLE9BQTdDLElBQXNEQSxPQUFPLElBQUUsT0FBbEUsRUFBMEU7QUFDL0UsV0FBTyxRQUFQO0FBQ0EsR0FGSyxNQUVBLElBQUdBLE9BQU8sSUFBRSxPQUFaLEVBQW9CO0FBQ3pCLFdBQU8sV0FBUDtBQUNBLEdBRkssTUFFQSxJQUFHQSxPQUFPLElBQUUsT0FBVCxJQUFrQkEsT0FBTyxJQUFFLE9BQTNCLElBQW9DQSxPQUFPLElBQUUsT0FBaEQsRUFBd0Q7QUFDN0QsV0FBTyxPQUFQO0FBQ0EsR0FGSyxNQUVBLElBQUdBLE9BQU8sSUFBRSxPQUFULElBQWtCQSxPQUFPLElBQUUsT0FBM0IsSUFBb0NBLE9BQU8sSUFBRSxPQUFoRCxFQUF3RDtBQUM3RCxXQUFPLFVBQVA7QUFDQSxHQUZLLE1BRUEsSUFBR0EsT0FBTyxJQUFFLE9BQVosRUFBb0I7QUFDekIsV0FBTyxVQUFQO0FBQ0EsR0FGSyxNQUVBLElBQUdBLE9BQU8sSUFBRSxPQUFaLEVBQW9CO0FBQ3pCLFdBQU8sWUFBUDtBQUNBLEdBRkssTUFFQSxJQUFHQSxPQUFPLElBQUUsT0FBWixFQUFvQjtBQUN6QixXQUFPLFVBQVA7QUFDQSxHQUZLLE1BRUQ7QUFDSixXQUFPQyxHQUFQO0FBQ0E7QUFDRCxDO0FBQ2E7QUFDYkYsWUFBVSxFQUFWQSxVQURhLEUiLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBqdWRnZUVycm9yKG1zZ0NvZGUsbXNnKXtcclxuXHQvLyBpZihtc2dDb2RlPT0nMTAwMDQnfHxtc2dDb2RlPT0nMTAwMDYnfHxtc2dDb2RlPT0nMTAwMDcnfHxtc2dDb2RlPT0nMTAwMDknfHxtc2dDb2RlPT0nMTAwMTEnKXtcclxuXHQvLyBcdHJldHVybiAn6K+35qOA5p+l6L6T5YWlJ1xyXG5cdC8vIH1lbHNlIFxyXG5cdGlmKG1zZ0NvZGU9PScxMDAzMScpe1xyXG5cdFx0cmV0dXJuICfmnKrms6jlhoznmoTmiYvmnLrlj7cnXHJcblx0fWVsc2UgaWYobXNnQ29kZT09JzEwMDIyJ3x8bXNnQ29kZT09JzEwMDI1Jyl7XHJcblx0XHRyZXR1cm4gJ+mqjOivgeeggemUmeivrydcclxuXHR9ZWxzZSBpZihtc2dDb2RlPT0nMTAwMTknKXtcclxuXHRcdHJldHVybiAn5o6o6I2Q56CB5LiN5q2j56GuJ1xyXG5cdH1lbHNlIGlmKG1zZ0NvZGU9PScxMDAwMyd8fG1zZ0NvZGU9PScxMDAxMyd8fG1zZ0NvZGU9PScxMDAyMSd8fG1zZ0NvZGU9PScxMDAyOCcpe1xyXG5cdFx0cmV0dXJuICfor7fogZTns7vnrqHnkIblkZgnXHJcblx0fWVsc2UgaWYobXNnQ29kZT09JzEwMDA1Jyl7XHJcblx0XHRyZXR1cm4gJ+i0puaIt+iiq+mUgeWumjMw5YiG6ZKfJ1xyXG5cdH1lbHNlIGlmKG1zZ0NvZGU9PScxMDAxMCd8fG1zZ0NvZGU9PScxMDExMSd8fG1zZ0NvZGU9PScxMDE3Micpe1xyXG5cdFx0cmV0dXJuICfnlKjmiLfkuI3lrZjlnKgnXHJcblx0fWVsc2UgaWYobXNnQ29kZT09JzEwMDE2J3x8bXNnQ29kZT09JzEwMDE4J3x8bXNnQ29kZT09JzEwMDI3Jyl7XHJcblx0XHRyZXR1cm4gJ+e9kee7nOW8guW4uO+8jOivt+mHjeivlSdcclxuXHR9ZWxzZSBpZihtc2dDb2RlPT0nMTAwMzAnKXtcclxuXHRcdHJldHVybiAn572R57uc5byC5bi477yM6K+36YeN6K+VJ1xyXG5cdH1lbHNlIGlmKG1zZ0NvZGU9PScxMDExMicpe1xyXG5cdFx0cmV0dXJuICfmnKrmib7liLDor6XmmoLmgIHkuovku7bkv6Hmga8nXHJcblx0fWVsc2UgaWYobXNnQ29kZT09JzEwMTczJyl7XHJcblx0XHRyZXR1cm4gJ+acquaJvuWIsOivpee7iOerr+a2iOaBrydcclxuXHR9ZWxzZXtcclxuXHRcdHJldHVybiBtc2dcclxuXHR9XHJcbn1cclxuZXhwb3J0IGRlZmF1bHR7XHJcblx0anVkZ2VFcnJvclxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///16\n");

/***/ }),

/***/ 2:
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNENBQTRDOztBQUU1QyIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ }),

/***/ 3:
/*!******************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/mp-vue/dist/mp.runtime.esm.js ***!
  \******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {/*!\n * Vue.js v2.6.11\n * (c) 2014-2020 Evan You\n * Released under the MIT License.\n */\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n// These helpers produce better VM code in JS engines due to their\n// explicitness and function inlining.\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive.\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    // $flow-disable-line\n    typeof value === 'symbol' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Get the raw type string of a value, e.g., [object Object].\n */\nvar _toString = Object.prototype.toString;\n\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(String(val));\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\nfunction isPromise (val) {\n  return (\n    isDef(val) &&\n    typeof val.then === 'function' &&\n    typeof val.catch === 'function'\n  )\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert an input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if an attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n\n/**\n * Remove an item from an array.\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether an object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind polyfill for environments that do not support it,\n * e.g., PhantomJS 1.x. Technically, we don't need this anymore\n * since native bind is now performant enough in most browsers.\n * But removing it would mean breaking code that was able to run in\n * PhantomJS 1.x, so this must be kept for backward compatibility.\n */\n\n/* istanbul ignore next */\nfunction polyfillBind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n\n  boundFn._length = fn.length;\n  return boundFn\n}\n\nfunction nativeBind (fn, ctx) {\n  return fn.bind(ctx)\n}\n\nvar bind = Function.prototype.bind\n  ? nativeBind\n  : polyfillBind;\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/* eslint-disable no-unused-vars */\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/* eslint-enable no-unused-vars */\n\n/**\n * Return the same value.\n */\nvar identity = function (_) { return _; };\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (a instanceof Date && b instanceof Date) {\n        return a.getTime() === b.getTime()\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\n/**\n * Return the first index at which a loosely equal value can be\n * found in the array (if value is a plain object, the array must\n * contain an object of the same shape), or -1 if it is not present.\n */\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated',\n  'errorCaptured',\n  'serverPrefetch'\n];\n\n/*  */\n\n\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  // $flow-disable-line\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: \"development\" !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: \"development\" !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  // $flow-disable-line\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Perform updates asynchronously. Intended to be used by Vue Test Utils\n   * This will significantly reduce performance if set to false.\n   */\n  async: true,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n});\n\n/*  */\n\n/**\n * unicode letters used for parsing html tags, component names and property paths.\n * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname\n * skipping \\u10000-\\uEFFFF due to it freezing up PhantomJS\n */\nvar unicodeRegExp = /a-zA-Z\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD/;\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = new RegExp((\"[^\" + (unicodeRegExp.source) + \".$_\\\\d]\"));\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\nvar weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');\nvar isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\nvar isPhantomJS = UA && /phantomjs/.test(UA);\nvar isFF = UA && UA.match(/firefox\\/(\\d+)/);\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && !inWeex && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\nvar _Set;\n/* istanbul ignore if */ // $flow-disable-line\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = /*@__PURE__*/(function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar generateComponentTrace = (noop); // work around flow check\nvar formatComponentName = (noop);\n\nif (true) {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    var trace = vm ? generateComponentTrace(vm) : '';\n\n    if (config.warnHandler) {\n      config.warnHandler.call(null, msg, vm, trace);\n    } else if (hasConsole && (!config.silent)) {\n      console.error((\"[Vue warn]: \" + msg + trace));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    {\n      if(vm.$scope && vm.$scope.is){\n        return vm.$scope.is\n      }\n    }\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var options = typeof vm === 'function' && vm.cid != null\n      ? vm.options\n      : vm._isVue\n        ? vm.$options || vm.constructor.options\n        : vm;\n    var name = options.name || options._componentTag;\n    var file = options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  // fixed by xxxxxx (nvue vuex)\n  /* eslint-disable no-undef */\n  if(typeof SharedObject !== 'undefined'){\n    this.id = SharedObject.uid++;\n  } else {\n    this.id = uid++;\n  }\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.SharedObject.target) {\n    Dep.SharedObject.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  if ( true && !config.async) {\n    // subs aren't sorted in scheduler if not running async\n    // we need to sort them now to make sure they fire in correct\n    // order\n    subs.sort(function (a, b) { return a.id - b.id; });\n  }\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// The current target watcher being evaluated.\n// This is globally unique because only one watcher\n// can be evaluated at a time.\n// fixed by xxxxxx (nvue shared vuex)\n/* eslint-disable no-undef */\nDep.SharedObject = typeof SharedObject !== 'undefined' ? SharedObject : {};\nDep.SharedObject.target = null;\nDep.SharedObject.targetStack = [];\n\nfunction pushTarget (target) {\n  Dep.SharedObject.targetStack.push(target);\n  Dep.SharedObject.target = target;\n}\n\nfunction popTarget () {\n  Dep.SharedObject.targetStack.pop();\n  Dep.SharedObject.target = Dep.SharedObject.targetStack[Dep.SharedObject.targetStack.length - 1];\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.fnContext = undefined;\n  this.fnOptions = undefined;\n  this.fnScopeId = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: { configurable: true } };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    // #7975\n    // clone children array to avoid mutating original in case of cloning\n    // a child.\n    vnode.children && vnode.children.slice(),\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.fnContext = vnode.fnContext;\n  cloned.fnOptions = vnode.fnOptions;\n  cloned.fnScopeId = vnode.fnScopeId;\n  cloned.asyncMeta = vnode.asyncMeta;\n  cloned.isCloned = true;\n  return cloned\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);\n\nvar methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n];\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * In some cases we may want to disable observation inside a component's\n * update computation.\n */\nvar shouldObserve = true;\n\nfunction toggleObserving (value) {\n  shouldObserve = value;\n}\n\n/**\n * Observer class that is attached to each observed\n * object. Once attached, the observer converts the target\n * object's property keys into getter/setters that\n * collect dependencies and dispatch updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    if (hasProto) {\n      {// fixed by xxxxxx 微信小程序使用 plugins 之后，数组方法被直接挂载到了数组对象上，需要执行 copyAugment 逻辑\n        if(value.push !== value.__proto__.push){\n          copyAugment(value, arrayMethods, arrayKeys);\n        } else {\n          protoAugment(value, arrayMethods);\n        }\n      }\n    } else {\n      copyAugment(value, arrayMethods, arrayKeys);\n    }\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through all properties and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive$$1(obj, keys[i]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment a target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment a target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive$$1 (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n  if ((!getter || setter) && arguments.length === 2) {\n    val = obj[key];\n  }\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.SharedObject.target) { // fixed by xxxxxx\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if ( true && customSetter) {\n        customSetter();\n      }\n      // #7981: for accessor properties without setter\n      if (getter && !setter) { return }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot set reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot delete reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (true) {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n\n  var keys = hasSymbol\n    ? Reflect.ownKeys(from)\n    : Object.keys(from);\n\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    // in case the object is already observed...\n    if (key === '__ob__') { continue }\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (\n      toVal !== fromVal &&\n      isPlainObject(toVal) &&\n      isPlainObject(fromVal)\n    ) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this, this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\n      )\n    }\n  } else {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm, vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm, vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n       true && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  var res = childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal;\n  return res\n    ? dedupeHooks(res)\n    : res\n}\n\nfunction dedupeHooks (hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  var res = Object.create(parentVal || null);\n  if (childVal) {\n     true && assertObjectType(key, childVal, vm);\n    return extend(res, childVal)\n  } else {\n    return res\n  }\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (true) {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  if (childVal && \"development\" !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    validateComponentName(key);\n  }\n}\n\nfunction validateComponentName (name) {\n  if (!new RegExp((\"^[a-zA-Z][\\\\-\\\\.0-9_\" + (unicodeRegExp.source) + \"]*$\")).test(name)) {\n    warn(\n      'Invalid component name: \"' + name + '\". Component names ' +\n      'should conform to valid custom element name in html5 specification.'\n    );\n  }\n  if (isBuiltInTag(name) || config.isReservedTag(name)) {\n    warn(\n      'Do not use built-in or reserved HTML elements as component ' +\n      'id: ' + name\n    );\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options, vm) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (true) {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(props)) + \".\",\n      vm\n    );\n  }\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options, vm) {\n  var inject = options.inject;\n  if (!inject) { return }\n  var normalized = options.inject = {};\n  if (Array.isArray(inject)) {\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = { from: inject[i] };\n    }\n  } else if (isPlainObject(inject)) {\n    for (var key in inject) {\n      var val = inject[key];\n      normalized[key] = isPlainObject(val)\n        ? extend({ from: key }, val)\n        : { from: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(inject)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def$$1 = dirs[key];\n      if (typeof def$$1 === 'function') {\n        dirs[key] = { bind: def$$1, update: def$$1 };\n      }\n    }\n  }\n}\n\nfunction assertObjectType (name, value, vm) {\n  if (!isPlainObject(value)) {\n    warn(\n      \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\n      \"but got \" + (toRawType(value)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (true) {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child, vm);\n  normalizeInject(child, vm);\n  normalizeDirectives(child);\n\n  // Apply extends and mixins on the child options,\n  // but only if it is a raw options object that isn't\n  // the result of another mergeOptions call.\n  // Only merged options has the _base property.\n  if (!child._base) {\n    if (child.extends) {\n      parent = mergeOptions(parent, child.extends, vm);\n    }\n    if (child.mixins) {\n      for (var i = 0, l = child.mixins.length; i < l; i++) {\n        parent = mergeOptions(parent, child.mixins[i], vm);\n      }\n    }\n  }\n\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if ( true && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\n\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // boolean casting\n  var booleanIndex = getTypeIndex(Boolean, prop.type);\n  if (booleanIndex > -1) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (value === '' || value === hyphenate(key)) {\n      // only cast empty string / same name to boolean if\n      // boolean has higher priority\n      var stringIndex = getTypeIndex(String, prop.type);\n      if (stringIndex < 0 || booleanIndex < stringIndex) {\n        value = true;\n      }\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldObserve = shouldObserve;\n    toggleObserving(true);\n    observe(value);\n    toggleObserving(prevShouldObserve);\n  }\n  if (\n    true\n  ) {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if ( true && isObject(def)) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n\n  if (!valid) {\n    warn(\n      getInvalidTypeMessage(name, value, expectedTypes),\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isSameType (a, b) {\n  return getType(a) === getType(b)\n}\n\nfunction getTypeIndex (type, expectedTypes) {\n  if (!Array.isArray(expectedTypes)) {\n    return isSameType(expectedTypes, type) ? 0 : -1\n  }\n  for (var i = 0, len = expectedTypes.length; i < len; i++) {\n    if (isSameType(expectedTypes[i], type)) {\n      return i\n    }\n  }\n  return -1\n}\n\nfunction getInvalidTypeMessage (name, value, expectedTypes) {\n  var message = \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\n    \" Expected \" + (expectedTypes.map(capitalize).join(', '));\n  var expectedType = expectedTypes[0];\n  var receivedType = toRawType(value);\n  var expectedValue = styleValue(value, expectedType);\n  var receivedValue = styleValue(value, receivedType);\n  // check if we need to specify expected value\n  if (expectedTypes.length === 1 &&\n      isExplicable(expectedType) &&\n      !isBoolean(expectedType, receivedType)) {\n    message += \" with value \" + expectedValue;\n  }\n  message += \", got \" + receivedType + \" \";\n  // check if we need to specify received value\n  if (isExplicable(receivedType)) {\n    message += \"with value \" + receivedValue + \".\";\n  }\n  return message\n}\n\nfunction styleValue (value, type) {\n  if (type === 'String') {\n    return (\"\\\"\" + value + \"\\\"\")\n  } else if (type === 'Number') {\n    return (\"\" + (Number(value)))\n  } else {\n    return (\"\" + value)\n  }\n}\n\nfunction isExplicable (value) {\n  var explicitTypes = ['string', 'number', 'boolean'];\n  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })\n}\n\nfunction isBoolean () {\n  var args = [], len = arguments.length;\n  while ( len-- ) args[ len ] = arguments[ len ];\n\n  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.\n  // See: https://github.com/vuejs/vuex/issues/1505\n  pushTarget();\n  try {\n    if (vm) {\n      var cur = vm;\n      while ((cur = cur.$parent)) {\n        var hooks = cur.$options.errorCaptured;\n        if (hooks) {\n          for (var i = 0; i < hooks.length; i++) {\n            try {\n              var capture = hooks[i].call(cur, err, vm, info) === false;\n              if (capture) { return }\n            } catch (e) {\n              globalHandleError(e, cur, 'errorCaptured hook');\n            }\n          }\n        }\n      }\n    }\n    globalHandleError(err, vm, info);\n  } finally {\n    popTarget();\n  }\n}\n\nfunction invokeWithErrorHandling (\n  handler,\n  context,\n  args,\n  vm,\n  info\n) {\n  var res;\n  try {\n    res = args ? handler.apply(context, args) : handler.call(context);\n    if (res && !res._isVue && isPromise(res) && !res._handled) {\n      res.catch(function (e) { return handleError(e, vm, info + \" (Promise/async)\"); });\n      // issue #9511\n      // avoid catch triggering multiple times when nested calls\n      res._handled = true;\n    }\n  } catch (e) {\n    handleError(e, vm, info);\n  }\n  return res\n}\n\nfunction globalHandleError (err, vm, info) {\n  if (config.errorHandler) {\n    try {\n      return config.errorHandler.call(null, err, vm, info)\n    } catch (e) {\n      // if the user intentionally throws the original error in the handler,\n      // do not log it twice\n      if (e !== err) {\n        logError(e, null, 'config.errorHandler');\n      }\n    }\n  }\n  logError(err, vm, info);\n}\n\nfunction logError (err, vm, info) {\n  if (true) {\n    warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n  }\n  /* istanbul ignore else */\n  if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n    console.error(err);\n  } else {\n    throw err\n  }\n}\n\n/*  */\n\nvar callbacks = [];\nvar pending = false;\n\nfunction flushCallbacks () {\n  pending = false;\n  var copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (var i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// Here we have async deferring wrappers using microtasks.\n// In 2.5 we used (macro) tasks (in combination with microtasks).\n// However, it has subtle problems when state is changed right before repaint\n// (e.g. #6813, out-in transitions).\n// Also, using (macro) tasks in event handler would cause some weird behaviors\n// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).\n// So we now use microtasks everywhere, again.\n// A major drawback of this tradeoff is that there are some scenarios\n// where microtasks have too high a priority and fire in between supposedly\n// sequential events (e.g. #4521, #6690, which have workarounds)\n// or even between bubbling of the same event (#6566).\nvar timerFunc;\n\n// The nextTick behavior leverages the microtask queue, which can be accessed\n// via either native Promise.then or MutationObserver.\n// MutationObserver has wider support, however it is seriously bugged in\n// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n// completely stops working after triggering a few times... so, if native\n// Promise is available, we will use it:\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  var p = Promise.resolve();\n  timerFunc = function () {\n    p.then(flushCallbacks);\n    // In problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) { setTimeout(noop); }\n  };\n} else if (!isIE && typeof MutationObserver !== 'undefined' && (\n  isNative(MutationObserver) ||\n  // PhantomJS and iOS 7.x\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  // Use MutationObserver where native Promise is not available,\n  // e.g. PhantomJS, iOS7, Android 4.4\n  // (#6466 MutationObserver is unreliable in IE11)\n  var counter = 1;\n  var observer = new MutationObserver(flushCallbacks);\n  var textNode = document.createTextNode(String(counter));\n  observer.observe(textNode, {\n    characterData: true\n  });\n  timerFunc = function () {\n    counter = (counter + 1) % 2;\n    textNode.data = String(counter);\n  };\n} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  // Fallback to setImmediate.\n  // Technically it leverages the (macro) task queue,\n  // but it is still a better choice than setTimeout.\n  timerFunc = function () {\n    setImmediate(flushCallbacks);\n  };\n} else {\n  // Fallback to setTimeout.\n  timerFunc = function () {\n    setTimeout(flushCallbacks, 0);\n  };\n}\n\nfunction nextTick (cb, ctx) {\n  var _resolve;\n  callbacks.push(function () {\n    if (cb) {\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n  if (!pending) {\n    pending = true;\n    timerFunc();\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve) {\n      _resolve = resolve;\n    })\n  }\n}\n\n/*  */\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (true) {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      'referenced during render. Make sure that this property is reactive, ' +\n      'either in the data option, or for class-based components, by ' +\n      'initializing the property. ' +\n      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',\n      target\n    );\n  };\n\n  var warnReservedPrefix = function (target, key) {\n    warn(\n      \"Property \\\"\" + key + \"\\\" must be accessed with \\\"$data.\" + key + \"\\\" because \" +\n      'properties starting with \"$\" or \"_\" are not proxied in the Vue instance to ' +\n      'prevent conflicts with Vue internals. ' +\n      'See: https://vuejs.org/v2/api/#data',\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' && isNative(Proxy);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) ||\n        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));\n      if (!has && !isAllowed) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar seenObjects = new _Set();\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nfunction traverse (val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\nvar mark;\nvar measure;\n\nif (true) {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      // perf.clearMeasures(name)\n    };\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns, vm) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, \"v-on handler\");\n      }\n    } else {\n      // return handler return value for single handlers\n      return invokeWithErrorHandling(fns, null, arguments, vm, \"v-on handler\")\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  createOnceHandler,\n  vm\n) {\n  var name, def$$1, cur, old, event;\n  for (name in on) {\n    def$$1 = cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    if (isUndef(cur)) {\n       true && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur, vm);\n      }\n      if (isTrue(event.once)) {\n        cur = on[name] = createOnceHandler(event.name, cur, event.capture);\n      }\n      add(event.name, cur, event.capture, event.passive, event.params);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\n// fixed by xxxxxx (mp properties)\r\nfunction extractPropertiesFromVNodeData(data, Ctor, res, context) {\r\n  var propOptions = Ctor.options.mpOptions && Ctor.options.mpOptions.properties;\r\n  if (isUndef(propOptions)) {\r\n    return res\r\n  }\n  var externalClasses = Ctor.options.mpOptions.externalClasses || [];\r\n  var attrs = data.attrs;\n  var props = data.props;\r\n  if (isDef(attrs) || isDef(props)) {\r\n    for (var key in propOptions) {\r\n      var altKey = hyphenate(key);\n      var result = checkProp(res, props, key, altKey, true) ||\n          checkProp(res, attrs, key, altKey, false);\n      // externalClass\n      if (\n        result &&\n        res[key] &&\n        externalClasses.indexOf(altKey) !== -1 &&\n        context[camelize(res[key])]\n      ) {\n        // 赋值 externalClass 真正的值(模板里 externalClass 的值可能是字符串)\n        res[key] = context[camelize(res[key])];\n      }\r\n    }\r\n  }\r\n  return res\r\n}\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag,\n  context// fixed by xxxxxx\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    // fixed by xxxxxx\n    return extractPropertiesFromVNodeData(data, Ctor, {}, context)\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (true) {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  // fixed by xxxxxx\n  return extractPropertiesFromVNodeData(data, Ctor, res, context)\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, lastIndex, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    lastIndex = res.length - 1;\n    last = res[lastIndex];\n    //  nested\n    if (Array.isArray(c)) {\n      if (c.length > 0) {\n        c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\n        // merge adjacent text nodes\n        if (isTextNode(c[0]) && isTextNode(last)) {\n          res[lastIndex] = createTextVNode(last.text + (c[0]).text);\n          c.shift();\n        }\n        res.push.apply(res, c);\n      }\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        res[lastIndex] = createTextVNode(last.text + c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[lastIndex] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    toggleObserving(false);\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (true) {\n        defineReactive$$1(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {}\n    });\n    toggleObserving(true);\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n      ? Reflect.ownKeys(inject)\n      : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      // #6574 in case the inject object is observed...\n      if (key === '__ob__') { continue }\n      var provideKey = inject[key].from;\n      var source = vm;\n      while (source) {\n        if (source._provided && hasOwn(source._provided, provideKey)) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          var provideDefault = inject[key].default;\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault;\n        } else if (true) {\n          warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n        }\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\n\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  if (!children || !children.length) {\n    return {}\n  }\n  var slots = {};\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.fnContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children || []);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      // fixed by xxxxxx 临时 hack 掉 uni-app 中的异步 name slot page\n      if(child.asyncMeta && child.asyncMeta.data && child.asyncMeta.data.slot === 'page'){\n        (slots['page'] || (slots['page'] = [])).push(child);\n      }else{\n        (slots.default || (slots.default = [])).push(child);\n      }\n    }\n  }\n  // ignore slots that contains only whitespace\n  for (var name$1 in slots) {\n    if (slots[name$1].every(isWhitespace)) {\n      delete slots[name$1];\n    }\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return (node.isComment && !node.asyncFactory) || node.text === ' '\n}\n\n/*  */\n\nfunction normalizeScopedSlots (\n  slots,\n  normalSlots,\n  prevSlots\n) {\n  var res;\n  var hasNormalSlots = Object.keys(normalSlots).length > 0;\n  var isStable = slots ? !!slots.$stable : !hasNormalSlots;\n  var key = slots && slots.$key;\n  if (!slots) {\n    res = {};\n  } else if (slots._normalized) {\n    // fast path 1: child component re-render only, parent did not change\n    return slots._normalized\n  } else if (\n    isStable &&\n    prevSlots &&\n    prevSlots !== emptyObject &&\n    key === prevSlots.$key &&\n    !hasNormalSlots &&\n    !prevSlots.$hasNormal\n  ) {\n    // fast path 2: stable scoped slots w/ no normal slots to proxy,\n    // only need to normalize once\n    return prevSlots\n  } else {\n    res = {};\n    for (var key$1 in slots) {\n      if (slots[key$1] && key$1[0] !== '$') {\n        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);\n      }\n    }\n  }\n  // expose normal slots on scopedSlots\n  for (var key$2 in normalSlots) {\n    if (!(key$2 in res)) {\n      res[key$2] = proxyNormalSlot(normalSlots, key$2);\n    }\n  }\n  // avoriaz seems to mock a non-extensible $scopedSlots object\n  // and when that is passed down this would cause an error\n  if (slots && Object.isExtensible(slots)) {\n    (slots)._normalized = res;\n  }\n  def(res, '$stable', isStable);\n  def(res, '$key', key);\n  def(res, '$hasNormal', hasNormalSlots);\n  return res\n}\n\nfunction normalizeScopedSlot(normalSlots, key, fn) {\n  var normalized = function () {\n    var res = arguments.length ? fn.apply(null, arguments) : fn({});\n    res = res && typeof res === 'object' && !Array.isArray(res)\n      ? [res] // single vnode\n      : normalizeChildren(res);\n    return res && (\n      res.length === 0 ||\n      (res.length === 1 && res[0].isComment) // #9658\n    ) ? undefined\n      : res\n  };\n  // this is a slot using the new v-slot syntax without scope. although it is\n  // compiled as a scoped slot, render fn users would expect it to be present\n  // on this.$slots because the usage is semantically a normal slot.\n  if (fn.proxy) {\n    Object.defineProperty(normalSlots, key, {\n      get: normalized,\n      enumerable: true,\n      configurable: true\n    });\n  }\n  return normalized\n}\n\nfunction proxyNormalSlot(slots, key) {\n  return function () { return slots[key]; }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i, i, i); // fixed by xxxxxx\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i, i, i); // fixed by xxxxxx\n    }\n  } else if (isObject(val)) {\n    if (hasSymbol && val[Symbol.iterator]) {\n      ret = [];\n      var iterator = val[Symbol.iterator]();\n      var result = iterator.next();\n      while (!result.done) {\n        ret.push(render(result.value, ret.length, i++, i)); // fixed by xxxxxx\n        result = iterator.next();\n      }\n    } else {\n      keys = Object.keys(val);\n      ret = new Array(keys.length);\n      for (i = 0, l = keys.length; i < l; i++) {\n        key = keys[i];\n        ret[i] = render(val[key], key, i, i); // fixed by xxxxxx\n      }\n    }\n  }\n  if (!isDef(ret)) {\n    ret = [];\n  }\n  (ret)._isVList = true;\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  var nodes;\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      if ( true && !isObject(bindObject)) {\n        warn(\n          'slot v-bind without argument expects an Object',\n          this\n        );\n      }\n      props = extend(extend({}, bindObject), props);\n    }\n    // fixed by xxxxxx app-plus scopedSlot\n    nodes = scopedSlotFn(props, this, props._i) || fallback;\n  } else {\n    nodes = this.$slots[name] || fallback;\n  }\n\n  var target = props && props.slot;\n  if (target) {\n    return this.$createElement('template', { slot: target }, nodes)\n  } else {\n    return nodes\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\nfunction isKeyNotMatch (expect, actual) {\n  if (Array.isArray(expect)) {\n    return expect.indexOf(actual) === -1\n  } else {\n    return expect !== actual\n  }\n}\n\n/**\n * Runtime helper for checking keyCodes from config.\n * exposed as Vue.prototype._k\n * passing in eventKeyName as last argument separately for backwards compat\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInKeyCode,\n  eventKeyName,\n  builtInKeyName\n) {\n  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;\n  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {\n    return isKeyNotMatch(builtInKeyName, eventKeyName)\n  } else if (mappedKeyCode) {\n    return isKeyNotMatch(mappedKeyCode, eventKeyCode)\n  } else if (eventKeyName) {\n    return hyphenate(eventKeyName) !== key\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n       true && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        var camelizedKey = camelize(key);\n        var hyphenatedKey = hyphenate(key);\n        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var cached = this._staticTrees || (this._staticTrees = []);\n  var tree = cached[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree.\n  if (tree && !isInFor) {\n    return tree\n  }\n  // otherwise, render a fresh tree.\n  tree = cached[index] = this.$options.staticRenderFns[index].call(\n    this._renderProxy,\n    null,\n    this // for render fns generated for functional component templates\n  );\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n       true && warn(\n        'v-on without argument expects an Object value',\n        this\n      );\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(existing, ours) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res,\n  // the following are added in 2.6\n  hasDynamicKeys,\n  contentHashKey\n) {\n  res = res || { $stable: !hasDynamicKeys };\n  for (var i = 0; i < fns.length; i++) {\n    var slot = fns[i];\n    if (Array.isArray(slot)) {\n      resolveScopedSlots(slot, res, hasDynamicKeys);\n    } else if (slot) {\n      // marker for reverse proxying v-slot without scope on this.$slots\n      if (slot.proxy) {\n        slot.fn.proxy = true;\n      }\n      res[slot.key] = slot.fn;\n    }\n  }\n  if (contentHashKey) {\n    (res).$key = contentHashKey;\n  }\n  return res\n}\n\n/*  */\n\nfunction bindDynamicKeys (baseObj, values) {\n  for (var i = 0; i < values.length; i += 2) {\n    var key = values[i];\n    if (typeof key === 'string' && key) {\n      baseObj[values[i]] = values[i + 1];\n    } else if ( true && key !== '' && key !== null) {\n      // null is a special value for explicitly removing a binding\n      warn(\n        (\"Invalid value for dynamic directive argument (expected string or null): \" + key),\n        this\n      );\n    }\n  }\n  return baseObj\n}\n\n// helper to dynamically append modifier runtime markers to event names.\n// ensure only append when value is already string, otherwise it will be cast\n// to string and cause the type check to miss.\nfunction prependModifier (value, symbol) {\n  return typeof value === 'string' ? symbol + value : value\n}\n\n/*  */\n\nfunction installRenderHelpers (target) {\n  target._o = markOnce;\n  target._n = toNumber;\n  target._s = toString;\n  target._l = renderList;\n  target._t = renderSlot;\n  target._q = looseEqual;\n  target._i = looseIndexOf;\n  target._m = renderStatic;\n  target._f = resolveFilter;\n  target._k = checkKeyCodes;\n  target._b = bindObjectProps;\n  target._v = createTextVNode;\n  target._e = createEmptyVNode;\n  target._u = resolveScopedSlots;\n  target._g = bindObjectListeners;\n  target._d = bindDynamicKeys;\n  target._p = prependModifier;\n}\n\n/*  */\n\nfunction FunctionalRenderContext (\n  data,\n  props,\n  children,\n  parent,\n  Ctor\n) {\n  var this$1 = this;\n\n  var options = Ctor.options;\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var contextVm;\n  if (hasOwn(parent, '_uid')) {\n    contextVm = Object.create(parent);\n    // $flow-disable-line\n    contextVm._original = parent;\n  } else {\n    // the context vm passed in is a functional context as well.\n    // in this case we want to make sure we are able to get a hold to the\n    // real context instance.\n    contextVm = parent;\n    // $flow-disable-line\n    parent = parent._original;\n  }\n  var isCompiled = isTrue(options._compiled);\n  var needNormalization = !isCompiled;\n\n  this.data = data;\n  this.props = props;\n  this.children = children;\n  this.parent = parent;\n  this.listeners = data.on || emptyObject;\n  this.injections = resolveInject(options.inject, parent);\n  this.slots = function () {\n    if (!this$1.$slots) {\n      normalizeScopedSlots(\n        data.scopedSlots,\n        this$1.$slots = resolveSlots(children, parent)\n      );\n    }\n    return this$1.$slots\n  };\n\n  Object.defineProperty(this, 'scopedSlots', ({\n    enumerable: true,\n    get: function get () {\n      return normalizeScopedSlots(data.scopedSlots, this.slots())\n    }\n  }));\n\n  // support for compiled functional template\n  if (isCompiled) {\n    // exposing $options for renderStatic()\n    this.$options = options;\n    // pre-resolve slots for renderSlot()\n    this.$slots = this.slots();\n    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);\n  }\n\n  if (options._scopeId) {\n    this._c = function (a, b, c, d) {\n      var vnode = createElement(contextVm, a, b, c, d, needNormalization);\n      if (vnode && !Array.isArray(vnode)) {\n        vnode.fnScopeId = options._scopeId;\n        vnode.fnContext = parent;\n      }\n      return vnode\n    };\n  } else {\n    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };\n  }\n}\n\ninstallRenderHelpers(FunctionalRenderContext.prototype);\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  contextVm,\n  children\n) {\n  var options = Ctor.options;\n  var props = {};\n  var propOptions = options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n\n  var renderContext = new FunctionalRenderContext(\n    data,\n    props,\n    children,\n    contextVm,\n    Ctor\n  );\n\n  var vnode = options.render.call(null, renderContext._c, renderContext);\n\n  if (vnode instanceof VNode) {\n    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)\n  } else if (Array.isArray(vnode)) {\n    var vnodes = normalizeChildren(vnode) || [];\n    var res = new Array(vnodes.length);\n    for (var i = 0; i < vnodes.length; i++) {\n      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);\n    }\n    return res\n  }\n}\n\nfunction cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {\n  // #7817 clone node before setting fnContext, otherwise if the node is reused\n  // (e.g. it was from a cached normal slot) the fnContext causes named slots\n  // that should not be matched to match.\n  var clone = cloneVNode(vnode);\n  clone.fnContext = contextVm;\n  clone.fnOptions = options;\n  if (true) {\n    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;\n  }\n  if (data.slot) {\n    (clone.data || (clone.data = {})).slot = data.slot;\n  }\n  return clone\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n/*  */\n\n/*  */\n\n/*  */\n\n// inline hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (vnode, hydrating) {\n    if (\n      vnode.componentInstance &&\n      !vnode.componentInstance._isDestroyed &&\n      vnode.data.keepAlive\n    ) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    } else {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      callHook(componentInstance, 'onServiceCreated');\n      callHook(componentInstance, 'onServiceAttached');\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (true) {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag, context); // fixed by xxxxxx\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // install component management hooks onto the placeholder node\n  installComponentHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent // activeInstance in lifecycle state\n) {\n  var options = {\n    _isComponent: true,\n    _parentVnode: vnode,\n    parent: parent\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnode.componentOptions.Ctor(options)\n}\n\nfunction installComponentHooks (data) {\n  var hooks = data.hook || (data.hook = {});\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var existing = hooks[key];\n    var toMerge = componentVNodeHooks[key];\n    if (existing !== toMerge && !(existing && existing._merged)) {\n      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;\n    }\n  }\n}\n\nfunction mergeHook$1 (f1, f2) {\n  var merged = function (a, b) {\n    // flow complains about extra args which is why we use any\n    f1(a, b);\n    f2(a, b);\n  };\n  merged._merged = true;\n  return merged\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input'\n  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  var existing = on[event];\n  var callback = data.model.callback;\n  if (isDef(existing)) {\n    if (\n      Array.isArray(existing)\n        ? existing.indexOf(callback) === -1\n        : existing !== callback\n    ) {\n      on[event] = [callback].concat(existing);\n    }\n  } else {\n    on[event] = callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n     true && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if ( true &&\n    isDef(data) && isDef(data.key) && !isPrimitive(data.key)\n  ) {\n    {\n      warn(\n        'Avoid using non-primitive value as key, ' +\n        'use string/number value instead.',\n        context\n      );\n    }\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      if ( true && isDef(data) && isDef(data.nativeOn)) {\n        warn(\n          (\"The .native modifier for v-on is only valid on components but it was used on <\" + tag + \">.\"),\n          context\n        );\n      }\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (Array.isArray(vnode)) {\n    return vnode\n  } else if (isDef(vnode)) {\n    if (isDef(ns)) { applyNS(vnode, ns); }\n    if (isDef(data)) { registerDeepBindings(data); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns, force) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    ns = undefined;\n    force = true;\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && (\n        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {\n        applyNS(child, ns, force);\n      }\n    }\n  }\n}\n\n// ref #5318\n// necessary to ensure parent re-render when deep bindings like :style and\n// :class are used on slot nodes\nfunction registerDeepBindings (data) {\n  if (isObject(data.style)) {\n    traverse(data.style);\n  }\n  if (isObject(data.class)) {\n    traverse(data.class);\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (true) {\n    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  } else {}\n}\n\nvar currentRenderingInstance = null;\n\nfunction renderMixin (Vue) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype);\n\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    if (_parentVnode) {\n      vm.$scopedSlots = normalizeScopedSlots(\n        _parentVnode.data.scopedSlots,\n        vm.$slots,\n        vm.$scopedSlots\n      );\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      // There's no need to maintain a stack because all render fns are called\n      // separately from one another. Nested component's render fns are called\n      // when parent component is patched.\n      currentRenderingInstance = vm;\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if ( true && vm.$options.renderError) {\n        try {\n          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n        } catch (e) {\n          handleError(e, vm, \"renderError\");\n          vnode = vm._vnode;\n        }\n      } else {\n        vnode = vm._vnode;\n      }\n    } finally {\n      currentRenderingInstance = null;\n    }\n    // if the returned array contains only a single node, allow it\n    if (Array.isArray(vnode) && vnode.length === 1) {\n      vnode = vnode[0];\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if ( true && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (\n    comp.__esModule ||\n    (hasSymbol && comp[Symbol.toStringTag] === 'Module')\n  ) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  var owner = currentRenderingInstance;\n  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {\n    // already pending\n    factory.owners.push(owner);\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (owner && !isDef(factory.owners)) {\n    var owners = factory.owners = [owner];\n    var sync = true;\n    var timerLoading = null;\n    var timerTimeout = null\n\n    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });\n\n    var forceRender = function (renderCompleted) {\n      for (var i = 0, l = owners.length; i < l; i++) {\n        (owners[i]).$forceUpdate();\n      }\n\n      if (renderCompleted) {\n        owners.length = 0;\n        if (timerLoading !== null) {\n          clearTimeout(timerLoading);\n          timerLoading = null;\n        }\n        if (timerTimeout !== null) {\n          clearTimeout(timerTimeout);\n          timerTimeout = null;\n        }\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender(true);\n      } else {\n        owners.length = 0;\n      }\n    });\n\n    var reject = once(function (reason) {\n       true && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender(true);\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (isPromise(res)) {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isPromise(res.component)) {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            timerLoading = setTimeout(function () {\n              timerLoading = null;\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender(false);\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          timerTimeout = setTimeout(function () {\n            timerTimeout = null;\n            if (isUndef(factory.resolved)) {\n              reject(\n                 true\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : undefined\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn) {\n  target.$on(event, fn);\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction createOnceHandler (event, fn) {\n  var _target = target;\n  return function onceHandler () {\n    var res = fn.apply(null, arguments);\n    if (res !== null) {\n      _target.$off(event, onceHandler);\n    }\n  }\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);\n  target = undefined;\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        vm.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {\n        vm.$off(event[i$1], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (!fn) {\n      vm._events[event] = null;\n      return vm\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (true) {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      var info = \"event handler for \\\"\" + event + \"\\\"\";\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        invokeWithErrorHandling(cbs[i], vm, args, vm, info);\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction setActiveInstance(vm) {\n  var prevActiveInstance = activeInstance;\n  activeInstance = vm;\n  return function () {\n    activeInstance = prevActiveInstance;\n  }\n}\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var restoreActiveInstance = setActiveInstance(vm);\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    restoreActiveInstance();\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // release circular reference (#6759)\n    if (vm.$vnode) {\n      vm.$vnode.parent = null;\n    }\n  };\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  if (true) {\n    isUpdatingChildComponent = true;\n  }\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren.\n\n  // check if there are dynamic scopedSlots (hand-written or compiled but with\n  // dynamic slot names). Static scoped slots compiled from template has the\n  // \"$stable\" marker.\n  var newScopedSlots = parentVnode.data.scopedSlots;\n  var oldScopedSlots = vm.$scopedSlots;\n  var hasDynamicScopedSlot = !!(\n    (newScopedSlots && !newScopedSlots.$stable) ||\n    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||\n    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)\n  );\n\n  // Any static slot children from the parent may have changed during parent's\n  // update. Dynamic scoped slots may also have changed. In such cases, a forced\n  // update is necessary to ensure correctness.\n  var needsForceUpdate = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    hasDynamicScopedSlot\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = parentVnode.data.attrs || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    toggleObserving(false);\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      var propOptions = vm.$options.props; // wtf flow?\n      props[key] = validateProp(key, propOptions, propsData, vm);\n    }\n    toggleObserving(true);\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n  \n  // fixed by xxxxxx update properties(mp runtime)\n  vm._$updateProperties && vm._$updateProperties(vm);\n  \n  // update listeners\n  listeners = listeners || emptyObject;\n  var oldListeners = vm.$options._parentListeners;\n  vm.$options._parentListeners = listeners;\n  updateComponentListeners(vm, listeners, oldListeners);\n\n  // resolve slots + force update if has children\n  if (needsForceUpdate) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  if (true) {\n    isUpdatingChildComponent = false;\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  // #7573 disable dep collection when invoking lifecycle hooks\n  pushTarget();\n  var handlers = vm.$options[hook];\n  var info = hook + \" hook\";\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      invokeWithErrorHandling(handlers[i], vm, null, vm, info);\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n  popTarget();\n}\n\n/*  */\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (true) {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n// Async edge case #6566 requires saving the timestamp when event listeners are\n// attached. However, calling performance.now() has a perf overhead especially\n// if the page has thousands of event listeners. Instead, we take a timestamp\n// every time the scheduler flushes and use that for all event listeners\n// attached during that flush.\nvar currentFlushTimestamp = 0;\n\n// Async edge case fix requires storing an event listener's attach timestamp.\nvar getNow = Date.now;\n\n// Determine what event timestamp the browser is using. Annoyingly, the\n// timestamp can either be hi-res (relative to page load) or low-res\n// (relative to UNIX epoch), so in order to compare time we have to use the\n// same timestamp type when saving the flush timestamp.\n// All IE versions use low-res event timestamps, and have problematic clock\n// implementations (#9632)\nif (inBrowser && !isIE) {\n  var performance = window.performance;\n  if (\n    performance &&\n    typeof performance.now === 'function' &&\n    getNow() > document.createEvent('Event').timeStamp\n  ) {\n    // if the event timestamp, although evaluated AFTER the Date.now(), is\n    // smaller than it, it means the event is using a hi-res timestamp,\n    // and we need to use the hi-res version for event listener timestamps as\n    // well.\n    getNow = function () { return performance.now(); };\n  }\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  currentFlushTimestamp = getNow();\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    if (watcher.before) {\n      watcher.before();\n    }\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if ( true && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n\n      if ( true && !config.async) {\n        flushSchedulerQueue();\n        return\n      }\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\n\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n    this.before = options.before;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression =  true\n    ? expOrFn.toString()\n    : undefined;\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = noop;\n       true && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this.deps[i];\n    if (!this.newDepIds.has(dep.id)) {\n      dep.removeSub(this);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n  var i = this.deps.length;\n  while (i--) {\n    this.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this.deps[i].removeSub(this);\n    }\n    this.active = false;\n  }\n};\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  if (!isRoot) {\n    toggleObserving(false);\n  }\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (true) {\n      var hyphenatedKey = hyphenate(key);\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive$$1(props, key, value, function () {\n        if (!isRoot && !isUpdatingChildComponent) {\n          {\n            if(vm.mpHost === 'mp-baidu'){//百度 observer 在 setData callback 之后触发，直接忽略该 warn\n                return\n            }\n            //fixed by xxxxxx __next_tick_pending,uni://form-field 时不告警\n            if(\n                key === 'value' && \n                Array.isArray(vm.$options.behaviors) &&\n                vm.$options.behaviors.indexOf('uni://form-field') !== -1\n              ){\n              return\n            }\n            if(vm._getFormData){\n              return\n            }\n            var $parent = vm.$parent;\n            while($parent){\n              if($parent.__next_tick_pending){\n                return  \n              }\n              $parent = $parent.$parent;\n            }\n          }\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {}\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  toggleObserving(true);\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n     true && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (true) {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n       true && warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  // #7573 disable dep collection when invoking data getters\n  pushTarget();\n  try {\n    return data.call(vm, vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  } finally {\n    popTarget();\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if ( true && getter == null) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (true) {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : createGetterInvoker(userDef);\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : createGetterInvoker(userDef.get)\n      : noop;\n    sharedPropertyDefinition.set = userDef.set || noop;\n  }\n  if ( true &&\n      sharedPropertyDefinition.set === noop) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\n        this\n      );\n    };\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.SharedObject.target) {// fixed by xxxxxx\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction createGetterInvoker(fn) {\n  return function computedGetter () {\n    return fn.call(this, this)\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (true) {\n      if (typeof methods[key] !== 'function') {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has type \\\"\" + (typeof methods[key]) + \"\\\" in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  expOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(expOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (true) {\n    dataDef.set = function () {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      try {\n        cb.call(vm, watcher.value);\n      } catch (error) {\n        handleError(error, vm, (\"callback for immediate watcher \\\"\" + (watcher.expression) + \"\\\"\"));\n      }\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nvar uid$3 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$3++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      startTag = \"vue-perf-start:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (true) {\n      initProxy(vm);\n    } else {}\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    vm.mpHost !== 'mp-toutiao' && initInjections(vm); // resolve injections before data/props  \n    initState(vm);\n    vm.mpHost !== 'mp-toutiao' && initProvide(vm); // resolve provide after data/props\n    vm.mpHost !== 'mp-toutiao' && callHook(vm, 'created');      \n\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure((\"vue \" + (vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  var parentVnode = options._parentVnode;\n  opts.parent = options.parent;\n  opts._parentVnode = parentVnode;\n\n  var vnodeComponentOptions = parentVnode.componentOptions;\n  opts.propsData = vnodeComponentOptions.propsData;\n  opts._parentListeners = vnodeComponentOptions.listeners;\n  opts._renderChildren = vnodeComponentOptions.children;\n  opts._componentTag = vnodeComponentOptions.tag;\n\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = latest[key];\n    }\n  }\n  return modified\n}\n\nfunction Vue (options) {\n  if ( true &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nrenderMixin(Vue);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if ( true && name) {\n      validateComponentName(name);\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if ( true && type === 'component') {\n          validateComponentName(id);\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\n\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (keepAliveInstance, filter) {\n  var cache = keepAliveInstance.cache;\n  var keys = keepAliveInstance.keys;\n  var _vnode = keepAliveInstance._vnode;\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode);\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (\n  cache,\n  key,\n  keys,\n  current\n) {\n  var cached$$1 = cache[key];\n  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\n    cached$$1.componentInstance.$destroy();\n  }\n  cache[key] = null;\n  remove(keys, key);\n}\n\nvar patternTypes = [String, RegExp, Array];\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n    this.keys = [];\n  },\n\n  destroyed: function destroyed () {\n    for (var key in this.cache) {\n      pruneCacheEntry(this.cache, key, this.keys);\n    }\n  },\n\n  mounted: function mounted () {\n    var this$1 = this;\n\n    this.$watch('include', function (val) {\n      pruneCache(this$1, function (name) { return matches(val, name); });\n    });\n    this.$watch('exclude', function (val) {\n      pruneCache(this$1, function (name) { return !matches(val, name); });\n    });\n  },\n\n  render: function render () {\n    var slot = this.$slots.default;\n    var vnode = getFirstComponentChild(slot);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      var ref = this;\n      var include = ref.include;\n      var exclude = ref.exclude;\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      var ref$1 = this;\n      var cache = ref$1.cache;\n      var keys = ref$1.keys;\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance;\n        // make current key freshest\n        remove(keys, key);\n        keys.push(key);\n      } else {\n        cache[key] = vnode;\n        keys.push(key);\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode);\n        }\n      }\n\n      vnode.data.keepAlive = true;\n    }\n    return vnode || (slot && slot[0])\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (true) {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive$$1\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  // 2.6 explicit observable API\n  Vue.observable = function (obj) {\n    observe(obj);\n    return obj\n  };\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue);\n\nObject.defineProperty(Vue.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\n// expose FunctionalRenderContext for ssr runtime helper installation\nObject.defineProperty(Vue, 'FunctionalRenderContext', {\n  value: FunctionalRenderContext\n});\n\nVue.version = '2.6.11';\n\n/**\n * https://raw.githubusercontent.com/Tencent/westore/master/packages/westore/utils/diff.js\n */\nvar ARRAYTYPE = '[object Array]';\nvar OBJECTTYPE = '[object Object]';\n// const FUNCTIONTYPE = '[object Function]'\n\nfunction diff(current, pre) {\n    var result = {};\n    syncKeys(current, pre);\n    _diff(current, pre, '', result);\n    return result\n}\n\nfunction syncKeys(current, pre) {\n    if (current === pre) { return }\n    var rootCurrentType = type(current);\n    var rootPreType = type(pre);\n    if (rootCurrentType == OBJECTTYPE && rootPreType == OBJECTTYPE) {\n        if(Object.keys(current).length >= Object.keys(pre).length){\n            for (var key in pre) {\n                var currentValue = current[key];\n                if (currentValue === undefined) {\n                    current[key] = null;\n                } else {\n                    syncKeys(currentValue, pre[key]);\n                }\n            }\n        }\n    } else if (rootCurrentType == ARRAYTYPE && rootPreType == ARRAYTYPE) {\n        if (current.length >= pre.length) {\n            pre.forEach(function (item, index) {\n                syncKeys(current[index], item);\n            });\n        }\n    }\n}\n\nfunction _diff(current, pre, path, result) {\n    if (current === pre) { return }\n    var rootCurrentType = type(current);\n    var rootPreType = type(pre);\n    if (rootCurrentType == OBJECTTYPE) {\n        if (rootPreType != OBJECTTYPE || Object.keys(current).length < Object.keys(pre).length) {\n            setResult(result, path, current);\n        } else {\n            var loop = function ( key ) {\n                var currentValue = current[key];\n                var preValue = pre[key];\n                var currentType = type(currentValue);\n                var preType = type(preValue);\n                if (currentType != ARRAYTYPE && currentType != OBJECTTYPE) {\n                    if (currentValue != pre[key]) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    }\n                } else if (currentType == ARRAYTYPE) {\n                    if (preType != ARRAYTYPE) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    } else {\n                        if (currentValue.length < preValue.length) {\n                            setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                        } else {\n                            currentValue.forEach(function (item, index) {\n                                _diff(item, preValue[index], (path == '' ? '' : path + \".\") + key + '[' + index + ']', result);\n                            });\n                        }\n                    }\n                } else if (currentType == OBJECTTYPE) {\n                    if (preType != OBJECTTYPE || Object.keys(currentValue).length < Object.keys(preValue).length) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    } else {\n                        for (var subKey in currentValue) {\n                            _diff(currentValue[subKey], preValue[subKey], (path == '' ? '' : path + \".\") + key + '.' + subKey, result);\n                        }\n                    }\n                }\n            };\n\n            for (var key in current) loop( key );\n        }\n    } else if (rootCurrentType == ARRAYTYPE) {\n        if (rootPreType != ARRAYTYPE) {\n            setResult(result, path, current);\n        } else {\n            if (current.length < pre.length) {\n                setResult(result, path, current);\n            } else {\n                current.forEach(function (item, index) {\n                    _diff(item, pre[index], path + '[' + index + ']', result);\n                });\n            }\n        }\n    } else {\n        setResult(result, path, current);\n    }\n}\n\nfunction setResult(result, k, v) {\n    // if (type(v) != FUNCTIONTYPE) {\n        result[k] = v;\n    // }\n}\n\nfunction type(obj) {\n    return Object.prototype.toString.call(obj)\n}\n\n/*  */\r\n\r\nfunction flushCallbacks$1(vm) {\r\n    if (vm.__next_tick_callbacks && vm.__next_tick_callbacks.length) {\r\n        if (Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\r\n            var mpInstance = vm.$scope;\r\n            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +\r\n                ']:flushCallbacks[' + vm.__next_tick_callbacks.length + ']');\r\n        }\r\n        var copies = vm.__next_tick_callbacks.slice(0);\r\n        vm.__next_tick_callbacks.length = 0;\r\n        for (var i = 0; i < copies.length; i++) {\r\n            copies[i]();\r\n        }\r\n    }\r\n}\r\n\r\nfunction hasRenderWatcher(vm) {\r\n    return queue.find(function (watcher) { return vm._watcher === watcher; })\r\n}\r\n\r\nfunction nextTick$1(vm, cb) {\r\n    //1.nextTick 之前 已 setData 且 setData 还未回调完成\r\n    //2.nextTick 之前存在 render watcher\r\n    if (!vm.__next_tick_pending && !hasRenderWatcher(vm)) {\n        if(Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG){\n            var mpInstance = vm.$scope;\n            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +\n                ']:nextVueTick');\n        }\r\n        return nextTick(cb, vm)\r\n    }else{\n        if(Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG){\n            var mpInstance$1 = vm.$scope;\n            console.log('[' + (+new Date) + '][' + (mpInstance$1.is || mpInstance$1.route) + '][' + vm._uid +\n                ']:nextMPTick');\n        }\n    }\r\n    var _resolve;\r\n    if (!vm.__next_tick_callbacks) {\r\n        vm.__next_tick_callbacks = [];\r\n    }\r\n    vm.__next_tick_callbacks.push(function () {\r\n        if (cb) {\r\n            try {\r\n                cb.call(vm);\r\n            } catch (e) {\r\n                handleError(e, vm, 'nextTick');\r\n            }\r\n        } else if (_resolve) {\r\n            _resolve(vm);\r\n        }\r\n    });\r\n    // $flow-disable-line\r\n    if (!cb && typeof Promise !== 'undefined') {\r\n        return new Promise(function (resolve) {\r\n            _resolve = resolve;\r\n        })\r\n    }\r\n}\n\n/*  */\r\n\r\nfunction cloneWithData(vm) {\r\n  // 确保当前 vm 所有数据被同步\r\n  var ret = Object.create(null);\r\n  var dataKeys = [].concat(\r\n    Object.keys(vm._data || {}),\r\n    Object.keys(vm._computedWatchers || {}));\r\n\r\n  dataKeys.reduce(function(ret, key) {\r\n    ret[key] = vm[key];\r\n    return ret\r\n  }, ret);\r\n  //TODO 需要把无用数据处理掉，比如 list=>l0 则 list 需要移除，否则多传输一份数据\r\n  Object.assign(ret, vm.$mp.data || {});\r\n  if (\r\n    Array.isArray(vm.$options.behaviors) &&\r\n    vm.$options.behaviors.indexOf('uni://form-field') !== -1\r\n  ) { //form-field\r\n    ret['name'] = vm.name;\r\n    ret['value'] = vm.value;\r\n  }\r\n\r\n  return JSON.parse(JSON.stringify(ret))\r\n}\r\n\r\nvar patch = function(oldVnode, vnode) {\n  var this$1 = this;\n\r\n  if (vnode === null) { //destroy\r\n    return\r\n  }\r\n  if (this.mpType === 'page' || this.mpType === 'component') {\r\n    var mpInstance = this.$scope;\r\n    var data = Object.create(null);\r\n    try {\r\n      data = cloneWithData(this);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n    data.__webviewId__ = mpInstance.data.__webviewId__;\r\n    var mpData = Object.create(null);\r\n    Object.keys(data).forEach(function (key) { //仅同步 data 中有的数据\r\n      mpData[key] = mpInstance.data[key];\r\n    });\r\n    var diffData = this.$shouldDiffData === false ? data : diff(data, mpData);\r\n    if (Object.keys(diffData).length) {\r\n      if (Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\r\n        console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + this._uid +\r\n          ']差量更新',\r\n          JSON.stringify(diffData));\r\n      }\r\n      this.__next_tick_pending = true;\r\n      mpInstance.setData(diffData, function () {\r\n        this$1.__next_tick_pending = false;\r\n        flushCallbacks$1(this$1);\r\n      });\r\n    } else {\r\n      flushCallbacks$1(this);\r\n    }\r\n  }\r\n};\n\n/*  */\n\nfunction createEmptyRender() {\n\n}\n\nfunction mountComponent$1(\n  vm,\n  el,\n  hydrating\n) {\n  if (!vm.mpType) {//main.js 中的 new Vue\n    return vm\n  }\n  if (vm.mpType === 'app') {\n    vm.$options.render = createEmptyRender;\n  }\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyRender;\n    if (true) {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  \n  vm.mpHost !== 'mp-toutiao' && callHook(vm, 'beforeMount');\n\n  var updateComponent = function () {\n    vm._update(vm._render(), hydrating);\n  };\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, {\n    before: function before() {\n      if (vm._isMounted && !vm._isDestroyed) {\n        callHook(vm, 'beforeUpdate');\n      }\n    }\n  }, true /* isRenderWatcher */);\n  hydrating = false;\n  return vm\n}\n\n/*  */\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/*  */\r\n\r\nvar MP_METHODS = ['createSelectorQuery', 'createIntersectionObserver', 'selectAllComponents', 'selectComponent'];\r\n\r\nfunction getTarget(obj, path) {\r\n  var parts = path.split('.');\r\n  var key = parts[0];\r\n  if (key.indexOf('__$n') === 0) { //number index\r\n    key = parseInt(key.replace('__$n', ''));\r\n  }\r\n  if (parts.length === 1) {\r\n    return obj[key]\r\n  }\r\n  return getTarget(obj[key], parts.slice(1).join('.'))\r\n}\r\n\r\nfunction internalMixin(Vue) {\r\n\r\n  Vue.config.errorHandler = function(err) {\n    console.error(err);\n    /* eslint-disable no-undef */\r\n    var app = getApp();\r\n    if (app && app.onError) {\r\n      app.onError(err);\r\n    }\r\n  };\r\n\r\n  var oldEmit = Vue.prototype.$emit;\r\n\r\n  Vue.prototype.$emit = function(event) {\r\n    if (this.$scope && event) {\r\n      this.$scope['triggerEvent'](event, {\r\n        __args__: toArray(arguments, 1)\r\n      });\r\n    }\r\n    return oldEmit.apply(this, arguments)\r\n  };\r\n\r\n  Vue.prototype.$nextTick = function(fn) {\r\n    return nextTick$1(this, fn)\r\n  };\r\n\r\n  MP_METHODS.forEach(function (method) {\r\n    Vue.prototype[method] = function(args) {\r\n      if (this.$scope && this.$scope[method]) {\r\n        return this.$scope[method](args)\r\n      }\r\n      // mp-alipay\r\n      if (typeof my === 'undefined') {\r\n        return\r\n      }\r\n      if (method === 'createSelectorQuery') {\r\n        /* eslint-disable no-undef */\r\n        return my.createSelectorQuery(args)\r\n      } else if (method === 'createIntersectionObserver') {\r\n        /* eslint-disable no-undef */\r\n        return my.createIntersectionObserver(args)\r\n      }\r\n      // TODO mp-alipay 暂不支持 selectAllComponents,selectComponent\r\n    };\r\n  });\r\n\r\n  Vue.prototype.__init_provide = initProvide;\r\n\r\n  Vue.prototype.__init_injections = initInjections;\r\n\r\n  Vue.prototype.__call_hook = function(hook, args) {\r\n    var vm = this;\r\n    // #7573 disable dep collection when invoking lifecycle hooks\r\n    pushTarget();\r\n    var handlers = vm.$options[hook];\r\n    var info = hook + \" hook\";\r\n    var ret;\r\n    if (handlers) {\r\n      for (var i = 0, j = handlers.length; i < j; i++) {\r\n        ret = invokeWithErrorHandling(handlers[i], vm, args ? [args] : null, vm, info);\r\n      }\r\n    }\r\n    if (vm._hasHookEvent) {\r\n      vm.$emit('hook:' + hook, args);\r\n    }\r\n    popTarget();\r\n    return ret\r\n  };\r\n\r\n  Vue.prototype.__set_model = function(target, key, value, modifiers) {\r\n    if (Array.isArray(modifiers)) {\r\n      if (modifiers.indexOf('trim') !== -1) {\r\n        value = value.trim();\r\n      }\r\n      if (modifiers.indexOf('number') !== -1) {\r\n        value = this._n(value);\r\n      }\r\n    }\r\n    if (!target) {\r\n      target = this;\r\n    }\r\n    target[key] = value;\r\n  };\r\n\r\n  Vue.prototype.__set_sync = function(target, key, value) {\r\n    if (!target) {\r\n      target = this;\r\n    }\r\n    target[key] = value;\r\n  };\r\n\r\n  Vue.prototype.__get_orig = function(item) {\r\n    if (isPlainObject(item)) {\r\n      return item['$orig'] || item\r\n    }\r\n    return item\r\n  };\r\n\r\n  Vue.prototype.__get_value = function(dataPath, target) {\r\n    return getTarget(target || this, dataPath)\r\n  };\r\n\r\n\r\n  Vue.prototype.__get_class = function(dynamicClass, staticClass) {\r\n    return renderClass(staticClass, dynamicClass)\r\n  };\r\n\r\n  Vue.prototype.__get_style = function(dynamicStyle, staticStyle) {\r\n    if (!dynamicStyle && !staticStyle) {\r\n      return ''\r\n    }\r\n    var dynamicStyleObj = normalizeStyleBinding(dynamicStyle);\r\n    var styleObj = staticStyle ? extend(staticStyle, dynamicStyleObj) : dynamicStyleObj;\r\n    return Object.keys(styleObj).map(function (name) { return ((hyphenate(name)) + \":\" + (styleObj[name])); }).join(';')\r\n  };\r\n\r\n  Vue.prototype.__map = function(val, iteratee) {\r\n    //TODO 暂不考虑 string,number\r\n    var ret, i, l, keys, key;\r\n    if (Array.isArray(val)) {\r\n      ret = new Array(val.length);\r\n      for (i = 0, l = val.length; i < l; i++) {\r\n        ret[i] = iteratee(val[i], i);\r\n      }\r\n      return ret\r\n    } else if (isObject(val)) {\r\n      keys = Object.keys(val);\r\n      ret = Object.create(null);\r\n      for (i = 0, l = keys.length; i < l; i++) {\r\n        key = keys[i];\r\n        ret[key] = iteratee(val[key], key, i);\r\n      }\r\n      return ret\r\n    }\r\n    return []\r\n  };\r\n\r\n}\n\n/*  */\r\n\r\nvar LIFECYCLE_HOOKS$1 = [\r\n    //App\r\n    'onLaunch',\r\n    'onShow',\r\n    'onHide',\r\n    'onUniNViewMessage',\n    'onError',\r\n    //Page\r\n    'onLoad',\r\n    // 'onShow',\r\n    'onReady',\r\n    // 'onHide',\r\n    'onUnload',\r\n    'onPullDownRefresh',\r\n    'onReachBottom',\r\n    'onTabItemTap',\r\n    'onShareAppMessage',\n    'onResize',\r\n    'onPageScroll',\r\n    'onNavigationBarButtonTap',\r\n    'onBackPress',\r\n    'onNavigationBarSearchInputChanged',\r\n    'onNavigationBarSearchInputConfirmed',\r\n    'onNavigationBarSearchInputClicked',\r\n    //Component\r\n    // 'onReady', // 兼容旧版本，应该移除该事件\r\n    'onPageShow',\r\n    'onPageHide',\r\n    'onPageResize'\r\n];\r\nfunction lifecycleMixin$1(Vue) {\r\n\r\n    //fixed vue-class-component\r\n    var oldExtend = Vue.extend;\r\n    Vue.extend = function(extendOptions) {\r\n        extendOptions = extendOptions || {};\r\n\r\n        var methods = extendOptions.methods;\r\n        if (methods) {\r\n            Object.keys(methods).forEach(function (methodName) {\r\n                if (LIFECYCLE_HOOKS$1.indexOf(methodName)!==-1) {\r\n                    extendOptions[methodName] = methods[methodName];\r\n                    delete methods[methodName];\r\n                }\r\n            });\r\n        }\r\n\r\n        return oldExtend.call(this, extendOptions)\r\n    };\r\n\r\n    var strategies = Vue.config.optionMergeStrategies;\r\n    var mergeHook = strategies.created;\r\n    LIFECYCLE_HOOKS$1.forEach(function (hook) {\r\n        strategies[hook] = mergeHook;\r\n    });\r\n\r\n    Vue.prototype.__lifecycle_hooks__ = LIFECYCLE_HOOKS$1;\r\n}\n\n/*  */\r\n\n// install platform patch function\r\nVue.prototype.__patch__ = patch;\r\n\r\n// public mount method\r\nVue.prototype.$mount = function(\r\n    el ,\r\n    hydrating \r\n) {\r\n    return mountComponent$1(this, el, hydrating)\r\n};\r\n\r\nlifecycleMixin$1(Vue);\r\ninternalMixin(Vue);\n\n/*  */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Vue);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),

/***/ 31:
/*!****************************************************************************************************!*\
  !*** C:/Users/DELL/Documents/HBuilderProjects/CanNengApp/components/echarts/echarts.simple.min.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {\n/*\r\n              * Licensed to the Apache Software Foundation (ASF) under one\r\n              * or more contributor license agreements.  See the NOTICE file\r\n              * distributed with this work for additional information\r\n              * regarding copyright ownership.  The ASF licenses this file\r\n              * to you under the Apache License, Version 2.0 (the\r\n              * \"License\"); you may not use this file except in compliance\r\n              * with the License.  You may obtain a copy of the License at\r\n              *\r\n              *   http://www.apache.org/licenses/LICENSE-2.0\r\n              *\r\n              * Unless required by applicable law or agreed to in writing,\r\n              * software distributed under the License is distributed on an\r\n              * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n              * KIND, either express or implied.  See the License for the\r\n              * specific language governing permissions and limitations\r\n              * under the License.\r\n              */\n\n\n!function (t, e) { true ? e(exports) : undefined;}(void 0, function (t) {\"use strict\";var e = 2311,n = function n() {return e++;},m = \"object\" == typeof wx && \"function\" == typeof wx.getSystemInfoSync ? { browser: {}, os: {}, node: !1, wxa: !0, canvasSupported: !0, svgSupported: !1, touchEventsSupported: !0, domSupported: !1 } : \"undefined\" == typeof document && \"undefined\" != typeof self ? { browser: {}, os: {}, node: !1, worker: !0, canvasSupported: !0, domSupported: !1 } : \"undefined\" == typeof navigator ? { browser: {}, os: {}, node: !0, worker: !1, canvasSupported: !0, svgSupported: !0, domSupported: !1 } : function (t) {var e = {},n = t.match(/Firefox\\/([\\d.]+)/),i = t.match(/MSIE\\s([\\d.]+)/) || t.match(/Trident\\/.+?rv:(([\\d.]+))/),r = t.match(/Edge\\/([\\d.]+)/),a = /micromessenger/i.test(t);n && (e.firefox = !0, e.version = n[1]);i && (e.ie = !0, e.version = i[1]);r && (e.edge = !0, e.version = r[1]);a && (e.weChat = !0);return { browser: e, os: {}, node: !1, canvasSupported: !!document.createElement(\"canvas\").getContext, svgSupported: \"undefined\" != typeof SVGRect, touchEventsSupported: \"ontouchstart\" in window && !e.ie && !e.edge, pointerEventsSupported: \"onpointerdown\" in window && (e.edge || e.ie && 11 <= e.version), domSupported: \"undefined\" != typeof document };}(navigator.userAgent);var s = { \"[object Function]\": 1, \"[object RegExp]\": 1, \"[object Date]\": 1, \"[object Error]\": 1, \"[object CanvasGradient]\": 1, \"[object CanvasPattern]\": 1, \"[object Image]\": 1, \"[object Canvas]\": 1 },l = { \"[object Int8Array]\": 1, \"[object Uint8Array]\": 1, \"[object Uint8ClampedArray]\": 1, \"[object Int16Array]\": 1, \"[object Uint16Array]\": 1, \"[object Int32Array]\": 1, \"[object Uint32Array]\": 1, \"[object Float32Array]\": 1, \"[object Float64Array]\": 1 },h = Object.prototype.toString,i = Array.prototype,o = i.forEach,u = i.filter,r = i.slice,c = i.map,d = i.reduce,a = {};function b(t) {if (null == t || \"object\" != typeof t) return t;var e = t,n = h.call(t);if (\"[object Array]\" === n) {if (!q(t)) {e = [];for (var i = 0, r = t.length; i < r; i++) {e[i] = b(t[i]);}}} else if (l[n]) {if (!q(t)) {var a = t.constructor;if (t.constructor.from) e = a.from(t);else {e = new a(t.length);for (i = 0, r = t.length; i < r; i++) {e[i] = b(t[i]);}}}} else if (!s[n] && !q(t) && !B(t)) for (var o in e = {}, t) {t.hasOwnProperty(o) && (e[o] = b(t[o]));}return e;}function f(t, e, n) {if (!O(e) || !O(t)) return n ? b(e) : t;for (var i in e) {if (e.hasOwnProperty(i)) {var r = t[i],a = e[i];!O(a) || !O(r) || C(a) || C(r) || B(a) || B(r) || E(a) || E(r) || q(a) || q(r) ? !n && i in t || (t[i] = b(e[i])) : f(r, a, n);}}return t;}function S(t, e) {for (var n in e) {e.hasOwnProperty(n) && (t[n] = e[n]);}return t;}function k(t, e, n) {for (var i in e) {e.hasOwnProperty(i) && (n ? null != e[i] : null == t[i]) && (t[i] = e[i]);}return t;}function p() {return a.createCanvas();}var g;function v(t, e) {if (t) {if (t.indexOf) return t.indexOf(e);for (var n = 0, i = t.length; n < i; n++) {if (t[n] === e) return n;}}return -1;}function y(t, e) {var n = t.prototype;function i() {}for (var r in i.prototype = e.prototype, t.prototype = new i(), n) {n.hasOwnProperty(r) && (t.prototype[r] = n[r]);}(t.prototype.constructor = t).superClass = e;}function _(t, e, n) {k(t = \"prototype\" in t ? t.prototype : t, e = \"prototype\" in e ? e.prototype : e, n);}function P(t) {if (t) return \"string\" != typeof t && \"number\" == typeof t.length;}function D(t, e, n) {if (t && e) if (t.forEach && t.forEach === o) t.forEach(e, n);else if (t.length === +t.length) for (var i = 0, r = t.length; i < r; i++) {e.call(n, t[i], i, t);} else for (var a in t) {t.hasOwnProperty(a) && e.call(n, t[a], a, t);}}function A(t, e, n) {if (t && e) {if (t.map && t.map === c) return t.map(e, n);for (var i = [], r = 0, a = t.length; r < a; r++) {i.push(e.call(n, t[r], r, t));}return i;}}function M(t, e, n, i) {if (t && e) {if (t.reduce && t.reduce === d) return t.reduce(e, n, i);for (var r = 0, a = t.length; r < a; r++) {n = e.call(i, n, t[r], r, t);}return n;}}function x(t, e, n) {if (t && e) {if (t.filter && t.filter === u) return t.filter(e, n);for (var i = [], r = 0, a = t.length; r < a; r++) {e.call(n, t[r], r, t) && i.push(t[r]);}return i;}}function w(t, e) {var n = r.call(arguments, 2);return function () {return t.apply(e, n.concat(r.call(arguments)));};}function I(t) {var e = r.call(arguments, 1);return function () {return t.apply(this, e.concat(r.call(arguments)));};}function C(t) {return \"[object Array]\" === h.call(t);}function T(t) {return \"function\" == typeof t;}function L(t) {return \"[object String]\" === h.call(t);}function O(t) {var e = typeof t;return \"function\" == e || !!t && \"object\" == e;}function E(t) {return !!s[h.call(t)];}function N(t) {return !!l[h.call(t)];}function B(t) {return \"object\" == typeof t && \"number\" == typeof t.nodeType && \"object\" == typeof t.ownerDocument;}function z(t) {return t != t;}function R() {for (var t = 0, e = arguments.length; t < e; t++) {if (null != arguments[t]) return arguments[t];}}function F(t, e) {return null != t ? t : e;}function V(t, e, n) {return null != t ? t : null != e ? e : n;}function W() {return Function.call.apply(r, arguments);}function H(t) {if (\"number\" == typeof t) return [t, t, t, t];var e = t.length;return 2 === e ? [t[0], t[1], t[0], t[1]] : 3 === e ? [t[0], t[1], t[2], t[1]] : t;}function G(t, e) {if (!t) throw new Error(e);}function X(t) {return null == t ? null : \"function\" == typeof t.trim ? t.trim() : t.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, \"\");}a.createCanvas = function () {return document.createElement(\"canvas\");};var U = \"__ec_primitive__\";function Y(t) {t[U] = !0;}function q(t) {return t[U];}function j(t) {var n = C(t);this.data = {};var i = this;function e(t, e) {n ? i.set(t, e) : i.set(e, t);}t instanceof j ? t.each(e) : t && D(t, e);}function Z(t) {return new j(t);}function $() {}j.prototype = { constructor: j, get: function get(t) {return this.data.hasOwnProperty(t) ? this.data[t] : null;}, set: function set(t, e) {return this.data[t] = e;}, each: function each(t, e) {for (var n in void 0 !== e && (t = w(t, e)), this.data) {this.data.hasOwnProperty(n) && t(this.data[n], n);}}, removeKey: function removeKey(t) {delete this.data[t];} };var K = \"undefined\" == typeof Float32Array ? Array : Float32Array;function Q(t, e) {var n = new K(2);return null == t && (t = 0), null == e && (e = 0), n[0] = t, n[1] = e, n;}function J(t) {var e = new K(2);return e[0] = t[0], e[1] = t[1], e;}function tt(t, e, n) {return t[0] = e[0] + n[0], t[1] = e[1] + n[1], t;}function et(t, e, n) {return t[0] = e[0] - n[0], t[1] = e[1] - n[1], t;}function nt(t, e, n) {return t[0] = e[0] * n, t[1] = e[1] * n, t;}function it(t, e) {var n = function (t) {return Math.sqrt(function (t) {return t[0] * t[0] + t[1] * t[1];}(t));}(e);return 0 === n ? (t[0] = 0, t[1] = 0) : (t[0] = e[0] / n, t[1] = e[1] / n), t;}function rt(t, e) {return Math.sqrt((t[0] - e[0]) * (t[0] - e[0]) + (t[1] - e[1]) * (t[1] - e[1]));}var at = rt;var ot = function ot(t, e) {return (t[0] - e[0]) * (t[0] - e[0]) + (t[1] - e[1]) * (t[1] - e[1]);};function st(t, e, n) {var i = e[0],r = e[1];return t[0] = n[0] * i + n[2] * r + n[4], t[1] = n[1] * i + n[3] * r + n[5], t;}function lt(t, e, n) {return t[0] = Math.min(e[0], n[0]), t[1] = Math.min(e[1], n[1]), t;}function ht(t, e, n) {return t[0] = Math.max(e[0], n[0]), t[1] = Math.max(e[1], n[1]), t;}function ut() {this.on(\"mousedown\", this._dragStart, this), this.on(\"mousemove\", this._drag, this), this.on(\"mouseup\", this._dragEnd, this), this.on(\"globalout\", this._dragEnd, this);}function ct(t, e) {return { target: t, topTarget: e && e.topTarget };}ut.prototype = { constructor: ut, _dragStart: function _dragStart(t) {var e = t.target;e && e.draggable && ((this._draggingTarget = e).dragging = !0, this._x = t.offsetX, this._y = t.offsetY, this.dispatchToElement(ct(e, t), \"dragstart\", t.event));}, _drag: function _drag(t) {var e = this._draggingTarget;if (e) {var n = t.offsetX,i = t.offsetY,r = n - this._x,a = i - this._y;this._x = n, this._y = i, e.drift(r, a, t), this.dispatchToElement(ct(e, t), \"drag\", t.event);var o = this.findHover(n, i, e).target,s = this._dropTarget;e !== (this._dropTarget = o) && (s && o !== s && this.dispatchToElement(ct(s, t), \"dragleave\", t.event), o && o !== s && this.dispatchToElement(ct(o, t), \"dragenter\", t.event));}}, _dragEnd: function _dragEnd(t) {var e = this._draggingTarget;e && (e.dragging = !1), this.dispatchToElement(ct(e, t), \"dragend\", t.event), this._dropTarget && this.dispatchToElement(ct(this._dropTarget, t), \"drop\", t.event), this._draggingTarget = null, this._dropTarget = null;} };var dt = Array.prototype.slice,ft = function ft(t) {this._$handlers = {}, this._$eventProcessor = t;};function pt(t, e, n, i, r, a) {var o = t._$handlers;if (\"function\" == typeof n && (r = i, i = n, n = null), !i || !e) return t;n = function (t, e) {var n = t._$eventProcessor;return null != e && n && n.normalizeQuery && (e = n.normalizeQuery(e)), e;}(t, n), o[e] || (o[e] = []);for (var s = 0; s < o[e].length; s++) {if (o[e][s].h === i) return t;}var l = { h: i, one: a, query: n, ctx: r || t, callAtLast: i.zrEventfulCallAtLast },h = o[e].length - 1,u = o[e][h];return u && u.callAtLast ? o[e].splice(h, 0, l) : o[e].push(l), t;}ft.prototype = { constructor: ft, one: function one(t, e, n, i) {return pt(this, t, e, n, i, !0);}, on: function on(t, e, n, i) {return pt(this, t, e, n, i, !1);}, isSilent: function isSilent(t) {var e = this._$handlers;return !e[t] || !e[t].length;}, off: function off(t, e) {var n = this._$handlers;if (!t) return this._$handlers = {}, this;if (e) {if (n[t]) {for (var i = [], r = 0, a = n[t].length; r < a; r++) {n[t][r].h !== e && i.push(n[t][r]);}n[t] = i;}n[t] && 0 === n[t].length && delete n[t];} else delete n[t];return this;}, trigger: function trigger(t) {var e = this._$handlers[t],n = this._$eventProcessor;if (e) {var i = arguments,r = i.length;3 < r && (i = dt.call(i, 1));for (var a = e.length, o = 0; o < a;) {var s = e[o];if (n && n.filter && null != s.query && !n.filter(t, s.query)) o++;else {switch (r) {case 1:s.h.call(s.ctx);break;case 2:s.h.call(s.ctx, i[1]);break;case 3:s.h.call(s.ctx, i[1], i[2]);break;default:s.h.apply(s.ctx, i);}s.one ? (e.splice(o, 1), a--) : o++;}}}return n && n.afterTrigger && n.afterTrigger(t), this;}, triggerWithContext: function triggerWithContext(t) {var e = this._$handlers[t],n = this._$eventProcessor;if (e) {var i = arguments,r = i.length;4 < r && (i = dt.call(i, 1, i.length - 1));for (var a = i[i.length - 1], o = e.length, s = 0; s < o;) {var l = e[s];if (n && n.filter && null != l.query && !n.filter(t, l.query)) s++;else {switch (r) {case 1:l.h.call(a);break;case 2:l.h.call(a, i[1]);break;case 3:l.h.call(a, i[1], i[2]);break;default:l.h.apply(a, i);}l.one ? (e.splice(s, 1), o--) : s++;}}}return n && n.afterTrigger && n.afterTrigger(t), this;} };var gt = Math.log(2);function vt(t, e, n, i, r, a) {var o = i + \"-\" + r,s = t.length;if (a.hasOwnProperty(o)) return a[o];if (1 === e) {var l = Math.round(Math.log((1 << s) - 1 & ~r) / gt);return t[n][l];}for (var h = i | 1 << n, u = n + 1; i & 1 << u;) {u++;}for (var c = 0, d = 0, f = 0; d < s; d++) {var p = 1 << d;p & r || (c += (f % 2 ? -1 : 1) * t[n][d] * vt(t, e - 1, u, h, r | p, a), f++);}return a[o] = c;}var mt = \"undefined\" != typeof window && !!window.addEventListener,yt = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,_t = \"___zrEVENTSAVED\",xt = [];function wt(t, e, n, i) {return n = n || {}, i || !m.canvasSupported ? bt(t, e, n) : m.browser.firefox && null != e.layerX && e.layerX !== e.offsetX ? (n.zrX = e.layerX, n.zrY = e.layerY) : null != e.offsetX ? (n.zrX = e.offsetX, n.zrY = e.offsetY) : bt(t, e, n), n;}function bt(t, e, n) {if (t.getBoundingClientRect && m.domSupported) {var i = e.clientX,r = e.clientY;if (\"CANVAS\" === t.nodeName.toUpperCase()) {var a = t.getBoundingClientRect();return n.zrX = i - a.left, void (n.zrY = r - a.top);}var o = t[_t] || (t[_t] = {}),s = function (t, e) {for (var n = e.transformer, i = e.srcCoords, r = !0, a = [], o = [], s = 0; s < 4; s++) {var l = t[s].getBoundingClientRect(),h = 2 * s,u = l.left,c = l.top;a.push(u, c), r &= i && u === i[h] && c === i[1 + h], o.push(t[s].offsetLeft, t[s].offsetTop);}return r ? n : (e.srcCoords = a, e.transformer = function (t, e) {var n = [[t[0], t[1], 1, 0, 0, 0, -e[0] * t[0], -e[0] * t[1]], [0, 0, 0, t[0], t[1], 1, -e[1] * t[0], -e[1] * t[1]], [t[2], t[3], 1, 0, 0, 0, -e[2] * t[2], -e[2] * t[3]], [0, 0, 0, t[2], t[3], 1, -e[3] * t[2], -e[3] * t[3]], [t[4], t[5], 1, 0, 0, 0, -e[4] * t[4], -e[4] * t[5]], [0, 0, 0, t[4], t[5], 1, -e[5] * t[4], -e[5] * t[5]], [t[6], t[7], 1, 0, 0, 0, -e[6] * t[6], -e[6] * t[7]], [0, 0, 0, t[6], t[7], 1, -e[7] * t[6], -e[7] * t[7]]],i = {},r = vt(n, 8, 0, 0, 0, i);if (0 !== r) {for (var a = [], o = 0; o < 8; o++) {for (var s = 0; s < 8; s++) {null == a[s] && (a[s] = 0), a[s] += ((o + s) % 2 ? -1 : 1) * vt(n, 7, 0 === o ? 1 : 0, 1 << o, 1 << s, i) / r * e[o];}}return function (t, e, n) {var i = e * a[6] + n * a[7] + 1;t[0] = (e * a[0] + n * a[1] + a[2]) / i, t[1] = (e * a[3] + n * a[4] + a[5]) / i;};}}(a, o));}(function (t, e) {var n = e.markers;if (n) return n;n = e.markers = [];for (var i = [\"left\", \"right\"], r = [\"top\", \"bottom\"], a = 0; a < 4; a++) {var o = document.createElement(\"div\"),s = o.style,l = a % 2,h = (a >> 1) % 2;s.cssText = [\"position:absolute\", \"visibility: hidden\", \"padding: 0\", \"margin: 0\", \"border-width: 0\", \"width:0\", \"height:0\", i[l] + \":0\", r[h] + \":0\", i[1 - l] + \":auto\", r[1 - h] + \":auto\", \"\"].join(\"!important;\"), t.appendChild(o), n.push(o);}return n;}(t, o), o);if (s) return s(xt, i, r), n.zrX = xt[0], void (n.zrY = xt[1]);}n.zrX = n.zrY = 0;}function St(t, e, n) {if (null != (e = e || window.event).zrX) return e;var i = e.type;if (i && 0 <= i.indexOf(\"touch\")) {var r = \"touchend\" !== i ? e.targetTouches[0] : e.changedTouches[0];r && wt(t, r, e, n);} else wt(t, e, e, n), e.zrDelta = e.wheelDelta ? e.wheelDelta / 120 : -(e.detail || 0) / 3;var a = e.button;return null == e.which && void 0 !== a && yt.test(e.type) && (e.which = 1 & a ? 1 : 2 & a ? 3 : 4 & a ? 2 : 0), e;}function Mt() {this._track = [];}var It = mt ? function (t) {t.preventDefault(), t.stopPropagation(), t.cancelBubble = !0;} : function (t) {t.returnValue = !1, t.cancelBubble = !0;};function Tt(t) {var e = t[1][0] - t[0][0],n = t[1][1] - t[0][1];return Math.sqrt(e * e + n * n);}Mt.prototype = { constructor: Mt, recognize: function recognize(t, e, n) {return this._doTrack(t, e, n), this._recognize(t);}, clear: function clear() {return this._track.length = 0, this;}, _doTrack: function _doTrack(t, e, n) {var i = t.touches;if (i) {for (var r = { points: [], touches: [], target: e, event: t }, a = 0, o = i.length; a < o; a++) {var s = i[a],l = wt(n, s, {});r.points.push([l.zrX, l.zrY]), r.touches.push(s);}this._track.push(r);}}, _recognize: function _recognize(t) {for (var e in Ct) {if (Ct.hasOwnProperty(e)) {var n = Ct[e](this._track, t);if (n) return n;}}} };var Ct = { pinch: function pinch(t, e) {var n = t.length;if (n) {var i = (t[n - 1] || {}).points,r = (t[n - 2] || {}).points || i;if (r && 1 < r.length && i && 1 < i.length) {var a = Tt(i) / Tt(r);isFinite(a) || (a = 1), e.pinchScale = a;var o = function (t) {return [(t[0][0] + t[1][0]) / 2, (t[0][1] + t[1][1]) / 2];}(i);return e.pinchX = o[0], e.pinchY = o[1], { type: \"pinch\", target: t[0].target, event: e };}}} },kt = \"silent\";function Dt(t) {It(this.event);}function At() {}At.prototype.dispose = function () {};function Lt(t, e, n, i) {ft.call(this), this.storage = t, this.painter = e, this.painterRoot = i, n = n || new At(), this.proxy = null, this._hovered = {}, this._lastTouchMoment, this._lastX, this._lastY, this._gestureMgr, ut.call(this), this.setHandlerProxy(n);}var Pt = [\"click\", \"dblclick\", \"mousewheel\", \"mouseout\", \"mouseup\", \"mousedown\", \"mousemove\", \"contextmenu\"];function Ot(t, e, n) {if (t[t.rectHover ? \"rectContain\" : \"contain\"](e, n)) {for (var i, r = t; r;) {if (r.clipPath && !r.clipPath.contain(e, n)) return !1;r.silent && (i = !0), r = r.parent;}return !i || kt;}return !1;}Lt.prototype = { constructor: Lt, setHandlerProxy: function setHandlerProxy(e) {this.proxy && this.proxy.dispose(), e && (D(Pt, function (t) {e.on && e.on(t, this[t], this);}, this), e.handler = this), this.proxy = e;}, mousemove: function mousemove(t) {var e = t.zrX,n = t.zrY,i = this._hovered,r = i.target;r && !r.__zr && (r = (i = this.findHover(i.x, i.y)).target);var a = this._hovered = this.findHover(e, n),o = a.target,s = this.proxy;s.setCursor && s.setCursor(o ? o.cursor : \"default\"), r && o !== r && this.dispatchToElement(i, \"mouseout\", t), this.dispatchToElement(a, \"mousemove\", t), o && o !== r && this.dispatchToElement(a, \"mouseover\", t);}, mouseout: function mouseout(t) {this.dispatchToElement(this._hovered, \"mouseout\", t);for (var e, n = t.toElement || t.relatedTarget; (n = n && n.parentNode) && 9 !== n.nodeType && !(e = n === this.painterRoot);) {;}e || this.trigger(\"globalout\", { event: t });}, resize: function resize(t) {this._hovered = {};}, dispatch: function dispatch(t, e) {var n = this[t];n && n.call(this, e);}, dispose: function dispose() {this.proxy.dispose(), this.storage = this.proxy = this.painter = null;}, setCursorStyle: function setCursorStyle(t) {var e = this.proxy;e.setCursor && e.setCursor(t);}, dispatchToElement: function dispatchToElement(t, e, n) {var i = (t = t || {}).target;if (!i || !i.silent) {for (var r = \"on\" + e, a = function (t, e, n) {return { type: t, event: n, target: e.target, topTarget: e.topTarget, cancelBubble: !1, offsetX: n.zrX, offsetY: n.zrY, gestureEvent: n.gestureEvent, pinchX: n.pinchX, pinchY: n.pinchY, pinchScale: n.pinchScale, wheelDelta: n.zrDelta, zrByTouch: n.zrByTouch, which: n.which, stop: Dt };}(e, t, n); i && (i[r] && (a.cancelBubble = i[r].call(i, a)), i.trigger(e, a), i = i.parent, !a.cancelBubble);) {;}a.cancelBubble || (this.trigger(e, a), this.painter && this.painter.eachOtherLayer(function (t) {\"function\" == typeof t[r] && t[r].call(t, a), t.trigger && t.trigger(e, a);}));}}, findHover: function findHover(t, e, n) {for (var i = this.storage.getDisplayList(), r = { x: t, y: e }, a = i.length - 1; 0 <= a; a--) {var o;if (i[a] !== n && !i[a].ignore && (o = Ot(i[a], t, e)) && (r.topTarget || (r.topTarget = i[a]), o !== kt)) {r.target = i[a];break;}}return r;}, processGesture: function processGesture(t, e) {this._gestureMgr || (this._gestureMgr = new Mt());var n = this._gestureMgr;\"start\" === e && n.clear();var i = n.recognize(t, this.findHover(t.zrX, t.zrY, null).target, this.proxy.dom);if (\"end\" === e && n.clear(), i) {var r = i.type;t.gestureEvent = r, this.dispatchToElement({ target: i.target }, r, i.event);}} }, D([\"click\", \"mousedown\", \"mouseup\", \"mousewheel\", \"dblclick\", \"contextmenu\"], function (i) {Lt.prototype[i] = function (t) {var e = this.findHover(t.zrX, t.zrY),n = e.target;if (\"mousedown\" === i) this._downEl = n, this._downPoint = [t.zrX, t.zrY], this._upEl = n;else if (\"mouseup\" === i) this._upEl = n;else if (\"click\" === i) {if (this._downEl !== this._upEl || !this._downPoint || 4 < at(this._downPoint, [t.zrX, t.zrY])) return;this._downPoint = null;}this.dispatchToElement(e, i, t);};}), _(Lt, ft), _(Lt, ut);var Et = \"undefined\" == typeof Float32Array ? Array : Float32Array;function Nt() {var t = new Et(6);return Bt(t), t;}function Bt(t) {return t[0] = 1, t[1] = 0, t[2] = 0, t[3] = 1, t[4] = 0, t[5] = 0, t;}function zt(t, e, n) {var i = e[0] * n[0] + e[2] * n[1],r = e[1] * n[0] + e[3] * n[1],a = e[0] * n[2] + e[2] * n[3],o = e[1] * n[2] + e[3] * n[3],s = e[0] * n[4] + e[2] * n[5] + e[4],l = e[1] * n[4] + e[3] * n[5] + e[5];return t[0] = i, t[1] = r, t[2] = a, t[3] = o, t[4] = s, t[5] = l, t;}function Rt(t, e, n) {return t[0] = e[0], t[1] = e[1], t[2] = e[2], t[3] = e[3], t[4] = e[4] + n[0], t[5] = e[5] + n[1], t;}function Ft(t, e, n) {var i = e[0],r = e[2],a = e[4],o = e[1],s = e[3],l = e[5],h = Math.sin(n),u = Math.cos(n);return t[0] = i * u + o * h, t[1] = -i * h + o * u, t[2] = r * u + s * h, t[3] = -r * h + u * s, t[4] = u * a + h * l, t[5] = u * l - h * a, t;}function Vt(t, e, n) {var i = n[0],r = n[1];return t[0] = e[0] * i, t[1] = e[1] * r, t[2] = e[2] * i, t[3] = e[3] * r, t[4] = e[4] * i, t[5] = e[5] * r, t;}function Wt(t, e) {var n = e[0],i = e[2],r = e[4],a = e[1],o = e[3],s = e[5],l = n * o - a * i;return l ? (l = 1 / l, t[0] = o * l, t[1] = -a * l, t[2] = -i * l, t[3] = n * l, t[4] = (i * s - o * r) * l, t[5] = (a * r - n * s) * l, t) : null;}var Ht = Bt;function Gt(t) {return 5e-5 < t || t < -5e-5;}var Xt = function Xt(t) {(t = t || {}).position || (this.position = [0, 0]), null == t.rotation && (this.rotation = 0), t.scale || (this.scale = [1, 1]), this.origin = this.origin || null;},Ut = Xt.prototype;Ut.transform = null, Ut.needLocalTransform = function () {return Gt(this.rotation) || Gt(this.position[0]) || Gt(this.position[1]) || Gt(this.scale[0] - 1) || Gt(this.scale[1] - 1);};var Yt = [];Ut.updateTransform = function () {var t = this.parent,e = t && t.transform,n = this.needLocalTransform(),i = this.transform;if (n || e) {i = i || Nt(), n ? this.getLocalTransform(i) : Ht(i), e && (n ? zt(i, t.transform, i) : function (t, e) {t[0] = e[0], t[1] = e[1], t[2] = e[2], t[3] = e[3], t[4] = e[4], t[5] = e[5];}(i, t.transform)), this.transform = i;var r = this.globalScaleRatio;if (null != r && 1 !== r) {this.getGlobalScale(Yt);var a = Yt[0] < 0 ? -1 : 1,o = Yt[1] < 0 ? -1 : 1,s = ((Yt[0] - a) * r + a) / Yt[0] || 0,l = ((Yt[1] - o) * r + o) / Yt[1] || 0;i[0] *= s, i[1] *= s, i[2] *= l, i[3] *= l;}this.invTransform = this.invTransform || Nt(), Wt(this.invTransform, i);} else i && Ht(i);}, Ut.getLocalTransform = function (t) {return Xt.getLocalTransform(this, t);}, Ut.setTransform = function (t) {var e = this.transform,n = t.dpr || 1;e ? t.setTransform(n * e[0], n * e[1], n * e[2], n * e[3], n * e[4], n * e[5]) : t.setTransform(n, 0, 0, n, 0, 0);}, Ut.restoreTransform = function (t) {var e = t.dpr || 1;t.setTransform(e, 0, 0, e, 0, 0);};var qt = [],jt = Nt();Ut.setLocalTransform = function (t) {if (t) {var e = t[0] * t[0] + t[1] * t[1],n = t[2] * t[2] + t[3] * t[3],i = this.position,r = this.scale;Gt(e - 1) && (e = Math.sqrt(e)), Gt(n - 1) && (n = Math.sqrt(n)), t[0] < 0 && (e = -e), t[3] < 0 && (n = -n), i[0] = t[4], i[1] = t[5], r[0] = e, r[1] = n, this.rotation = Math.atan2(-t[1] / n, t[0] / e);}}, Ut.decomposeTransform = function () {if (this.transform) {var t = this.parent,e = this.transform;t && t.transform && (zt(qt, t.invTransform, e), e = qt);var n = this.origin;n && (n[0] || n[1]) && (jt[4] = n[0], jt[5] = n[1], zt(qt, e, jt), qt[4] -= n[0], qt[5] -= n[1], e = qt), this.setLocalTransform(e);}}, Ut.getGlobalScale = function (t) {var e = this.transform;return t = t || [], e ? (t[0] = Math.sqrt(e[0] * e[0] + e[1] * e[1]), t[1] = Math.sqrt(e[2] * e[2] + e[3] * e[3]), e[0] < 0 && (t[0] = -t[0]), e[3] < 0 && (t[1] = -t[1])) : (t[0] = 1, t[1] = 1), t;}, Ut.transformCoordToLocal = function (t, e) {var n = [t, e],i = this.invTransform;return i && st(n, n, i), n;}, Ut.transformCoordToGlobal = function (t, e) {var n = [t, e],i = this.transform;return i && st(n, n, i), n;}, Xt.getLocalTransform = function (t, e) {Ht(e = e || []);var n = t.origin,i = t.scale || [1, 1],r = t.rotation || 0,a = t.position || [0, 0];return n && (e[4] -= n[0], e[5] -= n[1]), Vt(e, e, i), r && Ft(e, e, r), n && (e[4] += n[0], e[5] += n[1]), e[4] += a[0], e[5] += a[1], e;};var Zt = { linear: function linear(t) {return t;}, quadraticIn: function quadraticIn(t) {return t * t;}, quadraticOut: function quadraticOut(t) {return t * (2 - t);}, quadraticInOut: function quadraticInOut(t) {return (t *= 2) < 1 ? .5 * t * t : -.5 * (--t * (t - 2) - 1);}, cubicIn: function cubicIn(t) {return t * t * t;}, cubicOut: function cubicOut(t) {return --t * t * t + 1;}, cubicInOut: function cubicInOut(t) {return (t *= 2) < 1 ? .5 * t * t * t : .5 * ((t -= 2) * t * t + 2);}, quarticIn: function quarticIn(t) {return t * t * t * t;}, quarticOut: function quarticOut(t) {return 1 - --t * t * t * t;}, quarticInOut: function quarticInOut(t) {return (t *= 2) < 1 ? .5 * t * t * t * t : -.5 * ((t -= 2) * t * t * t - 2);}, quinticIn: function quinticIn(t) {return t * t * t * t * t;}, quinticOut: function quinticOut(t) {return --t * t * t * t * t + 1;}, quinticInOut: function quinticInOut(t) {return (t *= 2) < 1 ? .5 * t * t * t * t * t : .5 * ((t -= 2) * t * t * t * t + 2);}, sinusoidalIn: function sinusoidalIn(t) {return 1 - Math.cos(t * Math.PI / 2);}, sinusoidalOut: function sinusoidalOut(t) {return Math.sin(t * Math.PI / 2);}, sinusoidalInOut: function sinusoidalInOut(t) {return .5 * (1 - Math.cos(Math.PI * t));}, exponentialIn: function exponentialIn(t) {return 0 === t ? 0 : Math.pow(1024, t - 1);}, exponentialOut: function exponentialOut(t) {return 1 === t ? 1 : 1 - Math.pow(2, -10 * t);}, exponentialInOut: function exponentialInOut(t) {return 0 === t ? 0 : 1 === t ? 1 : (t *= 2) < 1 ? .5 * Math.pow(1024, t - 1) : .5 * (2 - Math.pow(2, -10 * (t - 1)));}, circularIn: function circularIn(t) {return 1 - Math.sqrt(1 - t * t);}, circularOut: function circularOut(t) {return Math.sqrt(1 - --t * t);}, circularInOut: function circularInOut(t) {return (t *= 2) < 1 ? -.5 * (Math.sqrt(1 - t * t) - 1) : .5 * (Math.sqrt(1 - (t -= 2) * t) + 1);}, elasticIn: function elasticIn(t) {var e,n = .1;return 0 === t ? 0 : 1 === t ? 1 : (e = !n || n < 1 ? (n = 1, .1) : .4 * Math.asin(1 / n) / (2 * Math.PI), -n * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - e) * (2 * Math.PI) / .4));}, elasticOut: function elasticOut(t) {var e,n = .1;return 0 === t ? 0 : 1 === t ? 1 : (e = !n || n < 1 ? (n = 1, .1) : .4 * Math.asin(1 / n) / (2 * Math.PI), n * Math.pow(2, -10 * t) * Math.sin((t - e) * (2 * Math.PI) / .4) + 1);}, elasticInOut: function elasticInOut(t) {var e,n = .1;return 0 === t ? 0 : 1 === t ? 1 : (e = !n || n < 1 ? (n = 1, .1) : .4 * Math.asin(1 / n) / (2 * Math.PI), (t *= 2) < 1 ? n * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - e) * (2 * Math.PI) / .4) * -.5 : n * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - e) * (2 * Math.PI) / .4) * .5 + 1);}, backIn: function backIn(t) {return t * t * (2.70158 * t - 1.70158);}, backOut: function backOut(t) {return --t * t * (2.70158 * t + 1.70158) + 1;}, backInOut: function backInOut(t) {var e = 2.5949095;return (t *= 2) < 1 ? t * t * ((1 + e) * t - e) * .5 : .5 * ((t -= 2) * t * ((1 + e) * t + e) + 2);}, bounceIn: function bounceIn(t) {return 1 - Zt.bounceOut(1 - t);}, bounceOut: function bounceOut(t) {return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;}, bounceInOut: function bounceInOut(t) {return t < .5 ? .5 * Zt.bounceIn(2 * t) : .5 * Zt.bounceOut(2 * t - 1) + .5;} };function $t(t) {this._target = t.target, this._life = t.life || 1e3, this._delay = t.delay || 0, this._initialized = !1, this.loop = null != t.loop && t.loop, this.gap = t.gap || 0, this.easing = t.easing || \"Linear\", this.onframe = t.onframe, this.ondestroy = t.ondestroy, this.onrestart = t.onrestart, this._pausedTime = 0, this._paused = !1;}$t.prototype = { constructor: $t, step: function step(t, e) {if (this._initialized || (this._startTime = t + this._delay, this._initialized = !0), this._paused) this._pausedTime += e;else {var n = (t - this._startTime - this._pausedTime) / this._life;if (!(n < 0)) {n = Math.min(n, 1);var i = this.easing,r = \"string\" == typeof i ? Zt[i] : i,a = \"function\" == typeof r ? r(n) : n;return this.fire(\"frame\", a), 1 === n ? this.loop ? (this.restart(t), \"restart\") : (this._needsRemove = !0, \"destroy\") : null;}}}, restart: function restart(t) {var e = (t - this._startTime - this._pausedTime) % this._life;this._startTime = t - e + this.gap, this._pausedTime = 0, this._needsRemove = !1;}, fire: function fire(t, e) {this[t = \"on\" + t] && this[t](this._target, e);}, pause: function pause() {this._paused = !0;}, resume: function resume() {this._paused = !1;} };function Kt() {this.head = null, this.tail = null, this._len = 0;}var Qt = Kt.prototype;Qt.insert = function (t) {var e = new te(t);return this.insertEntry(e), e;}, Qt.insertEntry = function (t) {this.head ? ((this.tail.next = t).prev = this.tail, t.next = null, this.tail = t) : this.head = this.tail = t, this._len++;}, Qt.remove = function (t) {var e = t.prev,n = t.next;e ? e.next = n : this.head = n, n ? n.prev = e : this.tail = e, t.next = t.prev = null, this._len--;}, Qt.len = function () {return this._len;}, Qt.clear = function () {this.head = this.tail = null, this._len = 0;};function Jt(t) {this._list = new Kt(), this._map = {}, this._maxSize = t || 10, this._lastRemovedEntry = null;}var te = function te(t) {this.value = t, this.next, this.prev;},ee = Jt.prototype;ee.put = function (t, e) {var n = this._list,i = this._map,r = null;if (null == i[t]) {var a = n.len(),o = this._lastRemovedEntry;if (a >= this._maxSize && 0 < a) {var s = n.head;n.remove(s), delete i[s.key], r = s.value, this._lastRemovedEntry = s;}o ? o.value = e : o = new te(e), o.key = t, n.insertEntry(o), i[t] = o;}return r;}, ee.get = function (t) {var e = this._map[t],n = this._list;if (null != e) return e !== n.tail && (n.remove(e), n.insertEntry(e)), e.value;}, ee.clear = function () {this._list.clear(), this._map = {};};var ne = { transparent: [0, 0, 0, 0], aliceblue: [240, 248, 255, 1], antiquewhite: [250, 235, 215, 1], aqua: [0, 255, 255, 1], aquamarine: [127, 255, 212, 1], azure: [240, 255, 255, 1], beige: [245, 245, 220, 1], bisque: [255, 228, 196, 1], black: [0, 0, 0, 1], blanchedalmond: [255, 235, 205, 1], blue: [0, 0, 255, 1], blueviolet: [138, 43, 226, 1], brown: [165, 42, 42, 1], burlywood: [222, 184, 135, 1], cadetblue: [95, 158, 160, 1], chartreuse: [127, 255, 0, 1], chocolate: [210, 105, 30, 1], coral: [255, 127, 80, 1], cornflowerblue: [100, 149, 237, 1], cornsilk: [255, 248, 220, 1], crimson: [220, 20, 60, 1], cyan: [0, 255, 255, 1], darkblue: [0, 0, 139, 1], darkcyan: [0, 139, 139, 1], darkgoldenrod: [184, 134, 11, 1], darkgray: [169, 169, 169, 1], darkgreen: [0, 100, 0, 1], darkgrey: [169, 169, 169, 1], darkkhaki: [189, 183, 107, 1], darkmagenta: [139, 0, 139, 1], darkolivegreen: [85, 107, 47, 1], darkorange: [255, 140, 0, 1], darkorchid: [153, 50, 204, 1], darkred: [139, 0, 0, 1], darksalmon: [233, 150, 122, 1], darkseagreen: [143, 188, 143, 1], darkslateblue: [72, 61, 139, 1], darkslategray: [47, 79, 79, 1], darkslategrey: [47, 79, 79, 1], darkturquoise: [0, 206, 209, 1], darkviolet: [148, 0, 211, 1], deeppink: [255, 20, 147, 1], deepskyblue: [0, 191, 255, 1], dimgray: [105, 105, 105, 1], dimgrey: [105, 105, 105, 1], dodgerblue: [30, 144, 255, 1], firebrick: [178, 34, 34, 1], floralwhite: [255, 250, 240, 1], forestgreen: [34, 139, 34, 1], fuchsia: [255, 0, 255, 1], gainsboro: [220, 220, 220, 1], ghostwhite: [248, 248, 255, 1], gold: [255, 215, 0, 1], goldenrod: [218, 165, 32, 1], gray: [128, 128, 128, 1], green: [0, 128, 0, 1], greenyellow: [173, 255, 47, 1], grey: [128, 128, 128, 1], honeydew: [240, 255, 240, 1], hotpink: [255, 105, 180, 1], indianred: [205, 92, 92, 1], indigo: [75, 0, 130, 1], ivory: [255, 255, 240, 1], khaki: [240, 230, 140, 1], lavender: [230, 230, 250, 1], lavenderblush: [255, 240, 245, 1], lawngreen: [124, 252, 0, 1], lemonchiffon: [255, 250, 205, 1], lightblue: [173, 216, 230, 1], lightcoral: [240, 128, 128, 1], lightcyan: [224, 255, 255, 1], lightgoldenrodyellow: [250, 250, 210, 1], lightgray: [211, 211, 211, 1], lightgreen: [144, 238, 144, 1], lightgrey: [211, 211, 211, 1], lightpink: [255, 182, 193, 1], lightsalmon: [255, 160, 122, 1], lightseagreen: [32, 178, 170, 1], lightskyblue: [135, 206, 250, 1], lightslategray: [119, 136, 153, 1], lightslategrey: [119, 136, 153, 1], lightsteelblue: [176, 196, 222, 1], lightyellow: [255, 255, 224, 1], lime: [0, 255, 0, 1], limegreen: [50, 205, 50, 1], linen: [250, 240, 230, 1], magenta: [255, 0, 255, 1], maroon: [128, 0, 0, 1], mediumaquamarine: [102, 205, 170, 1], mediumblue: [0, 0, 205, 1], mediumorchid: [186, 85, 211, 1], mediumpurple: [147, 112, 219, 1], mediumseagreen: [60, 179, 113, 1], mediumslateblue: [123, 104, 238, 1], mediumspringgreen: [0, 250, 154, 1], mediumturquoise: [72, 209, 204, 1], mediumvioletred: [199, 21, 133, 1], midnightblue: [25, 25, 112, 1], mintcream: [245, 255, 250, 1], mistyrose: [255, 228, 225, 1], moccasin: [255, 228, 181, 1], navajowhite: [255, 222, 173, 1], navy: [0, 0, 128, 1], oldlace: [253, 245, 230, 1], olive: [128, 128, 0, 1], olivedrab: [107, 142, 35, 1], orange: [255, 165, 0, 1], orangered: [255, 69, 0, 1], orchid: [218, 112, 214, 1], palegoldenrod: [238, 232, 170, 1], palegreen: [152, 251, 152, 1], paleturquoise: [175, 238, 238, 1], palevioletred: [219, 112, 147, 1], papayawhip: [255, 239, 213, 1], peachpuff: [255, 218, 185, 1], peru: [205, 133, 63, 1], pink: [255, 192, 203, 1], plum: [221, 160, 221, 1], powderblue: [176, 224, 230, 1], purple: [128, 0, 128, 1], red: [255, 0, 0, 1], rosybrown: [188, 143, 143, 1], royalblue: [65, 105, 225, 1], saddlebrown: [139, 69, 19, 1], salmon: [250, 128, 114, 1], sandybrown: [244, 164, 96, 1], seagreen: [46, 139, 87, 1], seashell: [255, 245, 238, 1], sienna: [160, 82, 45, 1], silver: [192, 192, 192, 1], skyblue: [135, 206, 235, 1], slateblue: [106, 90, 205, 1], slategray: [112, 128, 144, 1], slategrey: [112, 128, 144, 1], snow: [255, 250, 250, 1], springgreen: [0, 255, 127, 1], steelblue: [70, 130, 180, 1], tan: [210, 180, 140, 1], teal: [0, 128, 128, 1], thistle: [216, 191, 216, 1], tomato: [255, 99, 71, 1], turquoise: [64, 224, 208, 1], violet: [238, 130, 238, 1], wheat: [245, 222, 179, 1], white: [255, 255, 255, 1], whitesmoke: [245, 245, 245, 1], yellow: [255, 255, 0, 1], yellowgreen: [154, 205, 50, 1] };function ie(t) {return (t = Math.round(t)) < 0 ? 0 : 255 < t ? 255 : t;}function re(t) {return t < 0 ? 0 : 1 < t ? 1 : t;}function ae(t) {return t.length && \"%\" === t.charAt(t.length - 1) ? ie(parseFloat(t) / 100 * 255) : ie(parseInt(t, 10));}function oe(t) {return t.length && \"%\" === t.charAt(t.length - 1) ? re(parseFloat(t) / 100) : re(parseFloat(t));}function se(t, e, n) {return n < 0 ? n += 1 : 1 < n && (n -= 1), 6 * n < 1 ? t + (e - t) * n * 6 : 2 * n < 1 ? e : 3 * n < 2 ? t + (e - t) * (2 / 3 - n) * 6 : t;}function le(t, e, n, i, r) {return t[0] = e, t[1] = n, t[2] = i, t[3] = r, t;}function he(t, e) {return t[0] = e[0], t[1] = e[1], t[2] = e[2], t[3] = e[3], t;}var ue = new Jt(20),ce = null;function de(t, e) {ce && he(ce, e), ce = ue.put(t, ce || e.slice());}function fe(t, e) {if (t) {e = e || [];var n = ue.get(t);if (n) return he(e, n);var i,r = (t += \"\").replace(/ /g, \"\").toLowerCase();if (r in ne) return he(e, ne[r]), de(t, e), e;if (\"#\" === r.charAt(0)) return 4 === r.length ? 0 <= (i = parseInt(r.substr(1), 16)) && i <= 4095 ? (le(e, (3840 & i) >> 4 | (3840 & i) >> 8, 240 & i | (240 & i) >> 4, 15 & i | (15 & i) << 4, 1), de(t, e), e) : void le(e, 0, 0, 0, 1) : 7 === r.length ? 0 <= (i = parseInt(r.substr(1), 16)) && i <= 16777215 ? (le(e, (16711680 & i) >> 16, (65280 & i) >> 8, 255 & i, 1), de(t, e), e) : void le(e, 0, 0, 0, 1) : void 0;var a = r.indexOf(\"(\"),o = r.indexOf(\")\");if (-1 !== a && o + 1 === r.length) {var s = r.substr(0, a),l = r.substr(a + 1, o - (a + 1)).split(\",\"),h = 1;switch (s) {case \"rgba\":if (4 !== l.length) return void le(e, 0, 0, 0, 1);h = oe(l.pop());case \"rgb\":return 3 !== l.length ? void le(e, 0, 0, 0, 1) : (le(e, ae(l[0]), ae(l[1]), ae(l[2]), h), de(t, e), e);case \"hsla\":return 4 !== l.length ? void le(e, 0, 0, 0, 1) : (l[3] = oe(l[3]), pe(l, e), de(t, e), e);case \"hsl\":return 3 !== l.length ? void le(e, 0, 0, 0, 1) : (pe(l, e), de(t, e), e);default:return;}}le(e, 0, 0, 0, 1);}}function pe(t, e) {var n = (parseFloat(t[0]) % 360 + 360) % 360 / 360,i = oe(t[1]),r = oe(t[2]),a = r <= .5 ? r * (i + 1) : r + i - r * i,o = 2 * r - a;return le(e = e || [], ie(255 * se(o, a, n + 1 / 3)), ie(255 * se(o, a, n)), ie(255 * se(o, a, n - 1 / 3)), 1), 4 === t.length && (e[3] = t[3]), e;}function ge(t, e) {if (t && t.length) {var n = t[0] + \",\" + t[1] + \",\" + t[2];return \"rgba\" !== e && \"hsva\" !== e && \"hsla\" !== e || (n += \",\" + t[3]), e + \"(\" + n + \")\";}}var ve = Array.prototype.slice;function me(t, e) {return t[e];}function ye(t, e, n) {t[e] = n;}function _e(t, e, n) {return (e - t) * n + t;}function xe(t, e, n) {return .5 < n ? e : t;}function we(t, e, n, i, r) {var a = t.length;if (1 === r) for (var o = 0; o < a; o++) {i[o] = _e(t[o], e[o], n);} else {var s = a && t[0].length;for (o = 0; o < a; o++) {for (var l = 0; l < s; l++) {i[o][l] = _e(t[o][l], e[o][l], n);}}}}function be(t, e, n) {var i = t.length,r = e.length;if (i !== r) if (r < i) t.length = r;else for (var a = i; a < r; a++) {t.push(1 === n ? e[a] : ve.call(e[a]));}var o = t[0] && t[0].length;for (a = 0; a < t.length; a++) {if (1 === n) isNaN(t[a]) && (t[a] = e[a]);else for (var s = 0; s < o; s++) {isNaN(t[a][s]) && (t[a][s] = e[a][s]);}}}function Se(t, e, n) {if (t === e) return !0;var i = t.length;if (i !== e.length) return !1;if (1 === n) {for (var r = 0; r < i; r++) {if (t[r] !== e[r]) return !1;}} else {var a = t[0].length;for (r = 0; r < i; r++) {for (var o = 0; o < a; o++) {if (t[r][o] !== e[r][o]) return !1;}}}return !0;}function Me(t, e, n, i, r, a, o, s, l) {var h = t.length;if (1 === l) for (var u = 0; u < h; u++) {s[u] = Ie(t[u], e[u], n[u], i[u], r, a, o);} else {var c = t[0].length;for (u = 0; u < h; u++) {for (var d = 0; d < c; d++) {s[u][d] = Ie(t[u][d], e[u][d], n[u][d], i[u][d], r, a, o);}}}}function Ie(t, e, n, i, r, a, o) {var s = .5 * (n - t),l = .5 * (i - e);return (2 * (e - n) + s + l) * o + (-3 * (e - n) - 2 * s - l) * a + s * r + e;}function Te(t) {if (P(t)) {var e = t.length;if (P(t[0])) {for (var n = [], i = 0; i < e; i++) {n.push(ve.call(t[i]));}return n;}return ve.call(t);}return t;}function Ce(t) {return t[0] = Math.floor(t[0]), t[1] = Math.floor(t[1]), t[2] = Math.floor(t[2]), \"rgba(\" + t.join(\",\") + \")\";}function ke(t, e, n, i, a, r) {var o = t._getter,s = t._setter,l = \"spline\" === e,h = i.length;if (h) {var u,c = P(i[0].value),d = !1,f = !1,p = c ? function (t) {var e = t[t.length - 1].value;return P(e && e[0]) ? 2 : 1;}(i) : 0;i.sort(function (t, e) {return t.time - e.time;}), u = i[h - 1].time;for (var g = [], v = [], m = i[0].value, y = !0, _ = 0; _ < h; _++) {g.push(i[_].time / u);var x = i[_].value;if (c && Se(x, m, p) || !c && x === m || (y = !1), \"string\" == typeof (m = x)) {var w = fe(x);w ? (x = w, d = !0) : f = !0;}v.push(x);}if (r || !y) {var b = v[h - 1];for (_ = 0; _ < h - 1; _++) {c ? be(v[_], b, p) : !isNaN(v[_]) || isNaN(b) || f || d || (v[_] = b);}c && be(o(t._target, a), b, p);var S,M,I,T,C,k = 0,D = 0;if (d) var A = [0, 0, 0, 0];var L = new $t({ target: t._target, life: u, loop: t._loop, delay: t._delay, onframe: function onframe(t, e) {var n;if (e < 0) n = 0;else if (e < D) {for (n = Math.min(k + 1, h - 1); 0 <= n && !(g[n] <= e); n--) {;}n = Math.min(n, h - 2);} else {for (n = k; n < h && !(g[n] > e); n++) {;}n = Math.min(n - 1, h - 2);}D = e;var i = g[(k = n) + 1] - g[n];if (0 != i) if (S = (e - g[n]) / i, l) {if (I = v[n], M = v[0 === n ? n : n - 1], T = v[h - 2 < n ? h - 1 : n + 1], C = v[h - 3 < n ? h - 1 : n + 2], c) Me(M, I, T, C, S, S * S, S * S * S, o(t, a), p);else {if (d) r = Me(M, I, T, C, S, S * S, S * S * S, A, 1), r = Ce(A);else {if (f) return xe(I, T, S);r = Ie(M, I, T, C, S, S * S, S * S * S);}s(t, a, r);}} else if (c) we(v[n], v[n + 1], S, o(t, a), p);else {var r;if (d) we(v[n], v[n + 1], S, A, 1), r = Ce(A);else {if (f) return xe(v[n], v[n + 1], S);r = _e(v[n], v[n + 1], S);}s(t, a, r);}}, ondestroy: n });return e && \"spline\" !== e && (L.easing = e), L;}}}function De(t, e, n, i) {this._tracks = {}, this._target = t, this._loop = e || !1, this._getter = n || me, this._setter = i || ye, this._clipCount = 0, this._delay = 0, this._doneList = [], this._onframeList = [], this._clipList = [];}De.prototype = { when: function when(t, e) {var n = this._tracks;for (var i in e) {if (e.hasOwnProperty(i)) {if (!n[i]) {n[i] = [];var r = this._getter(this._target, i);if (null == r) continue;0 !== t && n[i].push({ time: 0, value: Te(r) });}n[i].push({ time: t, value: e[i] });}}return this;}, during: function during(t) {return this._onframeList.push(t), this;}, pause: function pause() {for (var t = 0; t < this._clipList.length; t++) {this._clipList[t].pause();}this._paused = !0;}, resume: function resume() {for (var t = 0; t < this._clipList.length; t++) {this._clipList[t].resume();}this._paused = !1;}, isPaused: function isPaused() {return !!this._paused;}, _doneCallback: function _doneCallback() {this._tracks = {}, this._clipList.length = 0;for (var t = this._doneList, e = t.length, n = 0; n < e; n++) {t[n].call(this);}}, start: function start(t, e) {function n() {--a || r._doneCallback();}var i,r = this,a = 0;for (var o in this._tracks) {if (this._tracks.hasOwnProperty(o)) {var s = ke(this, t, n, this._tracks[o], o, e);s && (this._clipList.push(s), a++, this.animation && this.animation.addClip(s), i = s);}}if (i) {var l = i.onframe;i.onframe = function (t, e) {l(t, e);for (var n = 0; n < r._onframeList.length; n++) {r._onframeList[n](t, e);}};}return a || this._doneCallback(), this;}, stop: function stop(t) {for (var e = this._clipList, n = this.animation, i = 0; i < e.length; i++) {var r = e[i];t && r.onframe(this._target, 1), n && n.removeClip(r);}e.length = 0;}, delay: function delay(t) {return this._delay = t, this;}, done: function done(t) {return t && this._doneList.push(t), this;}, getClips: function getClips() {return this._clipList;} };var Ae = 1;\"undefined\" != typeof window && (Ae = Math.max(window.devicePixelRatio || 1, 1));var Le = Ae,Pe = function Pe() {};function Oe() {this.animators = [];}var Ee = Pe;function Ne(t, e, n, i, r, a, o, s) {L(i) ? (a = r, r = i, i = 0) : T(r) ? (a = r, r = \"linear\", i = 0) : T(i) ? (a = i, i = 0) : n = T(n) ? (a = n, 500) : n || 500, t.stopAnimation(), function t(e, n, i, r, a, o, s) {var l = {};var h = 0;for (var u in r) {r.hasOwnProperty(u) && (null != i[u] ? O(r[u]) && !P(r[u]) ? t(e, n ? n + \".\" + u : u, i[u], r[u], a, o, s) : (s ? (l[u] = i[u], Be(e, n, u, r[u])) : l[u] = r[u], h++) : null == r[u] || s || Be(e, n, u, r[u]));}0 < h && e.animate(n, !1).when(null == a ? 500 : a, l).delay(o || 0);}(t, \"\", t, e, n, i, s);var l = t.animators.slice(),h = l.length;function u() {--h || a && a();}h || a && a();for (var c = 0; c < l.length; c++) {l[c].done(u).start(r, o);}}function Be(t, e, n, i) {if (e) {var r = {};r[e] = {}, r[e][n] = i, t.attr(r);} else t.attr(n, i);}Oe.prototype = { constructor: Oe, animate: function animate(t, e) {var n,i = !1,r = this,a = this.__zr;if (t) {var o = t.split(\".\"),s = r;i = \"shape\" === o[0];for (var l = 0, h = o.length; l < h; l++) {s = s && s[o[l]];}s && (n = s);} else n = r;if (n) {var u = r.animators,c = new De(n, e);return c.during(function (t) {r.dirty(i);}).done(function () {u.splice(v(u, c), 1);}), u.push(c), a && a.animation.addAnimator(c), c;}Ee('Property \"' + t + '\" is not existed in element ' + r.id);}, stopAnimation: function stopAnimation(t) {for (var e = this.animators, n = e.length, i = 0; i < n; i++) {e[i].stop(t);}return e.length = 0, this;}, animateTo: function animateTo(t, e, n, i, r, a) {Ne(this, t, e, n, i, r, a);}, animateFrom: function animateFrom(t, e, n, i, r, a) {Ne(this, t, e, n, i, r, a, !0);} };var ze = function ze(t) {Xt.call(this, t), ft.call(this, t), Oe.call(this, t), this.id = t.id || n();};ze.prototype = { type: \"element\", name: \"\", __zr: null, ignore: !1, clipPath: null, isGroup: !1, drift: function drift(t, e) {switch (this.draggable) {case \"horizontal\":e = 0;break;case \"vertical\":t = 0;}var n = this.transform;(n = n || (this.transform = [1, 0, 0, 1, 0, 0]))[4] += t, n[5] += e, this.decomposeTransform(), this.dirty(!1);}, beforeUpdate: function beforeUpdate() {}, afterUpdate: function afterUpdate() {}, update: function update() {this.updateTransform();}, traverse: function traverse(t, e) {}, attrKV: function attrKV(t, e) {if (\"position\" === t || \"scale\" === t || \"origin\" === t) {if (e) {var n = this[t];(n = n || (this[t] = []))[0] = e[0], n[1] = e[1];}} else this[t] = e;}, hide: function hide() {this.ignore = !0, this.__zr && this.__zr.refresh();}, show: function show() {this.ignore = !1, this.__zr && this.__zr.refresh();}, attr: function attr(t, e) {if (\"string\" == typeof t) this.attrKV(t, e);else if (O(t)) for (var n in t) {t.hasOwnProperty(n) && this.attrKV(n, t[n]);}return this.dirty(!1), this;}, setClipPath: function setClipPath(t) {var e = this.__zr;e && t.addSelfToZr(e), this.clipPath && this.clipPath !== t && this.removeClipPath(), (this.clipPath = t).__zr = e, (t.__clipTarget = this).dirty(!1);}, removeClipPath: function removeClipPath() {var t = this.clipPath;t && (t.__zr && t.removeSelfFromZr(t.__zr), t.__zr = null, t.__clipTarget = null, this.clipPath = null, this.dirty(!1));}, addSelfToZr: function addSelfToZr(t) {this.__zr = t;var e = this.animators;if (e) for (var n = 0; n < e.length; n++) {t.animation.addAnimator(e[n]);}this.clipPath && this.clipPath.addSelfToZr(t);}, removeSelfFromZr: function removeSelfFromZr(t) {this.__zr = null;var e = this.animators;if (e) for (var n = 0; n < e.length; n++) {t.animation.removeAnimator(e[n]);}this.clipPath && this.clipPath.removeSelfFromZr(t);} }, _(ze, Oe), _(ze, Xt), _(ze, ft);var Re,Fe,Ve,We,He = st,Ge = Math.min,Xe = Math.max;function Ue(t, e, n, i) {n < 0 && (t += n, n = -n), i < 0 && (e += i, i = -i), this.x = t, this.y = e, this.width = n, this.height = i;}Ue.prototype = { constructor: Ue, union: function union(t) {var e = Ge(t.x, this.x),n = Ge(t.y, this.y);this.width = Xe(t.x + t.width, this.x + this.width) - e, this.height = Xe(t.y + t.height, this.y + this.height) - n, this.x = e, this.y = n;}, applyTransform: (Re = [], Fe = [], Ve = [], We = [], function (t) {if (t) {Re[0] = Ve[0] = this.x, Re[1] = We[1] = this.y, Fe[0] = We[0] = this.x + this.width, Fe[1] = Ve[1] = this.y + this.height, He(Re, Re, t), He(Fe, Fe, t), He(Ve, Ve, t), He(We, We, t), this.x = Ge(Re[0], Fe[0], Ve[0], We[0]), this.y = Ge(Re[1], Fe[1], Ve[1], We[1]);var e = Xe(Re[0], Fe[0], Ve[0], We[0]),n = Xe(Re[1], Fe[1], Ve[1], We[1]);this.width = e - this.x, this.height = n - this.y;}}), calculateTransform: function calculateTransform(t) {var e = t.width / this.width,n = t.height / this.height,i = Nt();return Rt(i, i, [-this.x, -this.y]), Vt(i, i, [e, n]), Rt(i, i, [t.x, t.y]), i;}, intersect: function intersect(t) {if (!t) return !1;t instanceof Ue || (t = Ue.create(t));var e = this,n = e.x,i = e.x + e.width,r = e.y,a = e.y + e.height,o = t.x,s = t.x + t.width,l = t.y,h = t.y + t.height;return !(i < o || s < n || a < l || h < r);}, contain: function contain(t, e) {var n = this;return t >= n.x && t <= n.x + n.width && e >= n.y && e <= n.y + n.height;}, clone: function clone() {return new Ue(this.x, this.y, this.width, this.height);}, copy: function copy(t) {this.x = t.x, this.y = t.y, this.width = t.width, this.height = t.height;}, plain: function plain() {return { x: this.x, y: this.y, width: this.width, height: this.height };} }, Ue.create = function (t) {return new Ue(t.x, t.y, t.width, t.height);};var Ye = function Ye(t) {for (var e in t = t || {}, ze.call(this, t), t) {t.hasOwnProperty(e) && (this[e] = t[e]);}this._children = [], this.__storage = null, this.__dirty = !0;};Ye.prototype = { constructor: Ye, isGroup: !0, type: \"group\", silent: !1, children: function children() {return this._children.slice();}, childAt: function childAt(t) {return this._children[t];}, childOfName: function childOfName(t) {for (var e = this._children, n = 0; n < e.length; n++) {if (e[n].name === t) return e[n];}}, childCount: function childCount() {return this._children.length;}, add: function add(t) {return t && t !== this && t.parent !== this && (this._children.push(t), this._doAdd(t)), this;}, addBefore: function addBefore(t, e) {if (t && t !== this && t.parent !== this && e && e.parent === this) {var n = this._children,i = n.indexOf(e);0 <= i && (n.splice(i, 0, t), this._doAdd(t));}return this;}, _doAdd: function _doAdd(t) {t.parent && t.parent.remove(t);var e = (t.parent = this).__storage,n = this.__zr;e && e !== t.__storage && (e.addToStorage(t), t instanceof Ye && t.addChildrenToStorage(e)), n && n.refresh();}, remove: function remove(t) {var e = this.__zr,n = this.__storage,i = this._children,r = v(i, t);return r < 0 || (i.splice(r, 1), t.parent = null, n && (n.delFromStorage(t), t instanceof Ye && t.delChildrenFromStorage(n)), e && e.refresh()), this;}, removeAll: function removeAll() {var t,e,n = this._children,i = this.__storage;for (e = 0; e < n.length; e++) {t = n[e], i && (i.delFromStorage(t), t instanceof Ye && t.delChildrenFromStorage(i)), t.parent = null;}return n.length = 0, this;}, eachChild: function eachChild(t, e) {for (var n = this._children, i = 0; i < n.length; i++) {var r = n[i];t.call(e, r, i);}return this;}, traverse: function traverse(t, e) {for (var n = 0; n < this._children.length; n++) {var i = this._children[n];t.call(e, i), \"group\" === i.type && i.traverse(t, e);}return this;}, addChildrenToStorage: function addChildrenToStorage(t) {for (var e = 0; e < this._children.length; e++) {var n = this._children[e];t.addToStorage(n), n instanceof Ye && n.addChildrenToStorage(t);}}, delChildrenFromStorage: function delChildrenFromStorage(t) {for (var e = 0; e < this._children.length; e++) {var n = this._children[e];t.delFromStorage(n), n instanceof Ye && n.delChildrenFromStorage(t);}}, dirty: function dirty() {return this.__dirty = !0, this.__zr && this.__zr.refresh(), this;}, getBoundingRect: function getBoundingRect(t) {for (var e = null, n = new Ue(0, 0, 0, 0), i = t || this._children, r = [], a = 0; a < i.length; a++) {var o = i[a];if (!o.ignore && !o.invisible) {var s = o.getBoundingRect(),l = o.getLocalTransform(r);l ? (n.copy(s), n.applyTransform(l), (e = e || n.clone()).union(n)) : (e = e || s.clone()).union(s);}}return e || n;} }, y(Ye, ze);var qe = 32,je = 7;function Ze(t, e, n, i) {var r = e + 1;if (r === n) return 1;if (i(t[r++], t[e]) < 0) {for (; r < n && i(t[r], t[r - 1]) < 0;) {r++;}!function (t, e, n) {n--;for (; e < n;) {var i = t[e];t[e++] = t[n], t[n--] = i;}}(t, e, r);} else for (; r < n && 0 <= i(t[r], t[r - 1]);) {r++;}return r - e;}function $e(t, e, n, i, r) {for (i === e && i++; i < n; i++) {for (var a, o = t[i], s = e, l = i; s < l;) {r(o, t[a = s + l >>> 1]) < 0 ? l = a : s = 1 + a;}var h = i - s;switch (h) {case 3:t[s + 3] = t[s + 2];case 2:t[s + 2] = t[s + 1];case 1:t[s + 1] = t[s];break;default:for (; 0 < h;) {t[s + h] = t[s + h - 1], h--;}}t[s] = o;}}function Ke(t, e, n, i, r, a) {var o = 0,s = 0,l = 1;if (0 < a(t, e[n + r])) {for (s = i - r; l < s && 0 < a(t, e[n + r + l]);) {(l = 1 + ((o = l) << 1)) <= 0 && (l = s);}s < l && (l = s), o += r, l += r;} else {for (s = r + 1; l < s && a(t, e[n + r - l]) <= 0;) {(l = 1 + ((o = l) << 1)) <= 0 && (l = s);}s < l && (l = s);var h = o;o = r - l, l = r - h;}for (o++; o < l;) {var u = o + (l - o >>> 1);0 < a(t, e[n + u]) ? o = u + 1 : l = u;}return l;}function Qe(t, e, n, i, r, a) {var o = 0,s = 0,l = 1;if (a(t, e[n + r]) < 0) {for (s = r + 1; l < s && a(t, e[n + r - l]) < 0;) {(l = 1 + ((o = l) << 1)) <= 0 && (l = s);}s < l && (l = s);var h = o;o = r - l, l = r - h;} else {for (s = i - r; l < s && 0 <= a(t, e[n + r + l]);) {(l = 1 + ((o = l) << 1)) <= 0 && (l = s);}s < l && (l = s), o += r, l += r;}for (o++; o < l;) {var u = o + (l - o >>> 1);a(t, e[n + u]) < 0 ? l = u : o = u + 1;}return l;}function Je(p, g) {var o,s,v = je,l = 0,m = [];function e(t) {var e = o[t],n = s[t],i = o[t + 1],r = s[t + 1];s[t] = n + r, t === l - 3 && (o[t + 1] = o[t + 2], s[t + 1] = s[t + 2]), l--;var a = Qe(p[i], p, e, n, 0, g);e += a, 0 !== (n -= a) && 0 !== (r = Ke(p[e + n - 1], p, i, r, r - 1, g)) && (n <= r ? function (t, e, n, i) {var r = 0;for (r = 0; r < e; r++) {m[r] = p[t + r];}var a = 0,o = n,s = t;if (p[s++] = p[o++], 0 == --i) {for (r = 0; r < e; r++) {p[s + r] = m[a + r];}return;}if (1 === e) {for (r = 0; r < i; r++) {p[s + r] = p[o + r];}return p[s + i] = m[a];}var l,h,u,c = v;for (;;) {h = l = 0, u = !1;do {if (g(p[o], m[a]) < 0) {if (p[s++] = p[o++], h++, (l = 0) == --i) {u = !0;break;}} else if (p[s++] = m[a++], l++, h = 0, 1 == --e) {u = !0;break;}} while ((l | h) < c);if (u) break;do {if (0 !== (l = Qe(p[o], m, a, e, 0, g))) {for (r = 0; r < l; r++) {p[s + r] = m[a + r];}if (s += l, a += l, (e -= l) <= 1) {u = !0;break;}}if (p[s++] = p[o++], 0 == --i) {u = !0;break;}if (0 !== (h = Ke(m[a], p, o, i, 0, g))) {for (r = 0; r < h; r++) {p[s + r] = p[o + r];}if (s += h, o += h, 0 === (i -= h)) {u = !0;break;}}if (p[s++] = m[a++], 1 == --e) {u = !0;break;}c--;} while (je <= l || je <= h);if (u) break;c < 0 && (c = 0), c += 2;}if ((v = c) < 1 && (v = 1), 1 === e) {for (r = 0; r < i; r++) {p[s + r] = p[o + r];}p[s + i] = m[a];} else {if (0 === e) throw new Error();for (r = 0; r < e; r++) {p[s + r] = m[a + r];}}}(e, n, i, r) : function (t, e, n, i) {var r = 0;for (r = 0; r < i; r++) {m[r] = p[n + r];}var a = t + e - 1,o = i - 1,s = n + i - 1,l = 0,h = 0;if (p[s--] = p[a--], 0 == --e) {for (l = s - (i - 1), r = 0; r < i; r++) {p[l + r] = m[r];}return;}if (1 === i) {for (h = (s -= e) + 1, l = (a -= e) + 1, r = e - 1; 0 <= r; r--) {p[h + r] = p[l + r];}return p[s] = m[o];}var u = v;for (;;) {var c = 0,d = 0,f = !1;do {if (g(m[o], p[a]) < 0) {if (p[s--] = p[a--], c++, (d = 0) == --e) {f = !0;break;}} else if (p[s--] = m[o--], d++, c = 0, 1 == --i) {f = !0;break;}} while ((c | d) < u);if (f) break;do {if (0 !== (c = e - Qe(m[o], p, t, e, e - 1, g))) {for (e -= c, h = (s -= c) + 1, l = (a -= c) + 1, r = c - 1; 0 <= r; r--) {p[h + r] = p[l + r];}if (0 === e) {f = !0;break;}}if (p[s--] = m[o--], 1 == --i) {f = !0;break;}if (0 !== (d = i - Ke(p[a], m, 0, i, i - 1, g))) {for (i -= d, h = (s -= d) + 1, l = (o -= d) + 1, r = 0; r < d; r++) {p[h + r] = m[l + r];}if (i <= 1) {f = !0;break;}}if (p[s--] = p[a--], 0 == --e) {f = !0;break;}u--;} while (je <= c || je <= d);if (f) break;u < 0 && (u = 0), u += 2;}(v = u) < 1 && (v = 1);if (1 === i) {for (h = (s -= e) + 1, l = (a -= e) + 1, r = e - 1; 0 <= r; r--) {p[h + r] = p[l + r];}p[s] = m[o];} else {if (0 === i) throw new Error();for (l = s - (i - 1), r = 0; r < i; r++) {p[l + r] = m[r];}}}(e, n, i, r));}o = [], s = [], this.mergeRuns = function () {for (; 1 < l;) {var t = l - 2;if (1 <= t && s[t - 1] <= s[t] + s[t + 1] || 2 <= t && s[t - 2] <= s[t] + s[t - 1]) s[t - 1] < s[t + 1] && t--;else if (s[t] > s[t + 1]) break;e(t);}}, this.forceMergeRuns = function () {for (; 1 < l;) {var t = l - 2;0 < t && s[t - 1] < s[t + 1] && t--, e(t);}}, this.pushRun = function (t, e) {o[l] = t, s[l] = e, l += 1;};}function tn(t, e, n, i) {n = n || 0;var r = (i = i || t.length) - n;if (!(r < 2)) {var a = 0;if (r < qe) $e(t, n, i, n + (a = Ze(t, n, i, e)), e);else {var o = new Je(t, e),s = function (t) {for (var e = 0; qe <= t;) {e |= 1 & t, t >>= 1;}return t + e;}(r);do {if ((a = Ze(t, n, i, e)) < s) {var l = r;s < l && (l = s), $e(t, n, n + l, n + a, e), a = l;}o.pushRun(n, a), o.mergeRuns(), r -= a, n += a;} while (0 !== r);o.forceMergeRuns();}}}function en(t, e) {return t.zlevel === e.zlevel ? t.z === e.z ? t.z2 - e.z2 : t.z - e.z : t.zlevel - e.zlevel;}function nn() {this._roots = [], this._displayList = [], this._displayListLen = 0;}nn.prototype = { constructor: nn, traverse: function traverse(t, e) {for (var n = 0; n < this._roots.length; n++) {this._roots[n].traverse(t, e);}}, getDisplayList: function getDisplayList(t, e) {return e = e || !1, t && this.updateDisplayList(e), this._displayList;}, updateDisplayList: function updateDisplayList(t) {this._displayListLen = 0;for (var e = this._roots, n = this._displayList, i = 0, r = e.length; i < r; i++) {this._updateAndAddDisplayable(e[i], null, t);}n.length = this._displayListLen, m.canvasSupported && tn(n, en);}, _updateAndAddDisplayable: function _updateAndAddDisplayable(t, e, n) {if (!t.ignore || n) {t.beforeUpdate(), t.__dirty && t.update(), t.afterUpdate();var i = t.clipPath;if (i) {e = e ? e.slice() : [];for (var r = i, a = t; r;) {r.parent = a, r.updateTransform(), e.push(r), r = (a = r).clipPath;}}if (t.isGroup) {for (var o = t._children, s = 0; s < o.length; s++) {var l = o[s];t.__dirty && (l.__dirty = !0), this._updateAndAddDisplayable(l, e, n);}t.__dirty = !1;} else t.__clipPaths = e, this._displayList[this._displayListLen++] = t;}}, addRoot: function addRoot(t) {t.__storage !== this && (t instanceof Ye && t.addChildrenToStorage(this), this.addToStorage(t), this._roots.push(t));}, delRoot: function delRoot(t) {if (null == t) {for (var e = 0; e < this._roots.length; e++) {var n = this._roots[e];n instanceof Ye && n.delChildrenFromStorage(this);}return this._roots = [], this._displayList = [], void (this._displayListLen = 0);}if (t instanceof Array) {e = 0;for (var i = t.length; e < i; e++) {this.delRoot(t[e]);}} else {var r = v(this._roots, t);0 <= r && (this.delFromStorage(t), this._roots.splice(r, 1), t instanceof Ye && t.delChildrenFromStorage(this));}}, addToStorage: function addToStorage(t) {return t && (t.__storage = this, t.dirty(!1)), this;}, delFromStorage: function delFromStorage(t) {return t && (t.__storage = null), this;}, dispose: function dispose() {this._renderList = this._roots = null;}, displayableSortFunc: en };var rn = { shadowBlur: 1, shadowOffsetX: 1, shadowOffsetY: 1, textShadowBlur: 1, textShadowOffsetX: 1, textShadowOffsetY: 1, textBoxShadowBlur: 1, textBoxShadowOffsetX: 1, textBoxShadowOffsetY: 1 },an = function an(t, e, n) {return rn.hasOwnProperty(e) ? n * t.dpr : n;},on = { NONE: 0, STYLE_BIND: 1, PLAIN_TEXT: 2 },sn = 9,ln = [[\"shadowBlur\", 0], [\"shadowOffsetX\", 0], [\"shadowOffsetY\", 0], [\"shadowColor\", \"#000\"], [\"lineCap\", \"butt\"], [\"lineJoin\", \"miter\"], [\"miterLimit\", 10]],hn = function hn(t) {this.extendFrom(t, !1);};function un(t, e, n) {var i = null == e.x ? 0 : e.x,r = null == e.x2 ? 1 : e.x2,a = null == e.y ? 0 : e.y,o = null == e.y2 ? 0 : e.y2;return e.global || (i = i * n.width + n.x, r = r * n.width + n.x, a = a * n.height + n.y, o = o * n.height + n.y), i = isNaN(i) ? 0 : i, r = isNaN(r) ? 1 : r, a = isNaN(a) ? 0 : a, o = isNaN(o) ? 0 : o, t.createLinearGradient(i, a, r, o);}function cn(t, e, n) {var i = n.width,r = n.height,a = Math.min(i, r),o = null == e.x ? .5 : e.x,s = null == e.y ? .5 : e.y,l = null == e.r ? .5 : e.r;return e.global || (o = o * i + n.x, s = s * r + n.y, l *= a), t.createRadialGradient(o, s, 0, o, s, l);}hn.prototype = { constructor: hn, fill: \"#000\", stroke: null, opacity: 1, fillOpacity: null, strokeOpacity: null, lineDash: null, lineDashOffset: 0, shadowBlur: 0, shadowOffsetX: 0, shadowOffsetY: 0, lineWidth: 1, strokeNoScale: !1, text: null, font: null, textFont: null, fontStyle: null, fontWeight: null, fontSize: null, fontFamily: null, textTag: null, textFill: \"#000\", textStroke: null, textWidth: null, textHeight: null, textStrokeWidth: 0, textLineHeight: null, textPosition: \"inside\", textRect: null, textOffset: null, textAlign: null, textVerticalAlign: null, textDistance: 5, textShadowColor: \"transparent\", textShadowBlur: 0, textShadowOffsetX: 0, textShadowOffsetY: 0, textBoxShadowColor: \"transparent\", textBoxShadowBlur: 0, textBoxShadowOffsetX: 0, textBoxShadowOffsetY: 0, transformText: !1, textRotation: 0, textOrigin: null, textBackgroundColor: null, textBorderColor: null, textBorderWidth: 0, textBorderRadius: 0, textPadding: null, rich: null, truncate: null, blend: null, bind: function bind(t, e, n) {var i = this,r = n && n.style,a = !r || t.__attrCachedBy !== on.STYLE_BIND;t.__attrCachedBy = on.STYLE_BIND;for (var o = 0; o < ln.length; o++) {var s = ln[o],l = s[0];!a && i[l] === r[l] || (t[l] = an(t, l, i[l] || s[1]));}if (!a && i.fill === r.fill || (t.fillStyle = i.fill), !a && i.stroke === r.stroke || (t.strokeStyle = i.stroke), !a && i.opacity === r.opacity || (t.globalAlpha = null == i.opacity ? 1 : i.opacity), !a && i.blend === r.blend || (t.globalCompositeOperation = i.blend || \"source-over\"), this.hasStroke()) {var h = i.lineWidth;t.lineWidth = h / (this.strokeNoScale && e && e.getLineScale ? e.getLineScale() : 1);}}, hasFill: function hasFill() {var t = this.fill;return null != t && \"none\" !== t;}, hasStroke: function hasStroke() {var t = this.stroke;return null != t && \"none\" !== t && 0 < this.lineWidth;}, extendFrom: function extendFrom(t, e) {if (t) for (var n in t) {!t.hasOwnProperty(n) || !0 !== e && (!1 === e ? this.hasOwnProperty(n) : null == t[n]) || (this[n] = t[n]);}}, set: function set(t, e) {\"string\" == typeof t ? this[t] = e : this.extendFrom(t, !0);}, clone: function clone() {var t = new this.constructor();return t.extendFrom(this, !0), t;}, getGradient: function getGradient(t, e, n) {for (var i = (\"radial\" === e.type ? cn : un)(t, e, n), r = e.colorStops, a = 0; a < r.length; a++) {i.addColorStop(r[a].offset, r[a].color);}return i;} };for (var dn = hn.prototype, fn = 0; fn < ln.length; fn++) {var pn = ln[fn];pn[0] in dn || (dn[pn[0]] = pn[1]);}hn.getGradient = dn.getGradient;function gn(t, e) {this.image = t, this.repeat = e, this.type = \"pattern\";}function vn() {return !1;}function mn(t, e, n) {var i = p(),r = e.getWidth(),a = e.getHeight(),o = i.style;return o && (o.position = \"absolute\", o.left = 0, o.top = 0, o.width = r + \"px\", o.height = a + \"px\", i.setAttribute(\"data-zr-dom-id\", t)), i.width = r * n, i.height = a * n, i;}function yn(t, e, n) {var i;n = n || Le, \"string\" == typeof t ? i = mn(t, e, n) : O(t) && (t = (i = t).id), this.id = t;var r = (this.dom = i).style;r && (i.onselectstart = vn, r[\"-webkit-user-select\"] = \"none\", r[\"user-select\"] = \"none\", r[\"-webkit-touch-callout\"] = \"none\", r[\"-webkit-tap-highlight-color\"] = \"rgba(0,0,0,0)\", r.padding = 0, r.margin = 0, r[\"border-width\"] = 0), this.domBack = null, this.ctxBack = null, this.painter = e, this.config = null, this.clearColor = 0, this.motionBlur = !1, this.lastFrameAlpha = .7, this.dpr = n;}yn.prototype = { constructor: yn, __dirty: !0, __used: !(gn.prototype.getCanvasPattern = function (t) {return t.createPattern(this.image, this.repeat || \"repeat\");}), __drawIndex: 0, __startIndex: 0, __endIndex: 0, incremental: !1, getElementCount: function getElementCount() {return this.__endIndex - this.__startIndex;}, initContext: function initContext() {this.ctx = this.dom.getContext(\"2d\"), this.ctx.dpr = this.dpr;}, createBackBuffer: function createBackBuffer() {var t = this.dpr;this.domBack = mn(\"back-\" + this.id, this.painter, t), this.ctxBack = this.domBack.getContext(\"2d\"), 1 !== t && this.ctxBack.scale(t, t);}, resize: function resize(t, e) {var n = this.dpr,i = this.dom,r = i.style,a = this.domBack;r && (r.width = t + \"px\", r.height = e + \"px\"), i.width = t * n, i.height = e * n, a && (a.width = t * n, a.height = e * n, 1 !== n && this.ctxBack.scale(n, n));}, clear: function clear(t, e) {var n,i = this.dom,r = this.ctx,a = i.width,o = i.height,s = (e = e || this.clearColor, this.motionBlur && !t),l = this.lastFrameAlpha,h = this.dpr;s && (this.domBack || this.createBackBuffer(), this.ctxBack.globalCompositeOperation = \"copy\", this.ctxBack.drawImage(i, 0, 0, a / h, o / h)), r.clearRect(0, 0, a, o), e && \"transparent\" !== e && (e.colorStops ? (n = e.__canvasGradient || hn.getGradient(r, e, { x: 0, y: 0, width: a, height: o }), e.__canvasGradient = n) : e.image && (n = gn.prototype.getCanvasPattern.call(e, r)), r.save(), r.fillStyle = n || e, r.fillRect(0, 0, a, o), r.restore());if (s) {var u = this.domBack;r.save(), r.globalAlpha = l, r.drawImage(u, 0, 0, a, o), r.restore();}} };var _n = \"undefined\" != typeof window && (window.requestAnimationFrame && window.requestAnimationFrame.bind(window) || window.msRequestAnimationFrame && window.msRequestAnimationFrame.bind(window) || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame) || function (t) {setTimeout(t, 16);},xn = new Jt(50);function wn(t) {if (\"string\" != typeof t) return t;var e = xn.get(t);return e && e.image;}function bn(t, e, n, i, r) {if (t) {if (\"string\" != typeof t) return t;if (e && e.__zrImageSrc === t || !n) return e;var a = xn.get(t),o = { hostEl: n, cb: i, cbPayload: r };return a ? Mn(e = a.image) || a.pending.push(o) : ((e = new Image()).onload = e.onerror = Sn, xn.put(t, e.__cachedImgObj = { image: e, pending: [o] }), e.src = e.__zrImageSrc = t), e;}return e;}function Sn() {var t = this.__cachedImgObj;this.onload = this.onerror = this.__cachedImgObj = null;for (var e = 0; e < t.pending.length; e++) {var n = t.pending[e],i = n.cb;i && i(this, n.cbPayload), n.hostEl.dirty();}t.pending.length = 0;}function Mn(t) {return t && t.width && t.height;}var In = {},Tn = 0,Cn = 5e3,kn = /\\{([a-zA-Z0-9_]+)\\|([^}]*)\\}/g,Dn = \"12px sans-serif\",An = {};function Ln(t, e) {var n = t + \":\" + (e = e || Dn);if (In[n]) return In[n];for (var i, r, a = (t + \"\").split(\"\\n\"), o = 0, s = 0, l = a.length; s < l; s++) {o = Math.max((i = a[s], r = e, An.measureText(i, r)).width, o);}return Cn < Tn && (Tn = 0, In = {}), Tn++, In[n] = o;}function Pn(t, e, n, i, r, a, o, s) {return o ? function (t, e, n, i, r, a, o, s) {var l = Hn(t, { rich: o, truncate: s, font: e, textAlign: n, textPadding: r, textLineHeight: a }),h = l.outerWidth,u = l.outerHeight,c = On(0, h, n),d = En(0, u, i);return new Ue(c, d, h, u);}(t, e, n, i, r, a, o, s) : function (t, e, n, i, r, a, o) {var s = Wn(t, e, r, a, o),l = Ln(t, e);r && (l += r[1] + r[3]);var h = s.outerHeight,u = On(0, l, n),c = En(0, h, i),d = new Ue(u, c, l, h);return d.lineHeight = s.lineHeight, d;}(t, e, n, i, r, a, s);}function On(t, e, n) {return \"right\" === n ? t -= e : \"center\" === n && (t -= e / 2), t;}function En(t, e, n) {return \"middle\" === n ? t -= e / 2 : \"bottom\" === n && (t -= e), t;}function Nn(t, e, n) {var i = e.textPosition,r = e.textDistance,a = n.x,o = n.y;r = r || 0;var s = n.height,l = n.width,h = s / 2,u = \"left\",c = \"top\";switch (i) {case \"left\":a -= r, o += h, u = \"right\", c = \"middle\";break;case \"right\":a += r + l, o += h, c = \"middle\";break;case \"top\":a += l / 2, o -= r, u = \"center\", c = \"bottom\";break;case \"bottom\":a += l / 2, o += s + r, u = \"center\";break;case \"inside\":a += l / 2, o += h, u = \"center\", c = \"middle\";break;case \"insideLeft\":a += r, o += h, c = \"middle\";break;case \"insideRight\":a += l - r, o += h, u = \"right\", c = \"middle\";break;case \"insideTop\":a += l / 2, o += r, u = \"center\";break;case \"insideBottom\":a += l / 2, o += s - r, u = \"center\", c = \"bottom\";break;case \"insideTopLeft\":a += r, o += r;break;case \"insideTopRight\":a += l - r, o += r, u = \"right\";break;case \"insideBottomLeft\":a += r, o += s - r, c = \"bottom\";break;case \"insideBottomRight\":a += l - r, o += s - r, u = \"right\", c = \"bottom\";}return (t = t || {}).x = a, t.y = o, t.textAlign = u, t.textVerticalAlign = c, t;}function Bn(t, e, n, i, r) {if (!e) return \"\";var a = (t + \"\").split(\"\\n\");r = zn(e, n, i, r);for (var o = 0, s = a.length; o < s; o++) {a[o] = Rn(a[o], r);}return a.join(\"\\n\");}function zn(t, e, n, i) {(i = S({}, i)).font = e;n = F(n, \"...\");i.maxIterations = F(i.maxIterations, 2);var r = i.minChar = F(i.minChar, 0);i.cnCharWidth = Ln(\"国\", e);var a = i.ascCharWidth = Ln(\"a\", e);i.placeholder = F(i.placeholder, \"\");for (var o = t = Math.max(0, t - 1), s = 0; s < r && a <= o; s++) {o -= a;}var l = Ln(n, e);return o < l && (n = \"\", l = 0), o = t - l, i.ellipsis = n, i.ellipsisWidth = l, i.contentWidth = o, i.containerWidth = t, i;}function Rn(t, e) {var n = e.containerWidth,i = e.font,r = e.contentWidth;if (!n) return \"\";var a = Ln(t, i);if (a <= n) return t;for (var o = 0;; o++) {if (a <= r || o >= e.maxIterations) {t += e.ellipsis;break;}var s = 0 === o ? Fn(t, r, e.ascCharWidth, e.cnCharWidth) : 0 < a ? Math.floor(t.length * r / a) : 0;a = Ln(t = t.substr(0, s), i);}return \"\" === t && (t = e.placeholder), t;}function Fn(t, e, n, i) {for (var r = 0, a = 0, o = t.length; a < o && r < e; a++) {var s = t.charCodeAt(a);r += 0 <= s && s <= 127 ? n : i;}return a;}function Vn(t) {return Ln(\"国\", t);}function Wn(t, e, n, i, r) {null != t && (t += \"\");var a = F(i, Vn(e)),o = t ? t.split(\"\\n\") : [],s = o.length * a,l = s,h = !0;if (n && (l += n[0] + n[2]), t && r) {h = !1;var u = r.outerHeight,c = r.outerWidth;if (null != u && u < l) t = \"\", o = [];else if (null != c) for (var d = zn(c - (n ? n[1] + n[3] : 0), e, r.ellipsis, { minChar: r.minChar, placeholder: r.placeholder }), f = 0, p = o.length; f < p; f++) {o[f] = Rn(o[f], d);}}return { lines: o, height: s, outerHeight: l, lineHeight: a, canCacheByTextString: h };}function Hn(t, e) {var n = { lines: [], width: 0, height: 0 };if (null != t && (t += \"\"), !t) return n;for (var i, r = kn.lastIndex = 0; null != (i = kn.exec(t));) {var a = i.index;r < a && Gn(n, t.substring(r, a)), Gn(n, i[2], i[1]), r = kn.lastIndex;}r < t.length && Gn(n, t.substring(r, t.length));var o = n.lines,s = 0,l = 0,h = [],u = e.textPadding,c = e.truncate,d = c && c.outerWidth,f = c && c.outerHeight;u && (null != d && (d -= u[1] + u[3]), null != f && (f -= u[0] + u[2]));for (var p = 0; p < o.length; p++) {for (var g = o[p], v = 0, m = 0, y = 0; y < g.tokens.length; y++) {var _ = (D = g.tokens[y]).styleName && e.rich[D.styleName] || {},x = D.textPadding = _.textPadding,w = D.font = _.font || e.font,b = D.textHeight = F(_.textHeight, Vn(w));if (x && (b += x[0] + x[2]), D.height = b, D.lineHeight = V(_.textLineHeight, e.textLineHeight, b), D.textAlign = _ && _.textAlign || e.textAlign, D.textVerticalAlign = _ && _.textVerticalAlign || \"middle\", null != f && s + D.lineHeight > f) return { lines: [], width: 0, height: 0 };D.textWidth = Ln(D.text, w);var S = _.textWidth,M = null == S || \"auto\" === S;if (\"string\" == typeof S && \"%\" === S.charAt(S.length - 1)) D.percentWidth = S, h.push(D), S = 0;else {if (M) {S = D.textWidth;var I = _.textBackgroundColor,T = I && I.image;T && Mn(T = wn(T)) && (S = Math.max(S, T.width * b / T.height));}var C = x ? x[1] + x[3] : 0;S += C;var k = null != d ? d - m : null;null != k && k < S && (!M || k < C ? (D.text = \"\", D.textWidth = S = 0) : (D.text = Bn(D.text, k - C, w, c.ellipsis, { minChar: c.minChar }), D.textWidth = Ln(D.text, w), S = D.textWidth + C));}m += D.width = S, _ && (v = Math.max(v, D.lineHeight));}g.width = m, s += g.lineHeight = v, l = Math.max(l, m);}n.outerWidth = n.width = F(e.textWidth, l), n.outerHeight = n.height = F(e.textHeight, s), u && (n.outerWidth += u[1] + u[3], n.outerHeight += u[0] + u[2]);for (p = 0; p < h.length; p++) {var D,A = (D = h[p]).percentWidth;D.width = parseInt(A, 10) / 100 * l;}return n;}function Gn(t, e, n) {for (var i = \"\" === e, r = e.split(\"\\n\"), a = t.lines, o = 0; o < r.length; o++) {var s = r[o],l = { styleName: n, text: s, isLineHolder: !s && !i };if (o) a.push({ tokens: [l] });else {var h = (a[a.length - 1] || (a[0] = { tokens: [] })).tokens,u = h.length;1 === u && h[0].isLineHolder ? h[0] = l : !s && u && !i || h.push(l);}}}function Xn(t, e) {var n,i,r,a,o,s = e.x,l = e.y,h = e.width,u = e.height,c = e.r;h < 0 && (s += h, h = -h), u < 0 && (l += u, u = -u), \"number\" == typeof c ? n = i = r = a = c : c instanceof Array ? 1 === c.length ? n = i = r = a = c[0] : 2 === c.length ? (n = r = c[0], i = a = c[1]) : 3 === c.length ? (n = c[0], i = a = c[1], r = c[2]) : (n = c[0], i = c[1], r = c[2], a = c[3]) : n = i = r = a = 0, h < n + i && (n *= h / (o = n + i), i *= h / o), h < r + a && (r *= h / (o = r + a), a *= h / o), u < i + r && (i *= u / (o = i + r), r *= u / o), u < n + a && (n *= u / (o = n + a), a *= u / o), t.moveTo(s + n, l), t.lineTo(s + h - i, l), 0 !== i && t.arc(s + h - i, l + i, i, -Math.PI / 2, 0), t.lineTo(s + h, l + u - r), 0 !== r && t.arc(s + h - r, l + u - r, r, 0, Math.PI / 2), t.lineTo(s + a, l + u), 0 !== a && t.arc(s + a, l + u - a, a, Math.PI / 2, Math.PI), t.lineTo(s, l + n), 0 !== n && t.arc(s + n, l + n, n, Math.PI, 1.5 * Math.PI);}An.measureText = function (t, e) {var n = g = g || p().getContext(\"2d\");return n.font = e || Dn, n.measureText(t);};var Un = Dn,Yn = { left: 1, right: 1, center: 1 },qn = { top: 1, bottom: 1, middle: 1 },jn = [[\"textShadowBlur\", \"shadowBlur\", 0], [\"textShadowOffsetX\", \"shadowOffsetX\", 0], [\"textShadowOffsetY\", \"shadowOffsetY\", 0], [\"textShadowColor\", \"shadowColor\", \"transparent\"]],Zn = {},$n = {};function Kn(t) {return Qn(t), D(t.rich, Qn), t;}function Qn(t) {if (t) {t.font = function (t) {var e = (t.fontSize || t.fontFamily) && [t.fontStyle, t.fontWeight, (t.fontSize || 12) + \"px\", t.fontFamily || \"sans-serif\"].join(\" \");return e && X(e) || t.textFont || t.font;}(t);var e = t.textAlign;\"middle\" === e && (e = \"center\"), t.textAlign = null == e || Yn[e] ? e : \"left\";var n = t.textVerticalAlign || t.textBaseline;\"center\" === n && (n = \"middle\"), t.textVerticalAlign = null == n || qn[n] ? n : \"top\", t.textPadding && (t.textPadding = H(t.textPadding));}}function Jn(t, e, n, i, r, a) {i.rich ? function (t, e, n, i, r, a) {a !== sn && (e.__attrCachedBy = on.NONE);var o = t.__textCotentBlock;o && !t.__dirtyText || (o = t.__textCotentBlock = Hn(n, i));!function (t, e, n, i, r) {var a = n.width,o = n.outerWidth,s = n.outerHeight,l = i.textPadding,h = ai($n, t, i, r),u = h.baseX,c = h.baseY,d = h.textAlign,f = h.textVerticalAlign;ti(e, i, r, u, c);var p = On(u, o, d),g = En(c, s, f),v = p,m = g;l && (v += l[3], m += l[0]);var y = v + a;ni(i) && ii(t, e, i, p, g, o, s);for (var _ = 0; _ < n.lines.length; _++) {for (var x, w = n.lines[_], b = w.tokens, S = b.length, M = w.lineHeight, I = w.width, T = 0, C = v, k = y, D = S - 1; T < S && (!(x = b[T]).textAlign || \"left\" === x.textAlign);) {ei(t, e, x, i, M, m, C, \"left\"), I -= x.width, C += x.width, T++;}for (; 0 <= D && \"right\" === (x = b[D]).textAlign;) {ei(t, e, x, i, M, m, k, \"right\"), I -= x.width, k -= x.width, D--;}for (C += (a - (C - v) - (y - k) - I) / 2; T <= D;) {x = b[T], ei(t, e, x, i, M, m, C + x.width / 2, \"center\"), C += x.width, T++;}m += M;}}(t, e, o, i, r);}(t, e, n, i, r, a) : function (t, e, n, i, r, a) {var o,s = ni(i),l = !1,h = e.__attrCachedBy === on.PLAIN_TEXT;a !== sn ? (a && (o = a.style, l = !s && h && o), e.__attrCachedBy = s ? on.NONE : on.PLAIN_TEXT) : h && (e.__attrCachedBy = on.NONE);var u = i.font || Un;l && u === (o.font || Un) || (e.font = u);var c = t.__computedFont;t.__styleFont !== u && (t.__styleFont = u, c = t.__computedFont = e.font);var d = i.textPadding,f = i.textLineHeight,p = t.__textCotentBlock;p && !t.__dirtyText || (p = t.__textCotentBlock = Wn(n, c, d, f, i.truncate));var g = p.outerHeight,v = p.lines,m = p.lineHeight,y = ai($n, t, i, r),_ = y.baseX,x = y.baseY,w = y.textAlign || \"left\",b = y.textVerticalAlign;ti(e, i, r, _, x);var S = En(x, g, b),M = _,I = S;if (s || d) {var T = Ln(n, c);d && (T += d[1] + d[3]);var C = On(_, T, w);s && ii(t, e, i, C, S, T, g), d && (M = ui(_, w, d), I += d[0]);}e.textAlign = w, e.textBaseline = \"middle\", e.globalAlpha = i.opacity || 1;for (var k = 0; k < jn.length; k++) {var D = jn[k],A = D[0],L = D[1],P = i[A];l && P === o[A] || (e[L] = an(e, L, P || D[2]));}I += m / 2;var O = i.textStrokeWidth,E = l ? o.textStrokeWidth : null,N = !l || O !== E,B = !l || N || i.textStroke !== o.textStroke,z = si(i.textStroke, O),R = li(i.textFill);z && (N && (e.lineWidth = O), B && (e.strokeStyle = z));R && (l && i.textFill === o.textFill || (e.fillStyle = R));if (1 === v.length) z && e.strokeText(v[0], M, I), R && e.fillText(v[0], M, I);else for (k = 0; k < v.length; k++) {z && e.strokeText(v[k], M, I), R && e.fillText(v[k], M, I), I += m;}}(t, e, n, i, r, a);}function ti(t, e, n, i, r) {if (n && e.textRotation) {var a = e.textOrigin;\"center\" === a ? (i = n.width / 2 + n.x, r = n.height / 2 + n.y) : a && (i = a[0] + n.x, r = a[1] + n.y), t.translate(i, r), t.rotate(-e.textRotation), t.translate(-i, -r);}}function ei(t, e, n, i, r, a, o, s) {var l = i.rich[n.styleName] || {};l.text = n.text;var h = n.textVerticalAlign,u = a + r / 2;\"top\" === h ? u = a + n.height / 2 : \"bottom\" === h && (u = a + r - n.height / 2), !n.isLineHolder && ni(l) && ii(t, e, l, \"right\" === s ? o - n.width : \"center\" === s ? o - n.width / 2 : o, u - n.height / 2, n.width, n.height);var c = n.textPadding;c && (o = ui(o, s, c), u -= n.height / 2 - c[2] - n.textHeight / 2), oi(e, \"shadowBlur\", V(l.textShadowBlur, i.textShadowBlur, 0)), oi(e, \"shadowColor\", l.textShadowColor || i.textShadowColor || \"transparent\"), oi(e, \"shadowOffsetX\", V(l.textShadowOffsetX, i.textShadowOffsetX, 0)), oi(e, \"shadowOffsetY\", V(l.textShadowOffsetY, i.textShadowOffsetY, 0)), oi(e, \"textAlign\", s), oi(e, \"textBaseline\", \"middle\"), oi(e, \"font\", n.font || Un);var d = si(l.textStroke || i.textStroke, p),f = li(l.textFill || i.textFill),p = F(l.textStrokeWidth, i.textStrokeWidth);d && (oi(e, \"lineWidth\", p), oi(e, \"strokeStyle\", d), e.strokeText(n.text, o, u)), f && (oi(e, \"fillStyle\", f), e.fillText(n.text, o, u));}function ni(t) {return !!(t.textBackgroundColor || t.textBorderWidth && t.textBorderColor);}function ii(t, e, n, i, r, a, o) {var s = n.textBackgroundColor,l = n.textBorderWidth,h = n.textBorderColor,u = L(s);if (oi(e, \"shadowBlur\", n.textBoxShadowBlur || 0), oi(e, \"shadowColor\", n.textBoxShadowColor || \"transparent\"), oi(e, \"shadowOffsetX\", n.textBoxShadowOffsetX || 0), oi(e, \"shadowOffsetY\", n.textBoxShadowOffsetY || 0), u || l && h) {e.beginPath();var c = n.textBorderRadius;c ? Xn(e, { x: i, y: r, width: a, height: o, r: c }) : e.rect(i, r, a, o), e.closePath();}if (u) {if (oi(e, \"fillStyle\", s), null != n.fillOpacity) {var d = e.globalAlpha;e.globalAlpha = n.fillOpacity * n.opacity, e.fill(), e.globalAlpha = d;} else e.fill();} else if (O(s)) {var f = s.image;(f = bn(f, null, t, ri, s)) && Mn(f) && e.drawImage(f, i, r, a, o);}if (l && h) if (oi(e, \"lineWidth\", l), oi(e, \"strokeStyle\", h), null != n.strokeOpacity) {d = e.globalAlpha;e.globalAlpha = n.strokeOpacity * n.opacity, e.stroke(), e.globalAlpha = d;} else e.stroke();}function ri(t, e) {e.image = t;}function ai(t, e, n, i) {var r = n.x || 0,a = n.y || 0,o = n.textAlign,s = n.textVerticalAlign;if (i) {var l = n.textPosition;if (l instanceof Array) r = i.x + hi(l[0], i.width), a = i.y + hi(l[1], i.height);else {var h = e && e.calculateTextPosition ? e.calculateTextPosition(Zn, n, i) : Nn(Zn, n, i);r = h.x, a = h.y, o = o || h.textAlign, s = s || h.textVerticalAlign;}var u = n.textOffset;u && (r += u[0], a += u[1]);}return (t = t || {}).baseX = r, t.baseY = a, t.textAlign = o, t.textVerticalAlign = s, t;}function oi(t, e, n) {return t[e] = an(t, e, n), t[e];}function si(t, e) {return null == t || e <= 0 || \"transparent\" === t || \"none\" === t ? null : t.image || t.colorStops ? \"#000\" : t;}function li(t) {return null == t || \"none\" === t ? null : t.image || t.colorStops ? \"#000\" : t;}function hi(t, e) {return \"string\" == typeof t ? 0 <= t.lastIndexOf(\"%\") ? parseFloat(t) / 100 * e : parseFloat(t) : t;}function ui(t, e, n) {return \"right\" === e ? t - n[1] : \"center\" === e ? t + n[3] / 2 - n[1] / 2 : t + n[3];}function ci(t, e) {return null != t && (t || e.textBackgroundColor || e.textBorderWidth && e.textBorderColor || e.textPadding);}function di() {}var fi = new Ue();function pi(t) {for (var e in t = t || {}, ze.call(this, t), t) {t.hasOwnProperty(e) && \"style\" !== e && (this[e] = t[e]);}this.style = new hn(t.style, this), this._rect = null, this.__clipPaths = null;}function gi(t) {pi.call(this, t);}pi.prototype = { constructor: pi, type: \"displayable\", __dirty: !0, invisible: !(di.prototype = { constructor: di, drawRectText: function drawRectText(t, e) {var n = this.style;e = n.textRect || e, this.__dirty && Kn(n);var i = n.text;if (null != i && (i += \"\"), ci(i, n)) {t.save();var r = this.transform;n.transformText ? this.setTransform(t) : r && (fi.copy(e), fi.applyTransform(r), e = fi), Jn(this, t, i, n, e, sn), t.restore();}} }), z: 0, z2: 0, zlevel: 0, draggable: !1, dragging: !1, silent: !1, culling: !1, cursor: \"pointer\", rectHover: !1, progressive: !1, incremental: !1, globalScaleRatio: 1, beforeBrush: function beforeBrush(t) {}, afterBrush: function afterBrush(t) {}, brush: function brush(t, e) {}, getBoundingRect: function getBoundingRect() {}, contain: function contain(t, e) {return this.rectContain(t, e);}, traverse: function traverse(t, e) {t.call(e, this);}, rectContain: function rectContain(t, e) {var n = this.transformCoordToLocal(t, e);return this.getBoundingRect().contain(n[0], n[1]);}, dirty: function dirty() {this.__dirty = this.__dirtyText = !0, this._rect = null, this.__zr && this.__zr.refresh();}, animateStyle: function animateStyle(t) {return this.animate(\"style\", t);}, attrKV: function attrKV(t, e) {\"style\" !== t ? ze.prototype.attrKV.call(this, t, e) : this.style.set(e);}, setStyle: function setStyle(t, e) {return this.style.set(t, e), this.dirty(!1), this;}, useStyle: function useStyle(t) {return this.style = new hn(t, this), this.dirty(!1), this;}, calculateTextPosition: null }, y(pi, ze), _(pi, di), gi.prototype = { constructor: gi, type: \"image\", brush: function brush(t, e) {var n = this.style,i = n.image;n.bind(t, this, e);var r = this._image = bn(i, this._image, this, this.onload);if (r && Mn(r)) {var a = n.x || 0,o = n.y || 0,s = n.width,l = n.height,h = r.width / r.height;if (null == s && null != l ? s = l * h : null == l && null != s ? l = s / h : null == s && null == l && (s = r.width, l = r.height), this.setTransform(t), n.sWidth && n.sHeight) {var u = n.sx || 0,c = n.sy || 0;t.drawImage(r, u, c, n.sWidth, n.sHeight, a, o, s, l);} else if (n.sx && n.sy) {var d = s - (u = n.sx),f = l - (c = n.sy);t.drawImage(r, u, c, d, f, a, o, s, l);} else t.drawImage(r, a, o, s, l);null != n.text && (this.restoreTransform(t), this.drawRectText(t, this.getBoundingRect()));}}, getBoundingRect: function getBoundingRect() {var t = this.style;return this._rect || (this._rect = new Ue(t.x || 0, t.y || 0, t.width || 0, t.height || 0)), this._rect;} }, y(gi, pi);var vi = 314159;function mi(t) {return parseInt(t, 10);}var yi = new Ue(0, 0, 0, 0),_i = new Ue(0, 0, 0, 0);function xi(t, e, n) {this.type = \"canvas\";var i = !t.nodeName || \"CANVAS\" === t.nodeName.toUpperCase();this._opts = n = S({}, n || {}), this.dpr = n.devicePixelRatio || Le, this._singleCanvas = i;var r = (this.root = t).style;r && (r[\"-webkit-tap-highlight-color\"] = \"transparent\", r[\"-webkit-user-select\"] = r[\"user-select\"] = r[\"-webkit-touch-callout\"] = \"none\", t.innerHTML = \"\"), this.storage = e;var a = this._zlevelList = [],o = this._layers = {};if (this._layerConfig = {}, this._needsManuallyCompositing = !1, i) {var s = t.width,l = t.height;null != n.width && (s = n.width), null != n.height && (l = n.height), this.dpr = n.devicePixelRatio || 1, t.width = s * this.dpr, t.height = l * this.dpr, this._width = s, this._height = l;var h = new yn(t, this, this.dpr);h.__builtin__ = !0, h.initContext(), (o[vi] = h).zlevel = vi, a.push(vi), this._domRoot = t;} else {this._width = this._getSize(0), this._height = this._getSize(1);var u = this._domRoot = function (t, e) {var n = document.createElement(\"div\");return n.style.cssText = [\"position:relative\", \"width:\" + t + \"px\", \"height:\" + e + \"px\", \"padding:0\", \"margin:0\", \"border-width:0\"].join(\";\") + \";\", n;}(this._width, this._height);t.appendChild(u);}this._hoverlayer = null, this._hoverElements = [];}xi.prototype = { constructor: xi, getType: function getType() {return \"canvas\";}, isSingleCanvas: function isSingleCanvas() {return this._singleCanvas;}, getViewportRoot: function getViewportRoot() {return this._domRoot;}, getViewportRootOffset: function getViewportRootOffset() {var t = this.getViewportRoot();if (t) return { offsetLeft: t.offsetLeft || 0, offsetTop: t.offsetTop || 0 };}, refresh: function refresh(t) {var e = this.storage.getDisplayList(!0),n = this._zlevelList;this._redrawId = Math.random(), this._paintList(e, t, this._redrawId);for (var i = 0; i < n.length; i++) {var r = n[i],a = this._layers[r];if (!a.__builtin__ && a.refresh) {var o = 0 === i ? this._backgroundColor : null;a.refresh(o);}}return this.refreshHover(), this;}, addHover: function addHover(t, e) {if (!t.__hoverMir) {var n = new t.constructor({ style: t.style, shape: t.shape, z: t.z, z2: t.z2, silent: t.silent });return (n.__from = t).__hoverMir = n, e && n.setStyle(e), this._hoverElements.push(n), n;}}, removeHover: function removeHover(t) {var e = t.__hoverMir,n = this._hoverElements,i = v(n, e);0 <= i && n.splice(i, 1), t.__hoverMir = null;}, clearHover: function clearHover(t) {for (var e = this._hoverElements, n = 0; n < e.length; n++) {var i = e[n].__from;i && (i.__hoverMir = null);}e.length = 0;}, refreshHover: function refreshHover() {var t = this._hoverElements,e = t.length,n = this._hoverlayer;if (n && n.clear(), e) {tn(t, this.storage.displayableSortFunc);var i = {};(n = n || (this._hoverlayer = this.getLayer(1e5))).ctx.save();for (var r = 0; r < e;) {var a = t[r],o = a.__from;o && o.__zr ? (r++, o.invisible || (a.transform = o.transform, a.invTransform = o.invTransform, a.__clipPaths = o.__clipPaths, this._doPaintEl(a, n, !0, i))) : (t.splice(r, 1), o.__hoverMir = null, e--);}n.ctx.restore();}}, getHoverLayer: function getHoverLayer() {return this.getLayer(1e5);}, _paintList: function _paintList(t, e, n) {if (this._redrawId === n) {e = e || !1, this._updateLayerStatus(t);var i = this._doPaintList(t, e);if (this._needsManuallyCompositing && this._compositeManually(), !i) {var r = this;_n(function () {r._paintList(t, e, n);});}}}, _compositeManually: function _compositeManually() {var e = this.getLayer(vi).ctx,n = this._domRoot.width,i = this._domRoot.height;e.clearRect(0, 0, n, i), this.eachBuiltinLayer(function (t) {t.virtual && e.drawImage(t.dom, 0, 0, n, i);});}, _doPaintList: function _doPaintList(t, e) {for (var n = [], i = 0; i < this._zlevelList.length; i++) {var r = this._zlevelList[i];(s = this._layers[r]).__builtin__ && s !== this._hoverlayer && (s.__dirty || e) && n.push(s);}for (var a = !0, o = 0; o < n.length; o++) {var s,l = (s = n[o]).ctx,h = {};l.save();var u = e ? s.__startIndex : s.__drawIndex,c = !e && s.incremental && Date.now,d = c && Date.now(),f = s.zlevel === this._zlevelList[0] ? this._backgroundColor : null;if (s.__startIndex === s.__endIndex) s.clear(!1, f);else if (u === s.__startIndex) {var p = t[u];p.incremental && p.notClear && !e || s.clear(!1, f);}-1 === u && (__f__(\"error\", \"For some unknown reason. drawIndex is -1\", \" at components\\\\echarts\\\\echarts.simple.min.js:22\"), u = s.__startIndex);for (var g = u; g < s.__endIndex; g++) {var v = t[g];if (this._doPaintEl(v, s, e, h), v.__dirty = v.__dirtyText = !1, c) if (15 < Date.now() - d) break;}s.__drawIndex = g, s.__drawIndex < s.__endIndex && (a = !1), h.prevElClipPaths && l.restore(), l.restore();}return m.wxa && D(this._layers, function (t) {t && t.ctx && t.ctx.draw && t.ctx.draw();}), a;}, _doPaintEl: function _doPaintEl(t, e, n, i) {var r = e.ctx,a = t.transform;if ((e.__dirty || n) && !t.invisible && 0 !== t.style.opacity && (!a || a[0] || a[3]) && (!t.culling || !function (t, e, n) {return yi.copy(t.getBoundingRect()), t.transform && yi.applyTransform(t.transform), _i.width = e, _i.height = n, !yi.intersect(_i);}(t, this._width, this._height))) {var o = t.__clipPaths,s = i.prevElClipPaths;s && !function (t, e) {if (t === e) return !1;if (!t || !e || t.length !== e.length) return !0;for (var n = 0; n < t.length; n++) {if (t[n] !== e[n]) return !0;}return !1;}(o, s) || (s && (r.restore(), i.prevElClipPaths = null, i.prevEl = null), o && (r.save(), function (t, e) {for (var n = 0; n < t.length; n++) {var i = t[n];i.setTransform(e), e.beginPath(), i.buildPath(e, i.shape), e.clip(), i.restoreTransform(e);}}(o, r), i.prevElClipPaths = o)), t.beforeBrush && t.beforeBrush(r), t.brush(r, i.prevEl || null), (i.prevEl = t).afterBrush && t.afterBrush(r);}}, getLayer: function getLayer(t, e) {this._singleCanvas && !this._needsManuallyCompositing && (t = vi);var n = this._layers[t];return n || ((n = new yn(\"zr_\" + t, this, this.dpr)).zlevel = t, n.__builtin__ = !0, this._layerConfig[t] && f(n, this._layerConfig[t], !0), e && (n.virtual = e), this.insertLayer(t, n), n.initContext()), n;}, insertLayer: function insertLayer(t, e) {var n = this._layers,i = this._zlevelList,r = i.length,a = null,o = -1,s = this._domRoot;if (n[t]) Ee(\"ZLevel \" + t + \" has been used already\");else if (function (t) {return !!t && (!!t.__builtin__ || \"function\" == typeof t.resize && \"function\" == typeof t.refresh);}(e)) {if (0 < r && t > i[0]) {for (o = 0; o < r - 1 && !(i[o] < t && i[o + 1] > t); o++) {;}a = n[i[o]];}if (i.splice(o + 1, 0, t), !(n[t] = e).virtual) if (a) {var l = a.dom;l.nextSibling ? s.insertBefore(e.dom, l.nextSibling) : s.appendChild(e.dom);} else s.firstChild ? s.insertBefore(e.dom, s.firstChild) : s.appendChild(e.dom);} else Ee(\"Layer of zlevel \" + t + \" is not valid\");}, eachLayer: function eachLayer(t, e) {var n,i,r = this._zlevelList;for (i = 0; i < r.length; i++) {n = r[i], t.call(e, this._layers[n], n);}}, eachBuiltinLayer: function eachBuiltinLayer(t, e) {var n,i,r,a = this._zlevelList;for (r = 0; r < a.length; r++) {i = a[r], (n = this._layers[i]).__builtin__ && t.call(e, n, i);}}, eachOtherLayer: function eachOtherLayer(t, e) {var n,i,r,a = this._zlevelList;for (r = 0; r < a.length; r++) {i = a[r], (n = this._layers[i]).__builtin__ || t.call(e, n, i);}}, getLayers: function getLayers() {return this._layers;}, _updateLayerStatus: function _updateLayerStatus(t) {function e(t) {i && (i.__endIndex !== t && (i.__dirty = !0), i.__endIndex = t);}if (this.eachBuiltinLayer(function (t, e) {t.__dirty = t.__used = !1;}), this._singleCanvas) for (var n = 1; n < t.length; n++) {if ((a = t[n]).zlevel !== t[n - 1].zlevel || a.incremental) {this._needsManuallyCompositing = !0;break;}}var i = null,r = 0;for (n = 0; n < t.length; n++) {var a,o,s = (a = t[n]).zlevel;a.incremental ? ((o = this.getLayer(s + .001, this._needsManuallyCompositing)).incremental = !0, r = 1) : o = this.getLayer(s + (0 < r ? .01 : 0), this._needsManuallyCompositing), o.__builtin__ || Ee(\"ZLevel \" + s + \" has been used by unkown layer \" + o.id), o !== i && (o.__used = !0, o.__startIndex !== n && (o.__dirty = !0), o.__startIndex = n, o.incremental ? o.__drawIndex = -1 : o.__drawIndex = n, e(n), i = o), a.__dirty && (o.__dirty = !0, o.incremental && o.__drawIndex < 0 && (o.__drawIndex = n));}e(n), this.eachBuiltinLayer(function (t, e) {!t.__used && 0 < t.getElementCount() && (t.__dirty = !0, t.__startIndex = t.__endIndex = t.__drawIndex = 0), t.__dirty && t.__drawIndex < 0 && (t.__drawIndex = t.__startIndex);});}, clear: function clear() {return this.eachBuiltinLayer(this._clearLayer), this;}, _clearLayer: function _clearLayer(t) {t.clear();}, setBackgroundColor: function setBackgroundColor(t) {this._backgroundColor = t;}, configLayer: function configLayer(t, e) {if (e) {var n = this._layerConfig;n[t] ? f(n[t], e, !0) : n[t] = e;for (var i = 0; i < this._zlevelList.length; i++) {var r = this._zlevelList[i];if (r === t || r === t + .01) f(this._layers[r], n[t], !0);}}}, delLayer: function delLayer(t) {var e = this._layers,n = this._zlevelList,i = e[t];i && (i.dom.parentNode.removeChild(i.dom), delete e[t], n.splice(v(n, t), 1));}, resize: function resize(e, n) {if (this._domRoot.style) {var t = this._domRoot;t.style.display = \"none\";var i = this._opts;if (null != e && (i.width = e), null != n && (i.height = n), e = this._getSize(0), n = this._getSize(1), t.style.display = \"\", this._width !== e || n !== this._height) {for (var r in t.style.width = e + \"px\", t.style.height = n + \"px\", this._layers) {this._layers.hasOwnProperty(r) && this._layers[r].resize(e, n);}D(this._progressiveLayers, function (t) {t.resize(e, n);}), this.refresh(!0);}this._width = e, this._height = n;} else {if (null == e || null == n) return;this._width = e, this._height = n, this.getLayer(vi).resize(e, n);}return this;}, clearLayer: function clearLayer(t) {var e = this._layers[t];e && e.clear();}, dispose: function dispose() {this.root.innerHTML = \"\", this.root = this.storage = this._domRoot = this._layers = null;}, getRenderedCanvas: function getRenderedCanvas(t) {if (t = t || {}, this._singleCanvas && !this._compositeManually) return this._layers[vi].dom;var e = new yn(\"image\", this, t.pixelRatio || this.dpr);if (e.initContext(), e.clear(!1, t.backgroundColor || this._backgroundColor), t.pixelRatio <= this.dpr) {this.refresh();var n = e.dom.width,i = e.dom.height,r = e.ctx;this.eachLayer(function (t) {t.__builtin__ ? r.drawImage(t.dom, 0, 0, n, i) : t.renderToCanvas && (e.ctx.save(), t.renderToCanvas(e.ctx), e.ctx.restore());});} else for (var a = {}, o = this.storage.getDisplayList(!0), s = 0; s < o.length; s++) {var l = o[s];this._doPaintEl(l, e, !0, a);}return e.dom;}, getWidth: function getWidth() {return this._width;}, getHeight: function getHeight() {return this._height;}, _getSize: function _getSize(t) {var e = this._opts,n = [\"width\", \"height\"][t],i = [\"clientWidth\", \"clientHeight\"][t],r = [\"paddingLeft\", \"paddingTop\"][t],a = [\"paddingRight\", \"paddingBottom\"][t];if (null != e[n] && \"auto\" !== e[n]) return parseFloat(e[n]);var o = this.root,s = document.defaultView.getComputedStyle(o);return (o[i] || mi(s[n]) || mi(o.style[n])) - (mi(s[r]) || 0) - (mi(s[a]) || 0) | 0;}, pathToImage: function pathToImage(t, e) {e = e || this.dpr;var n = document.createElement(\"canvas\"),i = n.getContext(\"2d\"),r = t.getBoundingRect(),a = t.style,o = a.shadowBlur * e,s = a.shadowOffsetX * e,l = a.shadowOffsetY * e,h = a.hasStroke() ? a.lineWidth : 0,u = Math.max(h / 2, o - s),c = Math.max(h / 2, s + o),d = Math.max(h / 2, o - l),f = Math.max(h / 2, l + o),p = r.width + u + c,g = r.height + d + f;n.width = p * e, n.height = g * e, i.scale(e, e), i.clearRect(0, 0, p, g), i.dpr = e;var v = { position: t.position, rotation: t.rotation, scale: t.scale };t.position = [u - r.x, d - r.y], t.rotation = 0, t.scale = [1, 1], t.updateTransform(), t && t.brush(i);var m = new gi({ style: { x: 0, y: 0, image: n } });return null != v.position && (m.position = t.position = v.position), null != v.rotation && (m.rotation = t.rotation = v.rotation), null != v.scale && (m.scale = t.scale = v.scale), m;} };function wi(t) {t = t || {}, this.stage = t.stage || {}, this.onframe = t.onframe || function () {}, this._clips = [], this._running = !1, this._time, this._pausedTime, this._pauseStart, this._paused = !1, ft.call(this);}wi.prototype = { constructor: wi, addClip: function addClip(t) {this._clips.push(t);}, addAnimator: function addAnimator(t) {t.animation = this;for (var e = t.getClips(), n = 0; n < e.length; n++) {this.addClip(e[n]);}}, removeClip: function removeClip(t) {var e = v(this._clips, t);0 <= e && this._clips.splice(e, 1);}, removeAnimator: function removeAnimator(t) {for (var e = t.getClips(), n = 0; n < e.length; n++) {this.removeClip(e[n]);}t.animation = null;}, _update: function _update() {for (var t = new Date().getTime() - this._pausedTime, e = t - this._time, n = this._clips, i = n.length, r = [], a = [], o = 0; o < i; o++) {var s = n[o],l = s.step(t, e);l && (r.push(l), a.push(s));}for (o = 0; o < i;) {n[o]._needsRemove ? (n[o] = n[i - 1], n.pop(), i--) : o++;}i = r.length;for (o = 0; o < i; o++) {a[o].fire(r[o]);}this._time = t, this.onframe(e), this.trigger(\"frame\", e), this.stage.update && this.stage.update();}, _startLoop: function _startLoop() {var e = this;this._running = !0, _n(function t() {e._running && (_n(t), e._paused || e._update());});}, start: function start() {this._time = new Date().getTime(), this._pausedTime = 0, this._startLoop();}, stop: function stop() {this._running = !1;}, pause: function pause() {this._paused || (this._pauseStart = new Date().getTime(), this._paused = !0);}, resume: function resume() {this._paused && (this._pausedTime += new Date().getTime() - this._pauseStart, this._paused = !1);}, clear: function clear() {this._clips = [];}, isFinished: function isFinished() {return !this._clips.length;}, animate: function animate(t, e) {var n = new De(t, (e = e || {}).loop, e.getter, e.setter);return this.addAnimator(n), n;} }, _(wi, ft);var bi = [\"click\", \"dblclick\", \"mousewheel\", \"mouseout\", \"mouseup\", \"mousedown\", \"mousemove\", \"contextmenu\"],Si = [\"touchstart\", \"touchend\", \"touchmove\"],Mi = { pointerdown: 1, pointerup: 1, pointermove: 1, pointerout: 1 },Ii = A(bi, function (t) {var e = t.replace(\"mouse\", \"pointer\");return Mi[e] ? e : t;});function Ti(t) {return \"mousewheel\" === t && m.browser.firefox ? \"DOMMouseScroll\" : t;}function Ci(t) {t._touching = !0, clearTimeout(t._touchTimer), t._touchTimer = setTimeout(function () {t._touching = !1;}, 700);}var ki = { mousemove: function mousemove(t) {t = St(this.dom, t), this.trigger(\"mousemove\", t);}, mouseout: function mouseout(t) {var e = (t = St(this.dom, t)).toElement || t.relatedTarget;if (e !== this.dom) for (; e && 9 !== e.nodeType;) {if (e === this.dom) return;e = e.parentNode;}this.trigger(\"mouseout\", t);}, touchstart: function touchstart(t) {(t = St(this.dom, t)).zrByTouch = !0, this._lastTouchMoment = new Date(), this.handler.processGesture(t, \"start\"), ki.mousemove.call(this, t), ki.mousedown.call(this, t), Ci(this);}, touchmove: function touchmove(t) {(t = St(this.dom, t)).zrByTouch = !0, this.handler.processGesture(t, \"change\"), ki.mousemove.call(this, t), Ci(this);}, touchend: function touchend(t) {(t = St(this.dom, t)).zrByTouch = !0, this.handler.processGesture(t, \"end\"), ki.mouseup.call(this, t), +new Date() - this._lastTouchMoment < 300 && ki.click.call(this, t), Ci(this);}, pointerdown: function pointerdown(t) {ki.mousedown.call(this, t);}, pointermove: function pointermove(t) {Di(t) || ki.mousemove.call(this, t);}, pointerup: function pointerup(t) {ki.mouseup.call(this, t);}, pointerout: function pointerout(t) {Di(t) || ki.mouseout.call(this, t);} };function Di(t) {var e = t.pointerType;return \"pen\" === e || \"touch\" === e;}function Ai(n) {function t(t, e) {D(t, function (t) {!function (t, e, n) {mt ? t.addEventListener(e, n) : t.attachEvent(\"on\" + e, n);}(n, Ti(t), e._handlers[t]);}, e);}ft.call(this), this.dom = n, this._touching = !1, this._touchTimer, this._handlers = {}, function (e) {D(Si, function (t) {e._handlers[t] = w(ki[t], e);}), D(Ii, function (t) {e._handlers[t] = w(ki[t], e);}), D(bi, function (t) {e._handlers[t] = function (t, e) {return function () {if (!e._touching) return t.apply(e, arguments);};}(ki[t], e);});}(this), m.pointerEventsSupported ? t(Ii, this) : (m.touchEventsSupported && t(Si, this), t(bi, this));}D([\"click\", \"mousedown\", \"mouseup\", \"mousewheel\", \"dblclick\", \"contextmenu\"], function (e) {ki[e] = function (t) {t = St(this.dom, t), this.trigger(e, t);};});var Li = Ai.prototype;Li.dispose = function () {for (var t, e, n, i = bi.concat(Si), r = 0; r < i.length; r++) {var a = i[r];t = this.dom, e = Ti(a), n = this._handlers[a], mt ? t.removeEventListener(e, n) : t.detachEvent(\"on\" + e, n);}}, Li.setCursor = function (t) {this.dom.style && (this.dom.style.cursor = t || \"default\");}, _(Ai, ft);var Pi = !m.canvasSupported,Oi = { canvas: xi };function Ei(t, e) {return new Ni(n(), t, e);}var Ni = function Ni(t, e, n) {n = n || {}, this.dom = e, this.id = t;var i = this,r = new nn(),a = n.renderer;if (Pi) {if (!Oi.vml) throw new Error(\"You need to require 'zrender/vml/vml' to support IE8\");a = \"vml\";} else a && Oi[a] || (a = \"canvas\");var o = new Oi[a](e, r, n, t);this.storage = r, this.painter = o;var s = m.node || m.worker ? null : new Ai(o.getViewportRoot());this.handler = new Lt(r, o, s, o.root), this.animation = new wi({ stage: { update: w(this.flush, this) } }), this.animation.start(), this._needsRefresh;var l = r.delFromStorage,h = r.addToStorage;r.delFromStorage = function (t) {l.call(r, t), t && t.removeSelfFromZr(i);}, r.addToStorage = function (t) {h.call(r, t), t.addSelfToZr(i);};};Ni.prototype = { constructor: Ni, getId: function getId() {return this.id;}, add: function add(t) {this.storage.addRoot(t), this._needsRefresh = !0;}, remove: function remove(t) {this.storage.delRoot(t), this._needsRefresh = !0;}, configLayer: function configLayer(t, e) {this.painter.configLayer && this.painter.configLayer(t, e), this._needsRefresh = !0;}, setBackgroundColor: function setBackgroundColor(t) {this.painter.setBackgroundColor && this.painter.setBackgroundColor(t), this._needsRefresh = !0;}, refreshImmediately: function refreshImmediately() {this._needsRefresh = this._needsRefreshHover = !1, this.painter.refresh(), this._needsRefresh = this._needsRefreshHover = !1;}, refresh: function refresh() {this._needsRefresh = !0;}, flush: function flush() {var t;this._needsRefresh && (t = !0, this.refreshImmediately()), this._needsRefreshHover && (t = !0, this.refreshHoverImmediately()), t && this.trigger(\"rendered\");}, addHover: function addHover(t, e) {if (this.painter.addHover) {var n = this.painter.addHover(t, e);return this.refreshHover(), n;}}, removeHover: function removeHover(t) {this.painter.removeHover && (this.painter.removeHover(t), this.refreshHover());}, clearHover: function clearHover() {this.painter.clearHover && (this.painter.clearHover(), this.refreshHover());}, refreshHover: function refreshHover() {this._needsRefreshHover = !0;}, refreshHoverImmediately: function refreshHoverImmediately() {this._needsRefreshHover = !1, this.painter.refreshHover && this.painter.refreshHover();}, resize: function resize(t) {t = t || {}, this.painter.resize(t.width, t.height), this.handler.resize();}, clearAnimation: function clearAnimation() {this.animation.clear();}, getWidth: function getWidth() {return this.painter.getWidth();}, getHeight: function getHeight() {return this.painter.getHeight();}, pathToImage: function pathToImage(t, e) {return this.painter.pathToImage(t, e);}, setCursorStyle: function setCursorStyle(t) {this.handler.setCursorStyle(t);}, findHover: function findHover(t, e) {return this.handler.findHover(t, e);}, on: function on(t, e, n) {this.handler.on(t, e, n);}, off: function off(t, e) {this.handler.off(t, e);}, trigger: function trigger(t, e) {this.handler.trigger(t, e);}, clear: function clear() {this.storage.delRoot(), this.painter.clear();}, dispose: function dispose() {this.animation.stop(), this.clear(), this.storage.dispose(), this.painter.dispose(), this.handler.dispose(), this.animation = this.storage = this.painter = this.handler = null;} };var Bi = D,zi = O,Ri = C,Fi = \"series\\0\";function Vi(t) {return t instanceof Array ? t : null == t ? [] : [t];}function Wi(t, e, n) {if (t) {t[e] = t[e] || {}, t.emphasis = t.emphasis || {}, t.emphasis[e] = t.emphasis[e] || {};for (var i = 0, r = n.length; i < r; i++) {var a = n[i];!t.emphasis[e].hasOwnProperty(a) && t[e].hasOwnProperty(a) && (t.emphasis[e][a] = t[e][a]);}}}var Hi = [\"fontStyle\", \"fontWeight\", \"fontSize\", \"fontFamily\", \"rich\", \"tag\", \"color\", \"textBorderColor\", \"textBorderWidth\", \"width\", \"height\", \"lineHeight\", \"align\", \"verticalAlign\", \"baseline\", \"shadowColor\", \"shadowBlur\", \"shadowOffsetX\", \"shadowOffsetY\", \"textShadowColor\", \"textShadowBlur\", \"textShadowOffsetX\", \"textShadowOffsetY\", \"backgroundColor\", \"borderColor\", \"borderWidth\", \"borderRadius\", \"padding\"];function Gi(t) {return !zi(t) || Ri(t) || t instanceof Date ? t : t.value;}function Xi(t, r) {r = (r || []).slice();var a = A(t || [], function (t, e) {return { exist: t };});return Bi(r, function (t, e) {if (zi(t)) {for (var n = 0; n < a.length; n++) {if (!a[n].option && null != t.id && a[n].exist.id === t.id + \"\") return a[n].option = t, void (r[e] = null);}for (n = 0; n < a.length; n++) {var i = a[n].exist;if (!(a[n].option || null != i.id && null != t.id || null == t.name || Yi(t) || Yi(i) || i.name !== t.name + \"\")) return a[n].option = t, void (r[e] = null);}}}), Bi(r, function (t, e) {if (zi(t)) {for (var n = 0; n < a.length; n++) {var i = a[n].exist;if (!a[n].option && !Yi(i) && null == t.id) {a[n].option = t;break;}}n >= a.length && a.push({ option: t });}}), a;}function Ui(t) {var e = t.name;return !(!e || !e.indexOf(Fi));}function Yi(t) {return zi(t) && t.id && 0 === (t.id + \"\").indexOf(\"\\0_ec_\\0\");}function qi(e, t) {return null != t.dataIndexInside ? t.dataIndexInside : null != t.dataIndex ? C(t.dataIndex) ? A(t.dataIndex, function (t) {return e.indexOfRawIndex(t);}) : e.indexOfRawIndex(t.dataIndex) : null != t.name ? C(t.name) ? A(t.name, function (t) {return e.indexOfName(t);}) : e.indexOfName(t.name) : void 0;}function ji() {var e = \"__\\0ec_inner_\" + Zi++ + \"_\" + Math.random().toFixed(5);return function (t) {return t[e] || (t[e] = {});};}var Zi = 0;function $i(s, l, h) {if (L(l)) {var t = {};t[l + \"Index\"] = 0, l = t;}var e = h && h.defaultMainType;!e || Ki(l, e + \"Index\") || Ki(l, e + \"Id\") || Ki(l, e + \"Name\") || (l[e + \"Index\"] = 0);var u = {};return Bi(l, function (t, e) {t = l[e];if (\"dataIndex\" !== e && \"dataIndexInside\" !== e) {var n = e.match(/^(\\w+)(Index|Id|Name)$/) || [],i = n[1],r = (n[2] || \"\").toLowerCase();if (!(!i || !r || null == t || \"index\" === r && \"none\" === t || h && h.includeMainTypes && v(h.includeMainTypes, i) < 0)) {var a = { mainType: i };\"index\" === r && \"all\" === t || (a[r] = t);var o = s.queryComponents(a);u[i + \"Models\"] = o, u[i + \"Model\"] = o[0];}} else u[e] = t;}), u;}function Ki(t, e) {return t && t.hasOwnProperty(e);}function Qi(t, e, n) {t.setAttribute ? t.setAttribute(e, n) : t[e] = n;}var Ji = \".\",tr = \"___EC__COMPONENT__CONTAINER___\";function er(t) {var e = { main: \"\", sub: \"\" };return t && (t = t.split(Ji), e.main = t[0] || \"\", e.sub = t[1] || \"\"), e;}function nr(t) {(t.$constructor = t).extend = function (t) {function e() {t.$constructor ? t.$constructor.apply(this, arguments) : n.apply(this, arguments);}var n = this;return S(e.prototype, t), e.extend = this.extend, e.superCall = ar, e.superApply = or, y(e, this), e.superClass = n, e;};}var ir = 0;function rr(t) {var e = [\"__\\0is_clz\", ir++, Math.random().toFixed(3)].join(\"_\");t.prototype[e] = !0, t.isInstance = function (t) {return !(!t || !t[e]);};}function ar(t, e) {var n = W(arguments, 2);return this.superClass.prototype[e].apply(t, n);}function or(t, e, n) {return this.superClass.prototype[e].apply(t, n);}function sr(n, t) {t = t || {};var r = {};if (n.registerClass = function (t, e) {if (e) if (function (t) {G(/^[a-zA-Z0-9_]+([.][a-zA-Z0-9_]+)?$/.test(t), 'componentType \"' + t + '\" illegal');}(e), (e = er(e)).sub) {if (e.sub !== tr) {(function (t) {var e = r[t.main];e && e[tr] || ((e = r[t.main] = {})[tr] = !0);return e;})(e)[e.sub] = t;}} else r[e.main] = t;return t;}, n.getClass = function (t, e, n) {var i = r[t];if (i && i[tr] && (i = e ? i[e] : null), n && !i) throw new Error(e ? \"Component \" + t + \".\" + (e || \"\") + \" not exists. Load it first.\" : t + \".type should be specified.\");return i;}, n.getClassesByMainType = function (t) {t = er(t);var n = [],e = r[t.main];return e && e[tr] ? D(e, function (t, e) {e !== tr && n.push(t);}) : n.push(e), n;}, n.hasClass = function (t) {return t = er(t), !!r[t.main];}, n.getAllClassMainTypes = function () {var n = [];return D(r, function (t, e) {n.push(e);}), n;}, n.hasSubTypes = function (t) {t = er(t);var e = r[t.main];return e && e[tr];}, n.parseClassType = er, t.registerWhenExtend) {var i = n.extend;i && (n.extend = function (t) {var e = i.call(this, t);return n.registerClass(e, t.type);});}return n;}function lr(s) {for (var t = 0; t < s.length; t++) {s[t][1] || (s[t][1] = s[t][0]);}return function (t, e, n) {for (var i = {}, r = 0; r < s.length; r++) {var a = s[r][1];if (!(e && 0 <= v(e, a) || n && v(n, a) < 0)) {var o = t.getShallow(a);null != o && (i[s[r][0]] = o);}}return i;};}var hr = lr([[\"lineWidth\", \"width\"], [\"stroke\", \"color\"], [\"opacity\"], [\"shadowBlur\"], [\"shadowOffsetX\"], [\"shadowOffsetY\"], [\"shadowColor\"]]),ur = { getLineStyle: function getLineStyle(t) {var e = hr(this, t);return e.lineDash = this.getLineDash(e.lineWidth), e;}, getLineDash: function getLineDash(t) {null == t && (t = 1);var e = this.get(\"type\"),n = Math.max(t, 2),i = 4 * t;return \"solid\" !== e && null != e && (\"dashed\" === e ? [i, i] : [n, n]);} },cr = lr([[\"fill\", \"color\"], [\"shadowBlur\"], [\"shadowOffsetX\"], [\"shadowOffsetY\"], [\"opacity\"], [\"shadowColor\"]]),dr = { getAreaStyle: function getAreaStyle(t, e) {return cr(this, t, e);} },fr = Math.pow,pr = Math.sqrt,gr = 1e-8,vr = 1e-4,mr = pr(3),yr = 1 / 3,_r = Q(),xr = Q(),wr = Q();function br(t) {return -gr < t && t < gr;}function Sr(t) {return gr < t || t < -gr;}function Mr(t, e, n, i, r) {var a = 1 - r;return a * a * (a * t + 3 * r * e) + r * r * (r * i + 3 * a * n);}function Ir(t, e, n, i, r) {var a = 1 - r;return 3 * (((e - t) * a + 2 * (n - e) * r) * a + (i - n) * r * r);}function Tr(t, e, n, i, r) {var a = 6 * n - 12 * e + 6 * t,o = 9 * e + 3 * i - 3 * t - 9 * n,s = 3 * e - 3 * t,l = 0;if (br(o)) {if (Sr(a)) 0 <= (u = -s / a) && u <= 1 && (r[l++] = u);} else {var h = a * a - 4 * o * s;if (br(h)) r[0] = -a / (2 * o);else if (0 < h) {var u,c = pr(h),d = (-a - c) / (2 * o);0 <= (u = (-a + c) / (2 * o)) && u <= 1 && (r[l++] = u), 0 <= d && d <= 1 && (r[l++] = d);}}return l;}function Cr(t, e, n, i, r, a) {var o = (e - t) * r + t,s = (n - e) * r + e,l = (i - n) * r + n,h = (s - o) * r + o,u = (l - s) * r + s,c = (u - h) * r + h;a[0] = t, a[1] = o, a[2] = h, a[3] = c, a[4] = c, a[5] = u, a[6] = l, a[7] = i;}function kr(t, e, n, i) {var r = 1 - i;return r * (r * t + 2 * i * e) + i * i * n;}function Dr(t, e, n, i) {return 2 * ((1 - i) * (e - t) + i * (n - e));}function Ar(t, e, n) {var i = t + n - 2 * e;return 0 == i ? .5 : (t - e) / i;}function Lr(t, e, n, i, r) {var a = (e - t) * i + t,o = (n - e) * i + e,s = (o - a) * i + a;r[0] = t, r[1] = a, r[2] = s, r[3] = s, r[4] = o, r[5] = n;}var Pr = Math.min,Or = Math.max,Er = Math.sin,Nr = Math.cos,Br = 2 * Math.PI,zr = Q(),Rr = Q(),Fr = Q();function Vr(t, e, n, i, r, a) {r[0] = Pr(t, n), r[1] = Pr(e, i), a[0] = Or(t, n), a[1] = Or(e, i);}var Wr = [],Hr = [];function Gr(t, e, n, i, r, a, o, s, l, h) {var u,c = Tr,d = Mr,f = c(t, n, r, o, Wr);for (l[0] = 1 / 0, l[1] = 1 / 0, h[0] = -1 / 0, h[1] = -1 / 0, u = 0; u < f; u++) {var p = d(t, n, r, o, Wr[u]);l[0] = Pr(p, l[0]), h[0] = Or(p, h[0]);}for (f = c(e, i, a, s, Hr), u = 0; u < f; u++) {var g = d(e, i, a, s, Hr[u]);l[1] = Pr(g, l[1]), h[1] = Or(g, h[1]);}l[0] = Pr(t, l[0]), h[0] = Or(t, h[0]), l[0] = Pr(o, l[0]), h[0] = Or(o, h[0]), l[1] = Pr(e, l[1]), h[1] = Or(e, h[1]), l[1] = Pr(s, l[1]), h[1] = Or(s, h[1]);}function Xr(t, e, n, i, r, a, o, s, l) {var h = lt,u = ht,c = Math.abs(r - a);if (c % Br < 1e-4 && 1e-4 < c) return s[0] = t - n, s[1] = e - i, l[0] = t + n, void (l[1] = e + i);if (zr[0] = Nr(r) * n + t, zr[1] = Er(r) * i + e, Rr[0] = Nr(a) * n + t, Rr[1] = Er(a) * i + e, h(s, zr, Rr), u(l, zr, Rr), (r %= Br) < 0 && (r += Br), (a %= Br) < 0 && (a += Br), a < r && !o ? a += Br : r < a && o && (r += Br), o) {var d = a;a = r, r = d;}for (var f = 0; f < a; f += Math.PI / 2) {r < f && (Fr[0] = Nr(f) * n + t, Fr[1] = Er(f) * i + e, h(s, Fr, s), u(l, Fr, l));}}var Ur = { M: 1, L: 2, C: 3, Q: 4, A: 5, Z: 6, R: 7 },Yr = [],qr = [],jr = [],Zr = [],$r = Math.min,Kr = Math.max,Qr = Math.cos,Jr = Math.sin,ta = Math.sqrt,ea = Math.abs,na = \"undefined\" != typeof Float32Array,ia = function ia(t) {this._saveData = !t, this._saveData && (this.data = []), this._ctx = null;};function ra(t, e, n, i, r, a, o) {if (0 === r) return !1;var s = r,l = 0;if (e + s < o && i + s < o || o < e - s && o < i - s || t + s < a && n + s < a || a < t - s && a < n - s) return !1;if (t === n) return Math.abs(a - t) <= s / 2;var h = (l = (e - i) / (t - n)) * a - o + (t * i - n * e) / (t - n);return h * h / (l * l + 1) <= s / 2 * s / 2;}function aa(t, e, n, i, r, a, o, s, l, h, u) {if (0 === l) return !1;var c = l;return !(e + c < u && i + c < u && a + c < u && s + c < u || u < e - c && u < i - c && u < a - c && u < s - c || t + c < h && n + c < h && r + c < h && o + c < h || h < t - c && h < n - c && h < r - c && h < o - c) && function (t, e, n, i, r, a, o, s, l, h, u) {var c,d,f,p,g,v = .005,m = 1 / 0;_r[0] = l, _r[1] = h;for (var y = 0; y < 1; y += .05) {xr[0] = Mr(t, n, r, o, y), xr[1] = Mr(e, i, a, s, y), (p = ot(_r, xr)) < m && (c = y, m = p);}m = 1 / 0;for (var _ = 0; _ < 32 && !(v < vr); _++) {d = c - v, f = c + v, xr[0] = Mr(t, n, r, o, d), xr[1] = Mr(e, i, a, s, d), p = ot(xr, _r), 0 <= d && p < m ? (c = d, m = p) : (wr[0] = Mr(t, n, r, o, f), wr[1] = Mr(e, i, a, s, f), g = ot(wr, _r), f <= 1 && g < m ? (c = f, m = g) : v *= .5);}return u && (u[0] = Mr(t, n, r, o, c), u[1] = Mr(e, i, a, s, c)), pr(m);}(t, e, n, i, r, a, o, s, h, u, null) <= c / 2;}function oa(t, e, n, i, r, a, o, s, l) {if (0 === o) return !1;var h = o;return !(e + h < l && i + h < l && a + h < l || l < e - h && l < i - h && l < a - h || t + h < s && n + h < s && r + h < s || s < t - h && s < n - h && s < r - h) && function (t, e, n, i, r, a, o, s, l) {var h,u = .005,c = 1 / 0;_r[0] = o, _r[1] = s;for (var d = 0; d < 1; d += .05) {xr[0] = kr(t, n, r, d), xr[1] = kr(e, i, a, d), (v = ot(_r, xr)) < c && (h = d, c = v);}c = 1 / 0;for (var f = 0; f < 32 && !(u < vr); f++) {var p = h - u,g = h + u;xr[0] = kr(t, n, r, p), xr[1] = kr(e, i, a, p);var v = ot(xr, _r);if (0 <= p && v < c) h = p, c = v;else {wr[0] = kr(t, n, r, g), wr[1] = kr(e, i, a, g);var m = ot(wr, _r);g <= 1 && m < c ? (h = g, c = m) : u *= .5;}}return l && (l[0] = kr(t, n, r, h), l[1] = kr(e, i, a, h)), pr(c);}(t, e, n, i, r, a, s, l, null) <= h / 2;}ia.prototype = { constructor: ia, _xi: 0, _yi: 0, _x0: 0, _y0: 0, _ux: 0, _uy: 0, _len: 0, _lineDash: null, _dashOffset: 0, _dashIdx: 0, _dashSum: 0, setScale: function setScale(t, e, n) {n = n || 0, this._ux = ea(n / Le / t) || 0, this._uy = ea(n / Le / e) || 0;}, getContext: function getContext() {return this._ctx;}, beginPath: function beginPath(t) {return (this._ctx = t) && t.beginPath(), t && (this.dpr = t.dpr), this._saveData && (this._len = 0), this._lineDash && (this._lineDash = null, this._dashOffset = 0), this;}, moveTo: function moveTo(t, e) {return this.addData(Ur.M, t, e), this._ctx && this._ctx.moveTo(t, e), this._x0 = t, this._y0 = e, this._xi = t, this._yi = e, this;}, lineTo: function lineTo(t, e) {var n = ea(t - this._xi) > this._ux || ea(e - this._yi) > this._uy || this._len < 5;return this.addData(Ur.L, t, e), this._ctx && n && (this._needsDash() ? this._dashedLineTo(t, e) : this._ctx.lineTo(t, e)), n && (this._xi = t, this._yi = e), this;}, bezierCurveTo: function bezierCurveTo(t, e, n, i, r, a) {return this.addData(Ur.C, t, e, n, i, r, a), this._ctx && (this._needsDash() ? this._dashedBezierTo(t, e, n, i, r, a) : this._ctx.bezierCurveTo(t, e, n, i, r, a)), this._xi = r, this._yi = a, this;}, quadraticCurveTo: function quadraticCurveTo(t, e, n, i) {return this.addData(Ur.Q, t, e, n, i), this._ctx && (this._needsDash() ? this._dashedQuadraticTo(t, e, n, i) : this._ctx.quadraticCurveTo(t, e, n, i)), this._xi = n, this._yi = i, this;}, arc: function arc(t, e, n, i, r, a) {return this.addData(Ur.A, t, e, n, n, i, r - i, 0, a ? 0 : 1), this._ctx && this._ctx.arc(t, e, n, i, r, a), this._xi = Qr(r) * n + t, this._yi = Jr(r) * n + e, this;}, arcTo: function arcTo(t, e, n, i, r) {return this._ctx && this._ctx.arcTo(t, e, n, i, r), this;}, rect: function rect(t, e, n, i) {return this._ctx && this._ctx.rect(t, e, n, i), this.addData(Ur.R, t, e, n, i), this;}, closePath: function closePath() {this.addData(Ur.Z);var t = this._ctx,e = this._x0,n = this._y0;return t && (this._needsDash() && this._dashedLineTo(e, n), t.closePath()), this._xi = e, this._yi = n, this;}, fill: function fill(t) {t && t.fill(), this.toStatic();}, stroke: function stroke(t) {t && t.stroke(), this.toStatic();}, setLineDash: function setLineDash(t) {if (t instanceof Array) {this._lineDash = t;for (var e = this._dashIdx = 0, n = 0; n < t.length; n++) {e += t[n];}this._dashSum = e;}return this;}, setLineDashOffset: function setLineDashOffset(t) {return this._dashOffset = t, this;}, len: function len() {return this._len;}, setData: function setData(t) {var e = t.length;this.data && this.data.length === e || !na || (this.data = new Float32Array(e));for (var n = 0; n < e; n++) {this.data[n] = t[n];}this._len = e;}, appendPath: function appendPath(t) {t instanceof Array || (t = [t]);for (var e = t.length, n = 0, i = this._len, r = 0; r < e; r++) {n += t[r].len();}na && this.data instanceof Float32Array && (this.data = new Float32Array(i + n));for (r = 0; r < e; r++) {for (var a = t[r].data, o = 0; o < a.length; o++) {this.data[i++] = a[o];}}this._len = i;}, addData: function addData(t) {if (this._saveData) {var e = this.data;this._len + arguments.length > e.length && (this._expandData(), e = this.data);for (var n = 0; n < arguments.length; n++) {e[this._len++] = arguments[n];}this._prevCmd = t;}}, _expandData: function _expandData() {if (!(this.data instanceof Array)) {for (var t = [], e = 0; e < this._len; e++) {t[e] = this.data[e];}this.data = t;}}, _needsDash: function _needsDash() {return this._lineDash;}, _dashedLineTo: function _dashedLineTo(t, e) {var n,i,r = this._dashSum,a = this._dashOffset,o = this._lineDash,s = this._ctx,l = this._xi,h = this._yi,u = t - l,c = e - h,d = ta(u * u + c * c),f = l,p = h,g = o.length;for (a < 0 && (a = r + a), f -= (a %= r) * (u /= d), p -= a * (c /= d); 0 < u && f <= t || u < 0 && t <= f || 0 === u && (0 < c && p <= e || c < 0 && e <= p);) {f += u * (n = o[i = this._dashIdx]), p += c * n, this._dashIdx = (i + 1) % g, 0 < u && f < l || u < 0 && l < f || 0 < c && p < h || c < 0 && h < p || s[i % 2 ? \"moveTo\" : \"lineTo\"](0 <= u ? $r(f, t) : Kr(f, t), 0 <= c ? $r(p, e) : Kr(p, e));}u = f - t, c = p - e, this._dashOffset = -ta(u * u + c * c);}, _dashedBezierTo: function _dashedBezierTo(t, e, n, i, r, a) {var o,s,l,h,u,c = this._dashSum,d = this._dashOffset,f = this._lineDash,p = this._ctx,g = this._xi,v = this._yi,m = Mr,y = 0,_ = this._dashIdx,x = f.length,w = 0;for (d < 0 && (d = c + d), d %= c, o = 0; o < 1; o += .1) {s = m(g, t, n, r, o + .1) - m(g, t, n, r, o), l = m(v, e, i, a, o + .1) - m(v, e, i, a, o), y += ta(s * s + l * l);}for (; _ < x && !(d < (w += f[_])); _++) {;}for (o = (w - d) / y; o <= 1;) {h = m(g, t, n, r, o), u = m(v, e, i, a, o), _ % 2 ? p.moveTo(h, u) : p.lineTo(h, u), o += f[_] / y, _ = (_ + 1) % x;}_ % 2 != 0 && p.lineTo(r, a), s = r - h, l = a - u, this._dashOffset = -ta(s * s + l * l);}, _dashedQuadraticTo: function _dashedQuadraticTo(t, e, n, i) {var r = n,a = i;n = (n + 2 * t) / 3, i = (i + 2 * e) / 3, t = (this._xi + 2 * t) / 3, e = (this._yi + 2 * e) / 3, this._dashedBezierTo(t, e, n, i, r, a);}, toStatic: function toStatic() {var t = this.data;t instanceof Array && (t.length = this._len, na && (this.data = new Float32Array(t)));}, getBoundingRect: function getBoundingRect() {Yr[0] = Yr[1] = jr[0] = jr[1] = Number.MAX_VALUE, qr[0] = qr[1] = Zr[0] = Zr[1] = -Number.MAX_VALUE;for (var t, e, n, i, r, a, o, s, l, h, u, c, d, f, p = this.data, g = 0, v = 0, m = 0, y = 0, _ = 0; _ < p.length;) {var x = p[_++];switch (1 === _ && (m = g = p[_], y = v = p[_ + 1]), x) {case Ur.M:g = m = p[_++], v = y = p[_++], jr[0] = m, jr[1] = y, Zr[0] = m, Zr[1] = y;break;case Ur.L:Vr(g, v, p[_], p[_ + 1], jr, Zr), g = p[_++], v = p[_++];break;case Ur.C:Gr(g, v, p[_++], p[_++], p[_++], p[_++], p[_], p[_ + 1], jr, Zr), g = p[_++], v = p[_++];break;case Ur.Q:t = g, e = v, n = p[_++], i = p[_++], r = p[_], a = p[_ + 1], o = jr, s = Zr, h = l = void 0, h = kr, u = Or(Pr((l = Ar)(t, n, r), 1), 0), c = Or(Pr(l(e, i, a), 1), 0), d = h(t, n, r, u), f = h(e, i, a, c), o[0] = Pr(t, r, d), o[1] = Pr(e, a, f), s[0] = Or(t, r, d), s[1] = Or(e, a, f), g = p[_++], v = p[_++];break;case Ur.A:var w = p[_++],b = p[_++],S = p[_++],M = p[_++],I = p[_++],T = p[_++] + I;_ += 1;var C = 1 - p[_++];1 === _ && (m = Qr(I) * S + w, y = Jr(I) * M + b), Xr(w, b, S, M, I, T, C, jr, Zr), g = Qr(T) * S + w, v = Jr(T) * M + b;break;case Ur.R:Vr(m = g = p[_++], y = v = p[_++], m + p[_++], y + p[_++], jr, Zr);break;case Ur.Z:g = m, v = y;}lt(Yr, Yr, jr), ht(qr, qr, Zr);}return 0 === _ && (Yr[0] = Yr[1] = qr[0] = qr[1] = 0), new Ue(Yr[0], Yr[1], qr[0] - Yr[0], qr[1] - Yr[1]);}, rebuildPath: function rebuildPath(t) {for (var e, n, i, r, a, o, s = this.data, l = this._ux, h = this._uy, u = this._len, c = 0; c < u;) {var d = s[c++];switch (1 === c && (e = i = s[c], n = r = s[c + 1]), d) {case Ur.M:e = i = s[c++], n = r = s[c++], t.moveTo(i, r);break;case Ur.L:a = s[c++], o = s[c++], (ea(a - i) > l || ea(o - r) > h || c === u - 1) && (t.lineTo(a, o), i = a, r = o);break;case Ur.C:t.bezierCurveTo(s[c++], s[c++], s[c++], s[c++], s[c++], s[c++]), i = s[c - 2], r = s[c - 1];break;case Ur.Q:t.quadraticCurveTo(s[c++], s[c++], s[c++], s[c++]), i = s[c - 2], r = s[c - 1];break;case Ur.A:var f = s[c++],p = s[c++],g = s[c++],v = s[c++],m = s[c++],y = s[c++],_ = s[c++],x = s[c++],w = v < g ? g : v,b = v < g ? 1 : g / v,S = v < g ? v / g : 1,M = m + y;.001 < Math.abs(g - v) ? (t.translate(f, p), t.rotate(_), t.scale(b, S), t.arc(0, 0, w, m, M, 1 - x), t.scale(1 / b, 1 / S), t.rotate(-_), t.translate(-f, -p)) : t.arc(f, p, w, m, M, 1 - x), 1 === c && (e = Qr(m) * g + f, n = Jr(m) * v + p), i = Qr(M) * g + f, r = Jr(M) * v + p;break;case Ur.R:e = i = s[c], n = r = s[c + 1], t.rect(s[c++], s[c++], s[c++], s[c++]);break;case Ur.Z:t.closePath(), i = e, r = n;}}} }, ia.CMD = Ur;var sa = 2 * Math.PI;function la(t) {return (t %= sa) < 0 && (t += sa), t;}var ha = 2 * Math.PI;function ua(t, e, n, i, r, a, o, s, l) {if (0 === o) return !1;var h = o;s -= t, l -= e;var u = Math.sqrt(s * s + l * l);if (n < u - h || u + h < n) return !1;if (Math.abs(i - r) % ha < 1e-4) return !0;if (a) {var c = i;i = la(r), r = la(c);} else i = la(i), r = la(r);r < i && (r += ha);var d = Math.atan2(l, s);return d < 0 && (d += ha), i <= d && d <= r || i <= d + ha && d + ha <= r;}function ca(t, e, n, i, r, a) {if (e < a && i < a || a < e && a < i) return 0;if (i === e) return 0;var o = i < e ? 1 : -1,s = (a - e) / (i - e);1 != s && 0 != s || (o = i < e ? .5 : -.5);var l = s * (n - t) + t;return l === r ? 1 / 0 : r < l ? o : 0;}var da = ia.CMD,fa = 2 * Math.PI,pa = 1e-4;var ga = [-1, -1, -1],va = [-1, -1];function ma(t, e, n, i, r, a, o, s, l, h) {if (e < h && i < h && a < h && s < h || h < e && h < i && h < a && h < s) return 0;var u,c = function (t, e, n, i, r, a) {var o = i + 3 * (e - n) - t,s = 3 * (n - 2 * e + t),l = 3 * (e - t),h = t - r,u = s * s - 3 * o * l,c = s * l - 9 * o * h,d = l * l - 3 * s * h,f = 0;if (br(u) && br(c)) {if (br(s)) a[0] = 0;else 0 <= (M = -l / s) && M <= 1 && (a[f++] = M);} else {var p = c * c - 4 * u * d;if (br(p)) {var g = c / u,v = -g / 2;0 <= (M = -s / o + g) && M <= 1 && (a[f++] = M), 0 <= v && v <= 1 && (a[f++] = v);} else if (0 < p) {var m = pr(p),y = u * s + 1.5 * o * (-c + m),_ = u * s + 1.5 * o * (-c - m);0 <= (M = (-s - ((y = y < 0 ? -fr(-y, yr) : fr(y, yr)) + (_ = _ < 0 ? -fr(-_, yr) : fr(_, yr)))) / (3 * o)) && M <= 1 && (a[f++] = M);} else {var x = (2 * u * s - 3 * o * c) / (2 * pr(u * u * u)),w = Math.acos(x) / 3,b = pr(u),S = Math.cos(w),M = (-s - 2 * b * S) / (3 * o),I = (v = (-s + b * (S + mr * Math.sin(w))) / (3 * o), (-s + b * (S - mr * Math.sin(w))) / (3 * o));0 <= M && M <= 1 && (a[f++] = M), 0 <= v && v <= 1 && (a[f++] = v), 0 <= I && I <= 1 && (a[f++] = I);}}return f;}(e, i, a, s, h, ga);if (0 === c) return 0;for (var d, f, p = 0, g = -1, v = 0; v < c; v++) {var m = ga[v],y = 0 === m || 1 === m ? .5 : 1;Mr(t, n, r, o, m) < l || (g < 0 && (g = Tr(e, i, a, s, va), va[1] < va[0] && 1 < g && (void 0, u = va[0], va[0] = va[1], va[1] = u), d = Mr(e, i, a, s, va[0]), 1 < g && (f = Mr(e, i, a, s, va[1]))), 2 === g ? m < va[0] ? p += d < e ? y : -y : m < va[1] ? p += f < d ? y : -y : p += s < f ? y : -y : m < va[0] ? p += d < e ? y : -y : p += s < d ? y : -y);}return p;}function ya(t, e, n, i, r, a, o, s) {if (e < s && i < s && a < s || s < e && s < i && s < a) return 0;var l = function (t, e, n, i, r) {var a = t - 2 * e + n,o = 2 * (e - t),s = t - i,l = 0;if (br(a)) {if (Sr(o)) 0 <= (u = -s / o) && u <= 1 && (r[l++] = u);} else {var h = o * o - 4 * a * s;if (br(h)) 0 <= (u = -o / (2 * a)) && u <= 1 && (r[l++] = u);else if (0 < h) {var u,c = pr(h),d = (-o - c) / (2 * a);0 <= (u = (-o + c) / (2 * a)) && u <= 1 && (r[l++] = u), 0 <= d && d <= 1 && (r[l++] = d);}}return l;}(e, i, a, s, ga);if (0 === l) return 0;var h = Ar(e, i, a);if (0 <= h && h <= 1) {for (var u = 0, c = kr(e, i, a, h), d = 0; d < l; d++) {var f = 0 === ga[d] || 1 === ga[d] ? .5 : 1;kr(t, n, r, ga[d]) < o || (ga[d] < h ? u += c < e ? f : -f : u += a < c ? f : -f);}return u;}f = 0 === ga[0] || 1 === ga[0] ? .5 : 1;return kr(t, n, r, ga[0]) < o ? 0 : a < e ? f : -f;}function _a(t, e, n, i, r, a, o, s) {if (n < (s -= e) || s < -n) return 0;var l = Math.sqrt(n * n - s * s);ga[0] = -l, ga[1] = l;var h = Math.abs(i - r);if (h < 1e-4) return 0;if (h % fa < 1e-4) {r = fa;var u = a ? 1 : -1;return o >= ga[i = 0] + t && o <= ga[1] + t ? u : 0;}if (a) {l = i;i = la(r), r = la(l);} else i = la(i), r = la(r);r < i && (r += fa);for (var c = 0, d = 0; d < 2; d++) {var f = ga[d];if (o < f + t) {var p = Math.atan2(s, f);u = a ? 1 : -1;p < 0 && (p = fa + p), (i <= p && p <= r || i <= p + fa && p + fa <= r) && (p > Math.PI / 2 && p < 1.5 * Math.PI && (u = -u), c += u);}}return c;}function xa(t, e, n, i, r) {for (var a = 0, o = 0, s = 0, l = 0, h = 0, u = 0; u < t.length;) {var c = t[u++];switch (c === da.M && 1 < u && (n || (a += ca(o, s, l, h, i, r))), 1 === u && (l = o = t[u], h = s = t[u + 1]), c) {case da.M:o = l = t[u++], s = h = t[u++];break;case da.L:if (n) {if (ra(o, s, t[u], t[u + 1], e, i, r)) return !0;} else a += ca(o, s, t[u], t[u + 1], i, r) || 0;o = t[u++], s = t[u++];break;case da.C:if (n) {if (aa(o, s, t[u++], t[u++], t[u++], t[u++], t[u], t[u + 1], e, i, r)) return !0;} else a += ma(o, s, t[u++], t[u++], t[u++], t[u++], t[u], t[u + 1], i, r) || 0;o = t[u++], s = t[u++];break;case da.Q:if (n) {if (oa(o, s, t[u++], t[u++], t[u], t[u + 1], e, i, r)) return !0;} else a += ya(o, s, t[u++], t[u++], t[u], t[u + 1], i, r) || 0;o = t[u++], s = t[u++];break;case da.A:var d = t[u++],f = t[u++],p = t[u++],g = t[u++],v = t[u++],m = t[u++];u += 1;var y = 1 - t[u++],_ = Math.cos(v) * p + d,x = Math.sin(v) * g + f;1 < u ? a += ca(o, s, _, x, i, r) : (l = _, h = x);var w = (i - d) * g / p + d;if (n) {if (ua(d, f, g, v, v + m, y, e, w, r)) return !0;} else a += _a(d, f, g, v, v + m, y, w, r);o = Math.cos(v + m) * p + d, s = Math.sin(v + m) * g + f;break;case da.R:l = o = t[u++], h = s = t[u++];_ = l + t[u++], x = h + t[u++];if (n) {if (ra(l, h, _, h, e, i, r) || ra(_, h, _, x, e, i, r) || ra(_, x, l, x, e, i, r) || ra(l, x, l, h, e, i, r)) return !0;} else a += ca(_, h, _, x, i, r), a += ca(l, x, l, h, i, r);break;case da.Z:if (n) {if (ra(o, s, l, h, e, i, r)) return !0;} else a += ca(o, s, l, h, i, r);o = l, s = h;}}return n || function (t, e) {return Math.abs(t - e) < pa;}(s, h) || (a += ca(o, s, l, h, i, r) || 0), 0 !== a;}var wa = gn.prototype.getCanvasPattern,ba = Math.abs,Sa = new ia(!0);function Ma(t) {pi.call(this, t), this.path = null;}Ma.prototype = { constructor: Ma, type: \"path\", __dirtyPath: !0, strokeContainThreshold: 5, segmentIgnoreThreshold: 0, subPixelOptimize: !1, brush: function brush(t, e) {var n,i = this.style,r = this.path || Sa,a = i.hasStroke(),o = i.hasFill(),s = i.fill,l = i.stroke,h = o && !!s.colorStops,u = a && !!l.colorStops,c = o && !!s.image,d = a && !!l.image;i.bind(t, this, e), this.setTransform(t), this.__dirty && (h && (n = n || this.getBoundingRect(), this._fillGradient = i.getGradient(t, s, n)), u && (n = n || this.getBoundingRect(), this._strokeGradient = i.getGradient(t, l, n)));h ? t.fillStyle = this._fillGradient : c && (t.fillStyle = wa.call(s, t)), u ? t.strokeStyle = this._strokeGradient : d && (t.strokeStyle = wa.call(l, t));var f = i.lineDash,p = i.lineDashOffset,g = !!t.setLineDash,v = this.getGlobalScale();if (r.setScale(v[0], v[1], this.segmentIgnoreThreshold), this.__dirtyPath || f && !g && a ? (r.beginPath(t), f && !g && (r.setLineDash(f), r.setLineDashOffset(p)), this.buildPath(r, this.shape, !1), this.path && (this.__dirtyPath = !1)) : (t.beginPath(), this.path.rebuildPath(t)), o) if (null != i.fillOpacity) {var m = t.globalAlpha;t.globalAlpha = i.fillOpacity * i.opacity, r.fill(t), t.globalAlpha = m;} else r.fill(t);if (f && g && (t.setLineDash(f), t.lineDashOffset = p), a) if (null != i.strokeOpacity) {m = t.globalAlpha;t.globalAlpha = i.strokeOpacity * i.opacity, r.stroke(t), t.globalAlpha = m;} else r.stroke(t);f && g && t.setLineDash([]), null != i.text && (this.restoreTransform(t), this.drawRectText(t, this.getBoundingRect()));}, buildPath: function buildPath(t, e, n) {}, createPathProxy: function createPathProxy() {this.path = new ia();}, getBoundingRect: function getBoundingRect() {var t = this._rect,e = this.style,n = !t;if (n) {var i = this.path;i = i || (this.path = new ia()), this.__dirtyPath && (i.beginPath(), this.buildPath(i, this.shape, !1)), t = i.getBoundingRect();}if (this._rect = t, e.hasStroke()) {var r = this._rectWithStroke || (this._rectWithStroke = t.clone());if (this.__dirty || n) {r.copy(t);var a = e.lineWidth,o = e.strokeNoScale ? this.getLineScale() : 1;e.hasFill() || (a = Math.max(a, this.strokeContainThreshold || 4)), 1e-10 < o && (r.width += a / o, r.height += a / o, r.x -= a / o / 2, r.y -= a / o / 2);}return r;}return t;}, contain: function contain(t, e) {var n = this.transformCoordToLocal(t, e),i = this.getBoundingRect(),r = this.style;if (t = n[0], e = n[1], i.contain(t, e)) {var a = this.path.data;if (r.hasStroke()) {var o = r.lineWidth,s = r.strokeNoScale ? this.getLineScale() : 1;if (1e-10 < s && (r.hasFill() || (o = Math.max(o, this.strokeContainThreshold)), function (t, e, n, i) {return xa(t, e, !0, n, i);}(a, o / s, t, e))) return !0;}if (r.hasFill()) return function (t, e, n) {return xa(t, 0, !1, e, n);}(a, t, e);}return !1;}, dirty: function dirty(t) {null == t && (t = !0), t && (this.__dirtyPath = t, this._rect = null), this.__dirty = this.__dirtyText = !0, this.__zr && this.__zr.refresh(), this.__clipTarget && this.__clipTarget.dirty();}, animateShape: function animateShape(t) {return this.animate(\"shape\", t);}, attrKV: function attrKV(t, e) {\"shape\" === t ? (this.setShape(e), this.__dirtyPath = !0, this._rect = null) : pi.prototype.attrKV.call(this, t, e);}, setShape: function setShape(t, e) {var n = this.shape;if (n) {if (O(t)) for (var i in t) {t.hasOwnProperty(i) && (n[i] = t[i]);} else n[t] = e;this.dirty(!0);}return this;}, getLineScale: function getLineScale() {var t = this.transform;return t && 1e-10 < ba(t[0] - 1) && 1e-10 < ba(t[3] - 1) ? Math.sqrt(ba(t[0] * t[3] - t[2] * t[1])) : 1;} }, Ma.extend = function (r) {function t(t) {Ma.call(this, t), r.style && this.style.extendFrom(r.style, !1);var e = r.shape;if (e) {this.shape = this.shape || {};var n = this.shape;for (var i in e) {!n.hasOwnProperty(i) && e.hasOwnProperty(i) && (n[i] = e[i]);}}r.init && r.init.call(this, t);}for (var e in y(t, Ma), r) {\"style\" !== e && \"shape\" !== e && (t.prototype[e] = r[e]);}return t;}, y(Ma, pi);function Ia(t) {return Math.sqrt(t[0] * t[0] + t[1] * t[1]);}var Ta = ia.CMD,Ca = [[], [], []],ka = Math.sqrt,Da = Math.atan2,Aa = function Aa(t, e) {var n,i,r,a,o,s = t.data,l = Ta.M,h = Ta.C,u = Ta.L,c = Ta.R,d = Ta.A,f = Ta.Q;for (a = r = 0; r < s.length;) {switch (n = s[r++], a = r, i = 0, n) {case l:case u:i = 1;break;case h:i = 3;break;case f:i = 2;break;case d:var p = e[4],g = e[5],v = ka(e[0] * e[0] + e[1] * e[1]),m = ka(e[2] * e[2] + e[3] * e[3]),y = Da(-e[1] / m, e[0] / v);s[r] *= v, s[r++] += p, s[r] *= m, s[r++] += g, s[r++] *= v, s[r++] *= m, s[r++] += y, s[r++] += y, a = r += 2;break;case c:_[0] = s[r++], _[1] = s[r++], st(_, _, e), s[a++] = _[0], s[a++] = _[1], _[0] += s[r++], _[1] += s[r++], st(_, _, e), s[a++] = _[0], s[a++] = _[1];}for (o = 0; o < i; o++) {var _;(_ = Ca[o])[0] = s[r++], _[1] = s[r++], st(_, _, e), s[a++] = _[0], s[a++] = _[1];}}},La = Math.sqrt,Pa = Math.sin,Oa = Math.cos,Ea = Math.PI,Na = function Na(t, e) {return (t[0] * e[0] + t[1] * e[1]) / (Ia(t) * Ia(e));},Ba = function Ba(t, e) {return (t[0] * e[1] < t[1] * e[0] ? -1 : 1) * Math.acos(Na(t, e));};function za(t, e, n, i, r, a, o, s, l, h, u) {var c = l * (Ea / 180),d = Oa(c) * (t - n) / 2 + Pa(c) * (e - i) / 2,f = -1 * Pa(c) * (t - n) / 2 + Oa(c) * (e - i) / 2,p = d * d / (o * o) + f * f / (s * s);1 < p && (o *= La(p), s *= La(p));var g = (r === a ? -1 : 1) * La((o * o * (s * s) - o * o * (f * f) - s * s * (d * d)) / (o * o * (f * f) + s * s * (d * d))) || 0,v = g * o * f / s,m = g * -s * d / o,y = (t + n) / 2 + Oa(c) * v - Pa(c) * m,_ = (e + i) / 2 + Pa(c) * v + Oa(c) * m,x = Ba([1, 0], [(d - v) / o, (f - m) / s]),w = [(d - v) / o, (f - m) / s],b = [(-1 * d - v) / o, (-1 * f - m) / s],S = Ba(w, b);Na(w, b) <= -1 && (S = Ea), 1 <= Na(w, b) && (S = 0), 0 === a && 0 < S && (S -= 2 * Ea), 1 === a && S < 0 && (S += 2 * Ea), u.addData(h, y, _, o, s, x, S, c, a);}var Ra = /([mlvhzcqtsa])([^mlvhzcqtsa]*)/gi,Fa = /-?([0-9]*\\.)?[0-9]+([eE]-?[0-9]+)?/g;function Va(t, e) {var n = function (t) {if (!t) return new ia();for (var e, n = 0, i = 0, r = n, a = i, o = new ia(), s = ia.CMD, l = t.match(Ra), h = 0; h < l.length; h++) {for (var u, c = l[h], d = c.charAt(0), f = c.match(Fa) || [], p = f.length, g = 0; g < p; g++) {f[g] = parseFloat(f[g]);}for (var v = 0; v < p;) {var m,y,_,x,w,b,S,M = n,I = i;switch (d) {case \"l\":n += f[v++], i += f[v++], u = s.L, o.addData(u, n, i);break;case \"L\":n = f[v++], i = f[v++], u = s.L, o.addData(u, n, i);break;case \"m\":n += f[v++], i += f[v++], u = s.M, o.addData(u, n, i), r = n, a = i, d = \"l\";break;case \"M\":n = f[v++], i = f[v++], u = s.M, o.addData(u, n, i), r = n, a = i, d = \"L\";break;case \"h\":n += f[v++], u = s.L, o.addData(u, n, i);break;case \"H\":n = f[v++], u = s.L, o.addData(u, n, i);break;case \"v\":i += f[v++], u = s.L, o.addData(u, n, i);break;case \"V\":i = f[v++], u = s.L, o.addData(u, n, i);break;case \"C\":u = s.C, o.addData(u, f[v++], f[v++], f[v++], f[v++], f[v++], f[v++]), n = f[v - 2], i = f[v - 1];break;case \"c\":u = s.C, o.addData(u, f[v++] + n, f[v++] + i, f[v++] + n, f[v++] + i, f[v++] + n, f[v++] + i), n += f[v - 2], i += f[v - 1];break;case \"S\":m = n, y = i;var T = o.len(),C = o.data;e === s.C && (m += n - C[T - 4], y += i - C[T - 3]), u = s.C, M = f[v++], I = f[v++], n = f[v++], i = f[v++], o.addData(u, m, y, M, I, n, i);break;case \"s\":m = n, y = i;T = o.len(), C = o.data;e === s.C && (m += n - C[T - 4], y += i - C[T - 3]), u = s.C, M = n + f[v++], I = i + f[v++], n += f[v++], i += f[v++], o.addData(u, m, y, M, I, n, i);break;case \"Q\":M = f[v++], I = f[v++], n = f[v++], i = f[v++], u = s.Q, o.addData(u, M, I, n, i);break;case \"q\":M = f[v++] + n, I = f[v++] + i, n += f[v++], i += f[v++], u = s.Q, o.addData(u, M, I, n, i);break;case \"T\":m = n, y = i;T = o.len(), C = o.data;e === s.Q && (m += n - C[T - 4], y += i - C[T - 3]), n = f[v++], i = f[v++], u = s.Q, o.addData(u, m, y, n, i);break;case \"t\":m = n, y = i;T = o.len(), C = o.data;e === s.Q && (m += n - C[T - 4], y += i - C[T - 3]), n += f[v++], i += f[v++], u = s.Q, o.addData(u, m, y, n, i);break;case \"A\":_ = f[v++], x = f[v++], w = f[v++], b = f[v++], S = f[v++], za(M = n, I = i, n = f[v++], i = f[v++], b, S, _, x, w, u = s.A, o);break;case \"a\":_ = f[v++], x = f[v++], w = f[v++], b = f[v++], S = f[v++], za(M = n, I = i, n += f[v++], i += f[v++], b, S, _, x, w, u = s.A, o);}}\"z\" !== d && \"Z\" !== d || (u = s.Z, o.addData(u), n = r, i = a), e = u;}return o.toStatic(), o;}(t);return (e = e || {}).buildPath = function (t) {if (t.setData) {t.setData(n.data), (e = t.getContext()) && t.rebuildPath(e);} else {var e = t;n.rebuildPath(e);}}, e.applyTransform = function (t) {Aa(n, t), this.dirty(!0);}, e;}function Wa(t, e) {return new Ma(Va(t, e));}function Ha(t) {pi.call(this, t);}Ha.prototype = { constructor: Ha, type: \"text\", brush: function brush(t, e) {var n = this.style;this.__dirty && Kn(n), n.fill = n.stroke = n.shadowBlur = n.shadowColor = n.shadowOffsetX = n.shadowOffsetY = null;var i = n.text;null != i && (i += \"\"), ci(i, n) ? (this.setTransform(t), Jn(this, t, i, n, null, e), this.restoreTransform(t)) : t.__attrCachedBy = on.NONE;}, getBoundingRect: function getBoundingRect() {var t = this.style;if (this.__dirty && Kn(t), !this._rect) {var e = t.text;null != e ? e += \"\" : e = \"\";var n = Pn(t.text + \"\", t.font, t.textAlign, t.textVerticalAlign, t.textPadding, t.textLineHeight, t.rich);if (n.x += t.x || 0, n.y += t.y || 0, si(t.textStroke, t.textStrokeWidth)) {var i = t.textStrokeWidth;n.x -= i / 2, n.y -= i / 2, n.width += i, n.height += i;}this._rect = n;}return this._rect;} }, y(Ha, pi);function Ga(l) {return m.browser.ie && 11 <= m.browser.version ? function () {var t,e = this.__clipPaths,n = this.style;if (e) for (var i = 0; i < e.length; i++) {var r = e[i],a = r && r.shape,o = r && r.type;if (a && (\"sector\" === o && a.startAngle === a.endAngle || \"rect\" === o && (!a.width || !a.height))) {for (var s = 0; s < Ua.length; s++) {Ua[s][2] = n[Ua[s][0]], n[Ua[s][0]] = Ua[s][1];}t = !0;break;}}if (l.apply(this, arguments), t) for (s = 0; s < Ua.length; s++) {n[Ua[s][0]] = Ua[s][2];}} : l;}var Xa = Ma.extend({ type: \"circle\", shape: { cx: 0, cy: 0, r: 0 }, buildPath: function buildPath(t, e, n) {n && t.moveTo(e.cx + e.r, e.cy), t.arc(e.cx, e.cy, e.r, 0, 2 * Math.PI, !0);} }),Ua = [[\"shadowBlur\", 0], [\"shadowColor\", \"#000\"], [\"shadowOffsetX\", 0], [\"shadowOffsetY\", 0]],Ya = Ma.extend({ type: \"sector\", shape: { cx: 0, cy: 0, r0: 0, r: 0, startAngle: 0, endAngle: 2 * Math.PI, clockwise: !0 }, brush: Ga(Ma.prototype.brush), buildPath: function buildPath(t, e) {var n = e.cx,i = e.cy,r = Math.max(e.r0 || 0, 0),a = Math.max(e.r, 0),o = e.startAngle,s = e.endAngle,l = e.clockwise,h = Math.cos(o),u = Math.sin(o);t.moveTo(h * r + n, u * r + i), t.lineTo(h * a + n, u * a + i), t.arc(n, i, a, o, s, !l), t.lineTo(Math.cos(s) * r + n, Math.sin(s) * r + i), 0 !== r && t.arc(n, i, r, s, o, l), t.closePath();} }),qa = Ma.extend({ type: \"ring\", shape: { cx: 0, cy: 0, r: 0, r0: 0 }, buildPath: function buildPath(t, e) {var n = e.cx,i = e.cy,r = 2 * Math.PI;t.moveTo(n + e.r, i), t.arc(n, i, e.r, 0, r, !1), t.moveTo(n + e.r0, i), t.arc(n, i, e.r0, 0, r, !0);} });function ja(t, e, n, i, r, a, o) {var s = .5 * (n - t),l = .5 * (i - e);return (2 * (e - n) + s + l) * o + (-3 * (e - n) - 2 * s - l) * a + s * r + e;}function Za(t, e, n) {var i = e.points,r = e.smooth;if (i && 2 <= i.length) {if (r && \"spline\" !== r) {var a = function (t, e, n, i) {var r,a,o,s,l = [],h = [],u = [],c = [];if (i) {o = [1 / 0, 1 / 0], s = [-1 / 0, -1 / 0];for (var d = 0, f = t.length; d < f; d++) {lt(o, o, t[d]), ht(s, s, t[d]);}lt(o, o, i[0]), ht(s, s, i[1]);}for (d = 0, f = t.length; d < f; d++) {var p = t[d];if (n) r = t[d ? d - 1 : f - 1], a = t[(d + 1) % f];else {if (0 === d || d === f - 1) {l.push(J(t[d]));continue;}r = t[d - 1], a = t[d + 1];}et(h, a, r), nt(h, h, e);var g = rt(p, r),v = rt(p, a),m = g + v;0 !== m && (g /= m, v /= m), nt(u, h, -g), nt(c, h, v);var y = tt([], p, u),_ = tt([], p, c);i && (ht(y, y, o), lt(y, y, s), ht(_, _, o), lt(_, _, s)), l.push(y), l.push(_);}return n && l.push(l.shift()), l;}(i, r, n, e.smoothConstraint);t.moveTo(i[0][0], i[0][1]);for (var o = i.length, s = 0; s < (n ? o : o - 1); s++) {var l = a[2 * s],h = a[2 * s + 1],u = i[(s + 1) % o];t.bezierCurveTo(l[0], l[1], h[0], h[1], u[0], u[1]);}} else {\"spline\" === r && (i = function (t, e) {for (var n = t.length, i = [], r = 0, a = 1; a < n; a++) {r += rt(t[a - 1], t[a]);}var o = r / 2;o = o < n ? n : o;for (a = 0; a < o; a++) {var s,l,h,u = a / (o - 1) * (e ? n : n - 1),c = Math.floor(u),d = u - c,f = t[c % n];h = e ? (s = t[(c - 1 + n) % n], l = t[(c + 1) % n], t[(c + 2) % n]) : (s = t[0 === c ? c : c - 1], l = t[n - 2 < c ? n - 1 : c + 1], t[n - 3 < c ? n - 1 : c + 2]);var p = d * d,g = d * p;i.push([ja(s[0], f[0], l[0], h[0], d, p, g), ja(s[1], f[1], l[1], h[1], d, p, g)]);}return i;}(i, n)), t.moveTo(i[0][0], i[0][1]);s = 1;for (var c = i.length; s < c; s++) {t.lineTo(i[s][0], i[s][1]);}}n && t.closePath();}}var $a = Ma.extend({ type: \"polygon\", shape: { points: null, smooth: !1, smoothConstraint: null }, buildPath: function buildPath(t, e) {Za(t, e, !0);} }),Ka = Ma.extend({ type: \"polyline\", shape: { points: null, smooth: !1, smoothConstraint: null }, style: { stroke: \"#000\", fill: null }, buildPath: function buildPath(t, e) {Za(t, e, !1);} }),Qa = Math.round;function Ja(t, e, n) {var i = n && n.lineWidth;if (e && i) {var r = e.x1,a = e.x2,o = e.y1,s = e.y2;Qa(2 * r) === Qa(2 * a) ? t.x1 = t.x2 = eo(r, i, !0) : (t.x1 = r, t.x2 = a), Qa(2 * o) === Qa(2 * s) ? t.y1 = t.y2 = eo(o, i, !0) : (t.y1 = o, t.y2 = s);}}function to(t, e, n) {var i = n && n.lineWidth;if (e && i) {var r = e.x,a = e.y,o = e.width,s = e.height;t.x = eo(r, i, !0), t.y = eo(a, i, !0), t.width = Math.max(eo(r + o, i, !1) - t.x, 0 === o ? 0 : 1), t.height = Math.max(eo(a + s, i, !1) - t.y, 0 === s ? 0 : 1);}}function eo(t, e, n) {var i = Qa(2 * t);return (i + Qa(e)) % 2 == 0 ? i / 2 : (i + (n ? 1 : -1)) / 2;}var no = {},io = Ma.extend({ type: \"rect\", shape: { r: 0, x: 0, y: 0, width: 0, height: 0 }, buildPath: function buildPath(t, e) {var n, i, r, a;this.subPixelOptimize ? (to(no, e, this.style), n = no.x, i = no.y, r = no.width, a = no.height, no.r = e.r, e = no) : (n = e.x, i = e.y, r = e.width, a = e.height), e.r ? Xn(t, e) : t.rect(n, i, r, a), t.closePath();} }),ro = {},ao = Ma.extend({ type: \"line\", shape: { x1: 0, y1: 0, x2: 0, y2: 0, percent: 1 }, style: { stroke: \"#000\", fill: null }, buildPath: function buildPath(t, e) {var n, i, r, a;a = this.subPixelOptimize ? (Ja(ro, e, this.style), n = ro.x1, i = ro.y1, r = ro.x2, ro.y2) : (n = e.x1, i = e.y1, r = e.x2, e.y2);var o = e.percent;0 !== o && (t.moveTo(n, i), o < 1 && (r = n * (1 - o) + r * o, a = i * (1 - o) + a * o), t.lineTo(r, a));}, pointAt: function pointAt(t) {var e = this.shape;return [e.x1 * (1 - t) + e.x2 * t, e.y1 * (1 - t) + e.y2 * t];} }),oo = [];function so(t, e, n) {var i = t.cpx2,r = t.cpy2;return null === i || null === r ? [(n ? Ir : Mr)(t.x1, t.cpx1, t.cpx2, t.x2, e), (n ? Ir : Mr)(t.y1, t.cpy1, t.cpy2, t.y2, e)] : [(n ? Dr : kr)(t.x1, t.cpx1, t.x2, e), (n ? Dr : kr)(t.y1, t.cpy1, t.y2, e)];}function lo(t) {this.colorStops = t || [];}var ho = Ma.extend({ type: \"bezier-curve\", shape: { x1: 0, y1: 0, x2: 0, y2: 0, cpx1: 0, cpy1: 0, percent: 1 }, style: { stroke: \"#000\", fill: null }, buildPath: function buildPath(t, e) {var n = e.x1,i = e.y1,r = e.x2,a = e.y2,o = e.cpx1,s = e.cpy1,l = e.cpx2,h = e.cpy2,u = e.percent;0 !== u && (t.moveTo(n, i), null == l || null == h ? (u < 1 && (Lr(n, o, r, u, oo), o = oo[1], r = oo[2], Lr(i, s, a, u, oo), s = oo[1], a = oo[2]), t.quadraticCurveTo(o, s, r, a)) : (u < 1 && (Cr(n, o, l, r, u, oo), o = oo[1], l = oo[2], r = oo[3], Cr(i, s, h, a, u, oo), s = oo[1], h = oo[2], a = oo[3]), t.bezierCurveTo(o, s, l, h, r, a)));}, pointAt: function pointAt(t) {return so(this.shape, t, !1);}, tangentAt: function tangentAt(t) {var e = so(this.shape, t, !0);return it(e, e);} }),uo = Ma.extend({ type: \"arc\", shape: { cx: 0, cy: 0, r: 0, startAngle: 0, endAngle: 2 * Math.PI, clockwise: !0 }, style: { stroke: \"#000\", fill: null }, buildPath: function buildPath(t, e) {var n = e.cx,i = e.cy,r = Math.max(e.r, 0),a = e.startAngle,o = e.endAngle,s = e.clockwise,l = Math.cos(a),h = Math.sin(a);t.moveTo(l * r + n, h * r + i), t.arc(n, i, r, a, o, !s);} }),co = Ma.extend({ type: \"compound\", shape: { paths: null }, _updatePathDirty: function _updatePathDirty() {for (var t = this.__dirtyPath, e = this.shape.paths, n = 0; n < e.length; n++) {t = t || e[n].__dirtyPath;}this.__dirtyPath = t, this.__dirty = this.__dirty || t;}, beforeBrush: function beforeBrush() {this._updatePathDirty();for (var t = this.shape.paths || [], e = this.getGlobalScale(), n = 0; n < t.length; n++) {t[n].path || t[n].createPathProxy(), t[n].path.setScale(e[0], e[1], t[n].segmentIgnoreThreshold);}}, buildPath: function buildPath(t, e) {for (var n = e.paths || [], i = 0; i < n.length; i++) {n[i].buildPath(t, n[i].shape, !0);}}, afterBrush: function afterBrush() {for (var t = this.shape.paths || [], e = 0; e < t.length; e++) {t[e].__dirtyPath = !1;}}, getBoundingRect: function getBoundingRect() {return this._updatePathDirty(), Ma.prototype.getBoundingRect.call(this);} });lo.prototype = { constructor: lo, addColorStop: function addColorStop(t, e) {this.colorStops.push({ offset: t, color: e });} };function fo(t, e, n, i, r, a) {this.x = null == t ? 0 : t, this.y = null == e ? 0 : e, this.x2 = null == n ? 1 : n, this.y2 = null == i ? 0 : i, this.type = \"linear\", this.global = a || !1, lo.call(this, r);}fo.prototype = { constructor: fo }, y(fo, lo);function po(t, e, n, i, r) {this.x = null == t ? .5 : t, this.y = null == e ? .5 : e, this.r = null == n ? .5 : n, this.type = \"radial\", this.global = r || !1, lo.call(this, i);}function go(t) {pi.call(this, t), this._displayables = [], this._temporaryDisplayables = [], this._cursor = 0, this.notClear = !0;}po.prototype = { constructor: po }, y(po, lo), go.prototype.incremental = !0, go.prototype.clearDisplaybles = function () {this._displayables = [], this._temporaryDisplayables = [], this._cursor = 0, this.dirty(), this.notClear = !1;}, go.prototype.addDisplayable = function (t, e) {e ? this._temporaryDisplayables.push(t) : this._displayables.push(t), this.dirty();}, go.prototype.addDisplayables = function (t, e) {e = e || !1;for (var n = 0; n < t.length; n++) {this.addDisplayable(t[n], e);}}, go.prototype.eachPendingDisplayable = function (t) {for (var e = this._cursor; e < this._displayables.length; e++) {t && t(this._displayables[e]);}for (e = 0; e < this._temporaryDisplayables.length; e++) {t && t(this._temporaryDisplayables[e]);}}, go.prototype.update = function () {this.updateTransform();for (var t = this._cursor; t < this._displayables.length; t++) {(e = this._displayables[t]).parent = this, e.update(), e.parent = null;}for (t = 0; t < this._temporaryDisplayables.length; t++) {var e;(e = this._temporaryDisplayables[t]).parent = this, e.update(), e.parent = null;}}, go.prototype.brush = function (t, e) {for (var n = this._cursor; n < this._displayables.length; n++) {(i = this._displayables[n]).beforeBrush && i.beforeBrush(t), i.brush(t, n === this._cursor ? null : this._displayables[n - 1]), i.afterBrush && i.afterBrush(t);}this._cursor = n;for (n = 0; n < this._temporaryDisplayables.length; n++) {var i;(i = this._temporaryDisplayables[n]).beforeBrush && i.beforeBrush(t), i.brush(t, 0 === n ? null : this._temporaryDisplayables[n - 1]), i.afterBrush && i.afterBrush(t);}this._temporaryDisplayables = [], this.notClear = !0;};var vo = [];go.prototype.getBoundingRect = function () {if (!this._rect) {for (var t = new Ue(1 / 0, 1 / 0, -1 / 0, -1 / 0), e = 0; e < this._displayables.length; e++) {var n = this._displayables[e],i = n.getBoundingRect().clone();n.needLocalTransform() && i.applyTransform(n.getLocalTransform(vo)), t.union(i);}this._rect = t;}return this._rect;}, go.prototype.contain = function (t, e) {var n = this.transformCoordToLocal(t, e);if (this.getBoundingRect().contain(n[0], n[1])) for (var i = 0; i < this._displayables.length; i++) {if (this._displayables[i].contain(t, e)) return !0;}return !1;}, y(go, pi);var mo = Math.max,yo = Math.min,_o = {},xo = 1,wo = \"emphasis\",bo = \"normal\",So = 1,Mo = {},Io = {};function To(t) {return Ma.extend(t);}function Co(t, e) {Io[t] = e;}function ko(t, e, n, i) {var r = Wa(t, e);return n && (\"center\" === i && (n = Ao(n, r.getBoundingRect())), Po(r, n)), r;}function Do(t, n, i) {var r = new gi({ style: { image: t, x: n.x, y: n.y, width: n.width, height: n.height }, onload: function onload(t) {if (\"center\" === i) {var e = { width: t.width, height: t.height };r.setStyle(Ao(n, e));}} });return r;}function Ao(t, e) {var n,i = e.width / e.height,r = t.height * i;return n = r <= t.width ? t.height : (r = t.width) / i, { x: t.x + t.width / 2 - r / 2, y: t.y + t.height / 2 - n / 2, width: r, height: n };}function Lo(t, e) {for (var n = [], i = t.length, r = 0; r < i; r++) {var a = t[r];a.path || a.createPathProxy(), a.__dirtyPath && a.buildPath(a.path, a.shape, !0), n.push(a.path);}var o = new Ma(e);return o.createPathProxy(), o.buildPath = function (t) {t.appendPath(n);var e = t.getContext();e && t.rebuildPath(e);}, o;}function Po(t, e) {if (t.applyTransform) {var n = t.getBoundingRect().calculateTransform(e);t.applyTransform(n);}}var Oo = eo;function Eo(t) {return null != t && \"none\" !== t;}var No = Z(),Bo = 0;function zo(t) {if (\"string\" != typeof t) return t;var e = No.get(t);return e || (e = function (t, e) {var n = fe(t);if (n) {for (var i = 0; i < 3; i++) {n[i] = e < 0 ? n[i] * (1 - e) | 0 : (255 - n[i]) * e + n[i] | 0, 255 < n[i] ? n[i] = 255 : t[i] < 0 && (n[i] = 0);}return ge(n, 4 === n.length ? \"rgba\" : \"rgb\");}}(t, -.1), Bo < 1e4 && (No.set(t, e), Bo++)), e;}function Ro(t) {var e = t.__hoverStl;if (e && !t.__highlighted) {var n = t.__zr,i = t.useHoverLayer && n && \"canvas\" === n.painter.type;if (t.__highlighted = i ? \"layer\" : \"plain\", !(t.isGroup || !n && t.useHoverLayer)) {var r = t,a = t.style;i && (a = (r = n.addHover(t)).style), rs(a), i || function (t) {if (t.__hoverStlDirty) {t.__hoverStlDirty = !1;var e = t.__hoverStl;if (e) {var n = t.__cachedNormalStl = {};t.__cachedNormalZ2 = t.z2;var i = t.style;for (var r in e) {null != e[r] && (n[r] = i[r]);}n.fill = i.fill, n.stroke = i.stroke;} else t.__cachedNormalStl = t.__cachedNormalZ2 = null;}}(r), a.extendFrom(e), Fo(a, e, \"fill\"), Fo(a, e, \"stroke\"), is(a), i || (t.dirty(!1), t.z2 += xo);}}}function Fo(t, e, n) {!Eo(e[n]) && Eo(t[n]) && (t[n] = zo(t[n]));}function Vo(t) {var e = t.__highlighted;if (e && (t.__highlighted = !1, !t.isGroup)) if (\"layer\" === e) t.__zr && t.__zr.removeHover(t);else {var n = t.style,i = t.__cachedNormalStl;i && (rs(n), t.setStyle(i), is(n));var r = t.__cachedNormalZ2;null != r && t.z2 - r === xo && (t.z2 = r);}}function Wo(t, e, n) {var i,r = bo,a = bo;t.__highlighted && (r = wo, i = !0), e(t, n), t.__highlighted && (a = wo, i = !0), t.isGroup && t.traverse(function (t) {t.isGroup || e(t, n);}), i && t.__highDownOnUpdate && t.__highDownOnUpdate(r, a);}function Ho(t, e) {e = t.__hoverStl = !1 !== e && (t.hoverStyle || e || {}), t.__hoverStlDirty = !0, t.__highlighted && (t.__cachedNormalStl = null, Vo(t), Ro(t));}function Go(t) {qo(this, t) || this.__highByOuter || Wo(this, Ro);}function Xo(t) {qo(this, t) || this.__highByOuter || Wo(this, Vo);}function Uo(t) {this.__highByOuter |= 1 << (t || 0), Wo(this, Ro);}function Yo(t) {(this.__highByOuter &= ~(1 << (t || 0))) || Wo(this, Vo);}function qo(t, e) {return t.__highDownSilentOnTouch && e.zrByTouch;}function jo(t, e) {Zo(t, !0), Wo(t, Ho, e);}function Zo(t, e) {var n = !1 === e;if (t.__highDownSilentOnTouch = t.highDownSilentOnTouch, t.__highDownOnUpdate = t.highDownOnUpdate, !n || t.__highDownDispatcher) {var i = n ? \"off\" : \"on\";t[i](\"mouseover\", Go)[i](\"mouseout\", Xo), t[i](\"emphasis\", Uo)[i](\"normal\", Yo), t.__highByOuter = t.__highByOuter || 0, t.__highDownDispatcher = !n;}}function $o(t) {return !(!t || !t.__highDownDispatcher);}function Ko(t) {var e = Mo[t];return null == e && So <= 32 && (e = Mo[t] = So++), e;}function Qo(t, e, n, i, r, a, o) {var s,l = (r = r || _o).labelFetcher,h = r.labelDataIndex,u = r.labelDimIndex,c = n.getShallow(\"show\"),d = i.getShallow(\"show\");(c || d) && (l && (s = l.getFormattedLabel(h, \"normal\", null, u)), null == s && (s = T(r.defaultText) ? r.defaultText(h, r) : r.defaultText));var f = c ? s : null,p = d ? F(l ? l.getFormattedLabel(h, \"emphasis\", null, u) : null, s) : null;null == f && null == p || (Jo(t, n, a, r), Jo(e, i, o, r, !0)), t.text = f, e.text = p;}function Jo(t, e, n, i, r) {return ts(t, e, i, r), n && S(t, n), t;}function ts(t, e, n, i) {if ((n = n || _o).isRectText) {var r;n.getTextPosition ? r = n.getTextPosition(e, i) : \"outside\" === (r = e.getShallow(\"position\") || (i ? null : \"inside\")) && (r = \"top\"), t.textPosition = r, t.textOffset = e.getShallow(\"offset\");var a = e.getShallow(\"rotate\");null != a && (a *= Math.PI / 180), t.textRotation = a, t.textDistance = F(e.getShallow(\"distance\"), i ? null : 5);}var o,s = e.ecModel,l = s && s.option.textStyle,h = function (t) {var e;for (; t && t !== t.ecModel;) {var n = (t.option || _o).rich;if (n) for (var i in e = e || {}, n) {n.hasOwnProperty(i) && (e[i] = 1);}t = t.parentModel;}return e;}(e);if (h) for (var u in o = {}, h) {if (h.hasOwnProperty(u)) {var c = e.getModel([\"rich\", u]);es(o[u] = {}, c, l, n, i);}}return t.rich = o, es(t, e, l, n, i, !0), n.forceRich && !n.textStyle && (n.textStyle = {}), t;}function es(t, e, n, i, r, a) {n = !r && n || _o, t.textFill = ns(e.getShallow(\"color\"), i) || n.color, t.textStroke = ns(e.getShallow(\"textBorderColor\"), i) || n.textBorderColor, t.textStrokeWidth = F(e.getShallow(\"textBorderWidth\"), n.textBorderWidth), r || (a && (t.insideRollbackOpt = i, is(t)), null == t.textFill && (t.textFill = i.autoColor)), t.fontStyle = e.getShallow(\"fontStyle\") || n.fontStyle, t.fontWeight = e.getShallow(\"fontWeight\") || n.fontWeight, t.fontSize = e.getShallow(\"fontSize\") || n.fontSize, t.fontFamily = e.getShallow(\"fontFamily\") || n.fontFamily, t.textAlign = e.getShallow(\"align\"), t.textVerticalAlign = e.getShallow(\"verticalAlign\") || e.getShallow(\"baseline\"), t.textLineHeight = e.getShallow(\"lineHeight\"), t.textWidth = e.getShallow(\"width\"), t.textHeight = e.getShallow(\"height\"), t.textTag = e.getShallow(\"tag\"), a && i.disableBox || (t.textBackgroundColor = ns(e.getShallow(\"backgroundColor\"), i), t.textPadding = e.getShallow(\"padding\"), t.textBorderColor = ns(e.getShallow(\"borderColor\"), i), t.textBorderWidth = e.getShallow(\"borderWidth\"), t.textBorderRadius = e.getShallow(\"borderRadius\"), t.textBoxShadowColor = e.getShallow(\"shadowColor\"), t.textBoxShadowBlur = e.getShallow(\"shadowBlur\"), t.textBoxShadowOffsetX = e.getShallow(\"shadowOffsetX\"), t.textBoxShadowOffsetY = e.getShallow(\"shadowOffsetY\")), t.textShadowColor = e.getShallow(\"textShadowColor\") || n.textShadowColor, t.textShadowBlur = e.getShallow(\"textShadowBlur\") || n.textShadowBlur, t.textShadowOffsetX = e.getShallow(\"textShadowOffsetX\") || n.textShadowOffsetX, t.textShadowOffsetY = e.getShallow(\"textShadowOffsetY\") || n.textShadowOffsetY;}function ns(t, e) {return \"auto\" !== t ? t : e && e.autoColor ? e.autoColor : null;}function is(t) {var e,n = t.textPosition,i = t.insideRollbackOpt;if (i && null == t.textFill) {var r = i.autoColor,a = i.isRectText,o = i.useInsideStyle,s = !1 !== o && (!0 === o || a && n && \"string\" == typeof n && 0 <= n.indexOf(\"inside\")),l = !s && null != r;(s || l) && (e = { textFill: t.textFill, textStroke: t.textStroke, textStrokeWidth: t.textStrokeWidth }), s && (t.textFill = \"#fff\", null == t.textStroke && (t.textStroke = r, null == t.textStrokeWidth && (t.textStrokeWidth = 2))), l && (t.textFill = r);}t.insideRollback = e;}function rs(t) {var e = t.insideRollback;e && (t.textFill = e.textFill, t.textStroke = e.textStroke, t.textStrokeWidth = e.textStrokeWidth, t.insideRollback = null);}function as(t, e) {var n = e || e.getModel(\"textStyle\");return X([t.fontStyle || n && n.getShallow(\"fontStyle\") || \"\", t.fontWeight || n && n.getShallow(\"fontWeight\") || \"\", (t.fontSize || n && n.getShallow(\"fontSize\") || 12) + \"px\", t.fontFamily || n && n.getShallow(\"fontFamily\") || \"sans-serif\"].join(\" \"));}function os(t, e, n, i, r, a) {if (\"function\" == typeof r && (a = r, r = null), i && i.isAnimationEnabled()) {var o = t ? \"Update\" : \"\",s = i.getShallow(\"animationDuration\" + o),l = i.getShallow(\"animationEasing\" + o),h = i.getShallow(\"animationDelay\" + o);\"function\" == typeof h && (h = h(r, i.getAnimationDelayParams ? i.getAnimationDelayParams(e, r) : null)), \"function\" == typeof s && (s = s(r)), 0 < s ? e.animateTo(n, s, h || 0, l, a, !!a) : (e.stopAnimation(), e.attr(n), a && a());} else e.stopAnimation(), e.attr(n), a && a();}function ss(t, e, n, i, r) {os(!0, t, e, n, i, r);}function ls(t, e, n, i, r) {os(!1, t, e, n, i, r);}function hs(t, e, n) {return e && !P(e) && (e = Xt.getLocalTransform(e)), n && (e = Wt([], e)), st([], t, e);}function us(t, e, i, n) {if (t && e) {var r,a = (r = {}, t.traverse(function (t) {!t.isGroup && t.anid && (r[t.anid] = t);}), r);e.traverse(function (t) {if (!t.isGroup && t.anid) {var e = a[t.anid];if (e) {var n = o(t);t.attr(o(e)), ss(t, n, i, t.dataIndex);}}});}function o(t) {var e = { position: J(t.position), rotation: t.rotation };return t.shape && (e.shape = S({}, t.shape)), e;}}function cs(t, e, n, i, r, a, o, s) {var l = n - t,h = i - e,u = o - r,c = s - a,d = ds(u, c, l, h);if (function (t) {return t <= 1e-6 && -1e-6 <= t;}(d)) return !1;var f = t - r,p = e - a,g = ds(f, p, l, h) / d;if (g < 0 || 1 < g) return !1;var v = ds(f, p, u, c) / d;return !(v < 0 || 1 < v);}function ds(t, e, n, i) {return t * i - n * e;}Co(\"circle\", Xa), Co(\"sector\", Ya), Co(\"ring\", qa), Co(\"polygon\", $a), Co(\"polyline\", Ka), Co(\"rect\", io), Co(\"line\", ao), Co(\"bezierCurve\", ho), Co(\"arc\", uo);var fs = (Object.freeze || Object)({ Z2_EMPHASIS_LIFT: xo, CACHED_LABEL_STYLE_PROPERTIES: { color: \"textFill\", textBorderColor: \"textStroke\", textBorderWidth: \"textStrokeWidth\" }, extendShape: To, extendPath: function extendPath(t, e) {return function (t, e) {return Ma.extend(Va(t, e));}(t, e);}, registerShape: Co, getShapeClass: function getShapeClass(t) {if (Io.hasOwnProperty(t)) return Io[t];}, makePath: ko, makeImage: Do, mergePath: Lo, resizePath: Po, subPixelOptimizeLine: function subPixelOptimizeLine(t) {return Ja(t.shape, t.shape, t.style), t;}, subPixelOptimizeRect: function subPixelOptimizeRect(t) {return to(t.shape, t.shape, t.style), t;}, subPixelOptimize: Oo, setElementHoverStyle: Ho, setHoverStyle: jo, setAsHighDownDispatcher: Zo, isHighDownDispatcher: $o, getHighlightDigit: Ko, setLabelStyle: Qo, modifyLabelStyle: function modifyLabelStyle(t, e, n) {var i = t.style;e && (rs(i), t.setStyle(e), is(i)), i = t.__hoverStl, n && i && (rs(i), S(i, n), is(i));}, setTextStyle: Jo, setText: function setText(t, e, n) {var i,r = { isRectText: !0 };!1 === n ? i = !0 : r.autoColor = n, ts(t, e, r, i);}, getFont: as, updateProps: ss, initProps: ls, getTransform: function getTransform(t, e) {for (var n = Bt([]); t && t !== e;) {zt(n, t.getLocalTransform(), n), t = t.parent;}return n;}, applyTransform: hs, transformDirection: function transformDirection(t, e, n) {var i = 0 === e[4] || 0 === e[5] || 0 === e[0] ? 1 : Math.abs(2 * e[4] / e[0]),r = 0 === e[4] || 0 === e[5] || 0 === e[2] ? 1 : Math.abs(2 * e[4] / e[2]),a = [\"left\" === t ? -i : \"right\" === t ? i : 0, \"top\" === t ? -r : \"bottom\" === t ? r : 0];return a = hs(a, e, n), Math.abs(a[0]) > Math.abs(a[1]) ? 0 < a[0] ? \"right\" : \"left\" : 0 < a[1] ? \"bottom\" : \"top\";}, groupTransition: us, clipPointsByRect: function clipPointsByRect(t, i) {return A(t, function (t) {var e = t[0];e = mo(e, i.x), e = yo(e, i.x + i.width);var n = t[1];return n = mo(n, i.y), [e, n = yo(n, i.y + i.height)];});}, clipRectByRect: function clipRectByRect(t, e) {var n = mo(t.x, e.x),i = yo(t.x + t.width, e.x + e.width),r = mo(t.y, e.y),a = yo(t.y + t.height, e.y + e.height);if (n <= i && r <= a) return { x: n, y: r, width: i - n, height: a - r };}, createIcon: function createIcon(t, e, n) {var i = (e = S({ rectHover: !0 }, e)).style = { strokeNoScale: !0 };if (n = n || { x: -1, y: -1, width: 2, height: 2 }, t) return 0 === t.indexOf(\"image://\") ? (i.image = t.slice(8), k(i, n), new gi(e)) : ko(t.replace(\"path://\", \"\"), e, n, \"center\");}, linePolygonIntersect: function linePolygonIntersect(t, e, n, i, r) {for (var a = 0, o = r[r.length - 1]; a < r.length; a++) {var s = r[a];if (cs(t, e, n, i, s[0], s[1], o[0], o[1])) return !0;o = s;}}, lineLineIntersect: cs, Group: Ye, Image: gi, Text: Ha, Circle: Xa, Sector: Ya, Ring: qa, Polygon: $a, Polyline: Ka, Rect: io, Line: ao, BezierCurve: ho, Arc: uo, IncrementalDisplayable: go, CompoundPath: co, LinearGradient: fo, RadialGradient: po, BoundingRect: Ue }),ps = [\"textStyle\", \"color\"],gs = { getTextColor: function getTextColor(t) {var e = this.ecModel;return this.getShallow(\"color\") || (!t && e ? e.get(ps) : null);}, getFont: function getFont() {return as({ fontStyle: this.getShallow(\"fontStyle\"), fontWeight: this.getShallow(\"fontWeight\"), fontSize: this.getShallow(\"fontSize\"), fontFamily: this.getShallow(\"fontFamily\") }, this.ecModel);}, getTextRect: function getTextRect(t) {return Pn(t, this.getFont(), this.getShallow(\"align\"), this.getShallow(\"verticalAlign\") || this.getShallow(\"baseline\"), this.getShallow(\"padding\"), this.getShallow(\"lineHeight\"), this.getShallow(\"rich\"), this.getShallow(\"truncateText\"));} },vs = lr([[\"fill\", \"color\"], [\"stroke\", \"borderColor\"], [\"lineWidth\", \"borderWidth\"], [\"opacity\"], [\"shadowBlur\"], [\"shadowOffsetX\"], [\"shadowOffsetY\"], [\"shadowColor\"], [\"textPosition\"], [\"textAlign\"]]),ms = { getItemStyle: function getItemStyle(t, e) {var n = vs(this, t, e),i = this.getBorderLineDash();return i && (n.lineDash = i), n;}, getBorderLineDash: function getBorderLineDash() {var t = this.get(\"borderType\");return \"solid\" === t || null == t ? null : \"dashed\" === t ? [5, 5] : [1, 1];} },ys = _,_s = ji();function xs(t, e, n) {this.parentModel = e, this.ecModel = n, this.option = t;}function ws(t, e, n) {for (var i = 0; i < e.length && (!e[i] || null != (t = t && \"object\" == typeof t ? t[e[i]] : null)); i++) {;}return null == t && n && (t = n.get(e)), t;}function bs(t, e) {var n = _s(t).getParent;return n ? n.call(t, e) : t.parentModel;}xs.prototype = { constructor: xs, init: null, mergeOption: function mergeOption(t) {f(this.option, t, !0);}, get: function get(t, e) {return null == t ? this.option : ws(this.option, this.parsePath(t), !e && bs(this, t));}, getShallow: function getShallow(t, e) {var n = this.option,i = null == n ? n : n[t],r = !e && bs(this, t);return null == i && r && (i = r.getShallow(t)), i;}, getModel: function getModel(t, e) {var n;return new xs(null == t ? this.option : ws(this.option, t = this.parsePath(t)), e = e || (n = bs(this, t)) && n.getModel(t), this.ecModel);}, isEmpty: function isEmpty() {return null == this.option;}, restoreData: function restoreData() {}, clone: function clone() {return new this.constructor(b(this.option));}, setReadOnly: function setReadOnly(t) {}, parsePath: function parsePath(t) {return \"string\" == typeof t && (t = t.split(\".\")), t;}, customizeGetParent: function customizeGetParent(t) {_s(this).getParent = t;}, isAnimationEnabled: function isAnimationEnabled() {if (!m.node) {if (null != this.option.animation) return !!this.option.animation;if (this.parentModel) return this.parentModel.isAnimationEnabled();}} }, nr(xs), rr(xs), ys(xs, ur), ys(xs, dr), ys(xs, gs), ys(xs, ms);var Ss = 0;function Ms(t) {return [t || \"\", Ss++, Math.random().toFixed(5)].join(\"_\");}var Is = 1e-4;function Ts(t, e, n, i) {var r = e[1] - e[0],a = n[1] - n[0];if (0 == r) return 0 == a ? n[0] : (n[0] + n[1]) / 2;if (i) {if (0 < r) {if (t <= e[0]) return n[0];if (t >= e[1]) return n[1];} else {if (t >= e[0]) return n[0];if (t <= e[1]) return n[1];}} else {if (t === e[0]) return n[0];if (t === e[1]) return n[1];}return (t - e[0]) / r * a + n[0];}function Cs(t, e) {switch (t) {case \"center\":case \"middle\":t = \"50%\";break;case \"left\":case \"top\":t = \"0%\";break;case \"right\":case \"bottom\":t = \"100%\";}return \"string\" == typeof t ? function (t) {return t.replace(/^\\s+|\\s+$/g, \"\");}(t).match(/%$/) ? parseFloat(t) / 100 * e : parseFloat(t) : null == t ? NaN : +t;}function ks(t, e, n) {return null == e && (e = 10), e = Math.min(Math.max(0, e), 20), t = (+t).toFixed(e), n ? t : +t;}function Ds(t) {var e = t.toString(),n = e.indexOf(\"e\");if (0 < n) {var i = +e.slice(n + 1);return i < 0 ? -i : 0;}var r = e.indexOf(\".\");return r < 0 ? 0 : e.length - 1 - r;}function As(t) {var e = 2 * Math.PI;return (t % e + e) % e;}function Ls(t) {return -Is < t && t < Is;}var Ps = /^(?:(\\d{4})(?:[-\\/](\\d{1,2})(?:[-\\/](\\d{1,2})(?:[T ](\\d{1,2})(?::(\\d\\d)(?::(\\d\\d)(?:[.,](\\d+))?)?)?(Z|[\\+\\-]\\d\\d:?\\d\\d)?)?)?)?)?$/;function Os(t) {if (t instanceof Date) return t;if (\"string\" != typeof t) return null == t ? new Date(NaN) : new Date(Math.round(t));var e = Ps.exec(t);if (!e) return new Date(NaN);if (e[8]) {var n = +e[4] || 0;return \"Z\" !== e[8].toUpperCase() && (n -= e[8].slice(0, 3)), new Date(Date.UTC(+e[1], +(e[2] || 1) - 1, +e[3] || 1, n, +(e[5] || 0), +e[6] || 0, +e[7] || 0));}return new Date(+e[1], +(e[2] || 1) - 1, +e[3] || 1, +e[4] || 0, +(e[5] || 0), +e[6] || 0, +e[7] || 0);}function Es(t) {if (0 === t) return 0;var e = Math.floor(Math.log(t) / Math.LN10);return 10 <= t / Math.pow(10, e) && e++, e;}function Ns(t, e) {var n = Es(t),i = Math.pow(10, n),r = t / i;return t = (e ? r < 1.5 ? 1 : r < 2.5 ? 2 : r < 4 ? 3 : r < 7 ? 5 : 10 : r < 1 ? 1 : r < 2 ? 2 : r < 3 ? 3 : r < 5 ? 5 : 10) * i, -20 <= n ? +t.toFixed(n < 0 ? -n : 0) : t;}function Bs(t) {return isNaN(t) ? \"-\" : (t = (t + \"\").split(\".\"))[0].replace(/(\\d{1,3})(?=(?:\\d{3})+(?!\\d))/g, \"$1,\") + (1 < t.length ? \".\" + t[1] : \"\");}var zs = H,Rs = /([&<>\"'])/g,Fs = { \"&\": \"&amp;\", \"<\": \"&lt;\", \">\": \"&gt;\", '\"': \"&quot;\", \"'\": \"&#39;\" };function Vs(t) {return null == t ? \"\" : (t + \"\").replace(Rs, function (t, e) {return Fs[e];});}function Ws(t, e) {return \"{\" + t + (null == e ? \"\" : e) + \"}\";}var Hs = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"];function Gs(t, e) {var n = (t = L(t) ? { color: t, extraCssText: e } : t || {}).color,i = t.type,r = (e = t.extraCssText, t.renderMode || \"html\"),a = t.markerId || \"X\";return n ? \"html\" === r ? \"subItem\" === i ? '<span style=\"display:inline-block;vertical-align:middle;margin-right:8px;margin-left:3px;border-radius:4px;width:4px;height:4px;background-color:' + Vs(n) + \";\" + (e || \"\") + '\"></span>' : '<span style=\"display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:' + Vs(n) + \";\" + (e || \"\") + '\"></span>' : { renderMode: r, content: \"{marker\" + a + \"|}  \", style: { color: n } } : \"\";}function Xs(t, e) {return \"0000\".substr(0, e - (t += \"\").length) + t;}function Us(t, e, n) {\"week\" !== t && \"month\" !== t && \"quarter\" !== t && \"half-year\" !== t && \"year\" !== t || (t = \"MM-dd\\nyyyy\");var i = Os(e),r = n ? \"UTC\" : \"\",a = i[\"get\" + r + \"FullYear\"](),o = i[\"get\" + r + \"Month\"]() + 1,s = i[\"get\" + r + \"Date\"](),l = i[\"get\" + r + \"Hours\"](),h = i[\"get\" + r + \"Minutes\"](),u = i[\"get\" + r + \"Seconds\"](),c = i[\"get\" + r + \"Milliseconds\"]();return t = t.replace(\"MM\", Xs(o, 2)).replace(\"M\", o).replace(\"yyyy\", a).replace(\"yy\", a % 100).replace(\"dd\", Xs(s, 2)).replace(\"d\", s).replace(\"hh\", Xs(l, 2)).replace(\"h\", l).replace(\"mm\", Xs(h, 2)).replace(\"m\", h).replace(\"ss\", Xs(u, 2)).replace(\"s\", u).replace(\"SSS\", Xs(c, 3));}var Ys = Bn,qs = D,js = [\"left\", \"right\", \"top\", \"bottom\", \"width\", \"height\"],Zs = [[\"width\", \"left\", \"right\"], [\"height\", \"top\", \"bottom\"]];function $s(u, c, d, f, p) {var g = 0,v = 0;null == f && (f = 1 / 0), null == p && (p = 1 / 0);var m = 0;c.eachChild(function (t, e) {var n,i,r = t.position,a = t.getBoundingRect(),o = c.childAt(e + 1),s = o && o.getBoundingRect();if (\"horizontal\" === u) {var l = a.width + (s ? -s.x + a.x : 0);m = f < (n = g + l) || t.newline ? (g = 0, n = l, v += m + d, a.height) : Math.max(m, a.height);} else {var h = a.height + (s ? -s.y + a.y : 0);m = p < (i = v + h) || t.newline ? (g += m + d, v = 0, i = h, a.width) : Math.max(m, a.width);}t.newline || (r[0] = g, r[1] = v, \"horizontal\" === u ? g = n + d : v = i + d);});}I($s, \"vertical\"), I($s, \"horizontal\");function Ks(l, h, t) {O(t) || (t = {});var u = t.ignoreSize;C(u) || (u = [u, u]);var e = i(Zs[0], 0),n = i(Zs[1], 1);function i(t, e) {var n = {},i = 0,r = {},a = 0;if (qs(t, function (t) {r[t] = l[t];}), qs(t, function (t) {c(h, t) && (n[t] = r[t] = h[t]), d(n, t) && i++, d(r, t) && a++;}), u[e]) return d(h, t[1]) ? r[t[2]] = null : d(h, t[2]) && (r[t[1]] = null), r;if (2 !== a && i) {if (2 <= i) return n;for (var o = 0; o < t.length; o++) {var s = t[o];if (!c(n, s) && c(l, s)) {n[s] = l[s];break;}}return n;}return r;}function c(t, e) {return t.hasOwnProperty(e);}function d(t, e) {return null != t[e] && \"auto\" !== t[e];}function r(t, e, n) {qs(t, function (t) {e[t] = n[t];});}r(Zs[0], l, e), r(Zs[1], l, n);}function Qs(t) {return function (e, n) {return n && e && qs(js, function (t) {n.hasOwnProperty(t) && (e[t] = n[t]);}), e;}({}, t);}var Js,tl,el,nl = ji(),il = xs.extend({ type: \"component\", id: \"\", name: \"\", mainType: \"\", subType: \"\", componentIndex: 0, defaultOption: null, ecModel: null, dependentModels: [], uid: null, layoutMode: null, $constructor: function $constructor(t, e, n, i) {xs.call(this, t, e, n, i), this.uid = Ms(\"ec_cpt_model\");}, init: function init(t, e, n, i) {this.mergeDefaultAndTheme(t, n);}, mergeDefaultAndTheme: function mergeDefaultAndTheme(t, e) {var n = this.layoutMode,i = n ? Qs(t) : {};f(t, e.getTheme().get(this.mainType)), f(t, this.getDefaultOption()), n && Ks(t, i, n);}, mergeOption: function mergeOption(t, e) {f(this.option, t, !0);var n = this.layoutMode;n && Ks(this.option, t, n);}, optionUpdated: function optionUpdated(t, e) {}, getDefaultOption: function getDefaultOption() {var t = nl(this);if (!t.defaultOption) {for (var e = [], n = this.constructor; n;) {var i = n.prototype.defaultOption;i && e.push(i), n = n.superClass;}for (var r = {}, a = e.length - 1; 0 <= a; a--) {r = f(r, e[a], !0);}t.defaultOption = r;}return t.defaultOption;}, getReferringComponents: function getReferringComponents(t) {return this.ecModel.queryComponents({ mainType: t, index: this.get(t + \"Index\", !0), id: this.get(t + \"Id\", !0) });} });function rl(t, e) {return t[e] || (t[e] = { predecessor: [], successor: [] }), t[e];}sr(il, { registerWhenExtend: !0 }), tl = {}, (Js = il).registerSubTypeDefaulter = function (t, e) {t = er(t), tl[t.main] = e;}, Js.determineSubType = function (t, e) {var n = e.type;if (!n) {var i = er(t).main;Js.hasSubTypes(t) && tl[i] && (n = tl[i](e));}return n;}, el = function el(t) {var e = [];D(il.getClassesByMainType(t), function (t) {e = e.concat(t.prototype.dependencies || []);}), e = A(e, function (t) {return er(t).main;}), \"dataset\" !== t && v(e, \"dataset\") <= 0 && e.unshift(\"dataset\");return e;}, il.topologicalTravel = function (t, e, n, i) {if (t.length) {var r = function (e) {var r = {},a = [];return D(e, function (n) {var i = rl(r, n),t = function (t, e) {var n = [];return D(t, function (t) {0 <= v(e, t) && n.push(t);}), n;}(i.originalDeps = el(n), e);i.entryCount = t.length, 0 === i.entryCount && a.push(n), D(t, function (t) {v(i.predecessor, t) < 0 && i.predecessor.push(t);var e = rl(r, t);v(e.successor, t) < 0 && e.successor.push(n);});}), { graph: r, noEntryList: a };}(e),a = r.graph,o = r.noEntryList,s = {};for (D(t, function (t) {s[t] = !0;}); o.length;) {var l = o.pop(),h = a[l],u = !!s[l];u && (n.call(i, l, h.originalDeps.slice()), delete s[l]), D(h.successor, u ? d : c);}D(s, function () {throw new Error(\"Circle dependency may exists\");});}function c(t) {a[t].entryCount--, 0 === a[t].entryCount && o.push(t);}function d(t) {s[t] = !0, c(t);}}, _(il, { getBoxLayoutParams: function getBoxLayoutParams() {return { left: this.get(\"left\"), top: this.get(\"top\"), right: this.get(\"right\"), bottom: this.get(\"bottom\"), width: this.get(\"width\"), height: this.get(\"height\") };} });var al = \"\";\"undefined\" != typeof navigator && (al = navigator.platform || \"\");var ol = { color: [\"#c23531\", \"#2f4554\", \"#61a0a8\", \"#d48265\", \"#91c7ae\", \"#749f83\", \"#ca8622\", \"#bda29a\", \"#6e7074\", \"#546570\", \"#c4ccd3\"], gradientColor: [\"#f6efa6\", \"#d88273\", \"#bf444c\"], textStyle: { fontFamily: al.match(/^Win/) ? \"Microsoft YaHei\" : \"sans-serif\", fontSize: 12, fontStyle: \"normal\", fontWeight: \"normal\" }, blendMode: null, animation: \"auto\", animationDuration: 1e3, animationDurationUpdate: 300, animationEasing: \"exponentialOut\", animationEasingUpdate: \"cubicOut\", animationThreshold: 2e3, progressiveThreshold: 3e3, progressive: 400, hoverLayerThreshold: 3e3, useUTC: !1 },sl = ji();var ll = { clearColorPalette: function clearColorPalette() {sl(this).colorIdx = 0, sl(this).colorNameMap = {};}, getColorFromPalette: function getColorFromPalette(t, e, n) {var i = sl(e = e || this),r = i.colorIdx || 0,a = i.colorNameMap = i.colorNameMap || {};if (a.hasOwnProperty(t)) return a[t];var o = Vi(this.get(\"color\", !0)),s = this.get(\"colorLayer\", !0),l = null != n && s ? function (t, e) {for (var n = t.length, i = 0; i < n; i++) {if (t[i].length > e) return t[i];}return t[n - 1];}(s, n) : o;if ((l = l || o) && l.length) {var h = l[r];return t && (a[t] = h), i.colorIdx = (r + 1) % l.length, h;}} };function hl(t) {var e = t.get(\"coordinateSystem\"),n = { coordSysName: e, coordSysDims: [], axisMap: Z(), categoryAxisMap: Z() },i = ul[e];if (i) return i(t, n, n.axisMap, n.categoryAxisMap), n;}var ul = { cartesian2d: function cartesian2d(t, e, n, i) {var r = t.getReferringComponents(\"xAxis\")[0],a = t.getReferringComponents(\"yAxis\")[0];e.coordSysDims = [\"x\", \"y\"], n.set(\"x\", r), n.set(\"y\", a), cl(r) && (i.set(\"x\", r), e.firstCategoryDimIndex = 0), cl(a) && (i.set(\"y\", a), e.firstCategoryDimIndex = 1);}, singleAxis: function singleAxis(t, e, n, i) {var r = t.getReferringComponents(\"singleAxis\")[0];e.coordSysDims = [\"single\"], n.set(\"single\", r), cl(r) && (i.set(\"single\", r), e.firstCategoryDimIndex = 0);}, polar: function polar(t, e, n, i) {var r = t.getReferringComponents(\"polar\")[0],a = r.findAxisModel(\"radiusAxis\"),o = r.findAxisModel(\"angleAxis\");e.coordSysDims = [\"radius\", \"angle\"], n.set(\"radius\", a), n.set(\"angle\", o), cl(a) && (i.set(\"radius\", a), e.firstCategoryDimIndex = 0), cl(o) && (i.set(\"angle\", o), e.firstCategoryDimIndex = 1);}, geo: function geo(t, e, n, i) {e.coordSysDims = [\"lng\", \"lat\"];}, parallel: function parallel(t, r, a, o) {var s = t.ecModel,e = s.getComponent(\"parallel\", t.get(\"parallelIndex\")),l = r.coordSysDims = e.dimensions.slice();D(e.parallelAxisIndex, function (t, e) {var n = s.getComponent(\"parallelAxis\", t),i = l[e];a.set(i, n), cl(n) && null == r.firstCategoryDimIndex && (o.set(i, n), r.firstCategoryDimIndex = e);});} };function cl(t) {return \"category\" === t.get(\"type\");}var dl = \"original\",fl = \"arrayRows\",pl = \"objectRows\",gl = \"keyedColumns\",vl = \"unknown\",ml = \"typedArray\",yl = \"column\",_l = \"row\";function xl(t) {this.fromDataset = t.fromDataset, this.data = t.data || (t.sourceFormat === gl ? {} : []), this.sourceFormat = t.sourceFormat || vl, this.seriesLayoutBy = t.seriesLayoutBy || yl, this.dimensionsDefine = t.dimensionsDefine, this.encodeDefine = t.encodeDefine && Z(t.encodeDefine), this.startIndex = t.startIndex || 0, this.dimensionsDetectCount = t.dimensionsDetectCount;}xl.seriesDataToSource = function (t) {return new xl({ data: t, sourceFormat: N(t) ? ml : dl, fromDataset: !1 });}, rr(xl);var wl = ji();function bl(t) {var e = t.option,n = e.data,i = N(n) ? ml : dl,r = !1,a = e.seriesLayoutBy,o = e.sourceHeader,s = e.dimensions,l = function (t) {var e = t.option;if (!e.data) return t.ecModel.getComponent(\"dataset\", e.datasetIndex || 0);}(t);if (l) {var h = l.option;n = h.source, i = wl(l).sourceFormat, r = !0, a = a || h.seriesLayoutBy, null == o && (o = h.sourceHeader), s = s || h.dimensions;}var u = function (t, e, n, i, r) {if (!t) return { dimensionsDefine: Sl(r) };var a, o, s, l;if (e === fl) \"auto\" === i || null == i ? Ml(function (t) {null != t && \"-\" !== t && (L(t) ? null == o && (o = 1) : o = 0);}, n, t, 10) : o = i ? 1 : 0, r || 1 !== o || (r = [], Ml(function (t, e) {r[e] = null != t ? t : \"\";}, n, t)), a = r ? r.length : n === _l ? t.length : t[0] ? t[0].length : null;else if (e === pl) r || (r = function (t) {var e,n = 0;for (; n < t.length && !(e = t[n++]);) {;}if (e) {var i = [];return D(e, function (t, e) {i.push(e);}), i;}}(t), s = !0);else if (e === gl) r || (r = [], s = !0, D(t, function (t, e) {r.push(e);}));else if (e === dl) {var h = Gi(t[0]);a = C(h) && h.length || 1;}s && D(r, function (t, e) {\"name\" === (O(t) ? t.name : t) && (l = e);});return { startIndex: o, dimensionsDefine: Sl(r), dimensionsDetectCount: a, potentialNameDimIndex: l };}(n, i, a, o, s),c = e.encode;!c && l && (c = function (t, e, n, i, r, a) {var o = hl(t),s = {},l = [],h = [],u = t.subType,c = Z([\"pie\", \"map\", \"funnel\"]),d = Z([\"line\", \"bar\", \"pictorialBar\", \"scatter\", \"effectScatter\", \"candlestick\", \"boxplot\"]);if (o && null != d.get(u)) {var f = t.ecModel,p = wl(f).datasetMap,g = e.uid + \"_\" + r,v = p.get(g) || p.set(g, { categoryWayDim: 1, valueWayDim: 0 });D(o.coordSysDims, function (t) {if (null == o.firstCategoryDimIndex) {var e = v.valueWayDim++;s[t] = e, h.push(e);} else if (o.categoryAxisMap.get(t)) s[t] = 0, l.push(0);else {e = v.categoryWayDim++;s[t] = e, h.push(e);}});} else if (null != c.get(u)) {for (var m, y = 0; y < 5 && null == m; y++) {Il(n, i, r, a.dimensionsDefine, a.startIndex, y) || (m = y);}if (null != m) {s.value = m;var _ = a.potentialNameDimIndex || Math.max(m - 1, 0);h.push(_), l.push(_);}}return l.length && (s.itemName = l), h.length && (s.seriesName = h), s;}(t, l, n, i, a, u)), wl(t).source = new xl({ data: n, fromDataset: r, seriesLayoutBy: a, sourceFormat: i, dimensionsDefine: u.dimensionsDefine, startIndex: u.startIndex, dimensionsDetectCount: u.dimensionsDetectCount, encodeDefine: c });}function Sl(t) {if (t) {var i = Z();return A(t, function (t, e) {if (null == (t = S({}, O(t) ? t : { name: t })).name) return t;t.name += \"\", null == t.displayName && (t.displayName = t.name);var n = i.get(t.name);return n ? t.name += \"-\" + n.count++ : i.set(t.name, { count: 1 }), t;});}}function Ml(t, e, n, i) {if (null == i && (i = 1 / 0), e === _l) for (var r = 0; r < n.length && r < i; r++) {t(n[r] ? n[r][0] : null, r);} else {var a = n[0] || [];for (r = 0; r < a.length && r < i; r++) {t(a[r], r);}}}function Il(t, e, n, i, r, a) {var o, s;if (N(t)) return !1;if (i && (s = O(s = i[a]) ? s.name : s), e === fl) {if (n === _l) {for (var l = t[a], h = 0; h < (l || []).length && h < 5; h++) {if (null != (o = f(l[r + h]))) return o;}} else for (h = 0; h < t.length && h < 5; h++) {var u = t[r + h];if (u && null != (o = f(u[a]))) return o;}} else if (e === pl) {if (!s) return;for (h = 0; h < t.length && h < 5; h++) {if ((c = t[h]) && null != (o = f(c[s]))) return o;}} else if (e === gl) {if (!s) return;if (!(l = t[s]) || N(l)) return !1;for (h = 0; h < l.length && h < 5; h++) {if (null != (o = f(l[h]))) return o;}} else if (e === dl) for (h = 0; h < t.length && h < 5; h++) {var c,d = Gi(c = t[h]);if (!C(d)) return !1;if (null != (o = f(d[a]))) return o;}function f(t) {return (null == t || !isFinite(t) || \"\" === t) && (!(!L(t) || \"-\" === t) || void 0);}return !1;}var Tl = \"\\0_ec_inner\",Cl = xs.extend({ init: function init(t, e, n, i) {n = n || {}, this.option = null, this._theme = new xs(n), this._optionManager = i;}, setOption: function setOption(t, e) {G(!(Tl in t), \"please use chart.getOption()\"), this._optionManager.setOption(t, e), this.resetOption(null);}, resetOption: function resetOption(t) {var e = !1,n = this._optionManager;if (!t || \"recreate\" === t) {var i = n.mountOption(\"recreate\" === t);this.option && \"recreate\" !== t ? (this.restoreData(), this.mergeOption(i)) : function (t) {t = t, this.option = {}, this.option[Tl] = 1, this._componentsMap = Z({ series: [] }), this._seriesIndices, this._seriesIndicesMap, function (n, t) {var i = n.color && !n.colorLayer;D(t, function (t, e) {\"colorLayer\" === e && i || il.hasClass(e) || (\"object\" == typeof t ? n[e] = n[e] ? f(n[e], t, !1) : b(t) : null == n[e] && (n[e] = t));});}(t, this._theme.option), f(t, ol, !1), this.mergeOption(t);}.call(this, i), e = !0;}if (\"timeline\" !== t && \"media\" !== t || this.restoreData(), !t || \"recreate\" === t || \"timeline\" === t) {var r = n.getTimelineOption(this);r && (this.mergeOption(r), e = !0);}if (!t || \"recreate\" === t || \"media\" === t) {var a = n.getMediaOption(this, this._api);a.length && D(a, function (t) {this.mergeOption(t, e = !0);}, this);}return e;}, mergeOption: function mergeOption(i) {var l = this.option,h = this._componentsMap,n = [];!function (t) {wl(t).datasetMap = Z();}(this), D(i, function (t, e) {null != t && (il.hasClass(e) ? e && n.push(e) : l[e] = null == l[e] ? b(t) : f(l[e], t, !0));}), il.topologicalTravel(n, il.getAllClassMainTypes(), function (o, t) {var e = Vi(i[o]),n = Xi(h.get(o), e);(function (t) {var o = Z();Bi(t, function (t, e) {var n = t.exist;n && o.set(n.id, t);}), Bi(t, function (t, e) {var n = t.option;G(!n || null == n.id || !o.get(n.id) || o.get(n.id) === t, \"id duplicates: \" + (n && n.id)), n && null != n.id && o.set(n.id, t), t.keyInfo || (t.keyInfo = {});}), Bi(t, function (t, e) {var n = t.exist,i = t.option,r = t.keyInfo;if (zi(i)) {if (r.name = null != i.name ? i.name + \"\" : n ? n.name : Fi + e, n) r.id = n.id;else if (null != i.id) r.id = i.id + \"\";else for (var a = 0; r.id = \"\\0\" + r.name + \"\\0\" + a++, o.get(r.id);) {;}o.set(r.id, t);}});})(n), D(n, function (t, e) {var n = t.option;O(n) && (t.keyInfo.mainType = o, t.keyInfo.subType = function (t, e, n) {return e.type ? e.type : n ? n.subType : il.determineSubType(t, e);}(o, n, t.exist));});var s = function (e, t) {C(t) || (t = t ? [t] : []);var n = {};return D(t, function (t) {n[t] = (e.get(t) || []).slice();}), n;}(h, t);l[o] = [], h.set(o, []), D(n, function (t, e) {var n = t.exist,i = t.option;if (G(O(i) || n, \"Empty component definition\"), i) {var r = il.getClass(o, t.keyInfo.subType, !0);if (n && n.constructor === r) n.name = t.keyInfo.name, n.mergeOption(i, this), n.optionUpdated(i, !1);else {var a = S({ dependentModels: s, componentIndex: e }, t.keyInfo);S(n = new r(i, this, this, a), a), n.init(i, this, this, a), n.optionUpdated(null, !0);}} else n.mergeOption({}, this), n.optionUpdated({}, !1);h.get(o)[e] = n, l[o][e] = n.option;}, this), \"series\" === o && kl(this, h.get(\"series\"));}, this), this._seriesIndicesMap = Z(this._seriesIndices = this._seriesIndices || []);}, getOption: function getOption() {var i = b(this.option);return D(i, function (t, e) {if (il.hasClass(e)) {for (var n = (t = Vi(t)).length - 1; 0 <= n; n--) {Yi(t[n]) && t.splice(n, 1);}i[e] = t;}}), delete i[Tl], i;}, getTheme: function getTheme() {return this._theme;}, getComponent: function getComponent(t, e) {var n = this._componentsMap.get(t);if (n) return n[e || 0];}, queryComponents: function queryComponents(t) {var e = t.mainType;if (!e) return [];var n,i = t.index,r = t.id,a = t.name,o = this._componentsMap.get(e);if (!o || !o.length) return [];if (null != i) C(i) || (i = [i]), n = x(A(i, function (t) {return o[t];}), function (t) {return !!t;});else if (null != r) {var s = C(r);n = x(o, function (t) {return s && 0 <= v(r, t.id) || !s && t.id === r;});} else if (null != a) {var l = C(a);n = x(o, function (t) {return l && 0 <= v(a, t.name) || !l && t.name === a;});} else n = o.slice();return Dl(n, t);}, findComponents: function findComponents(t) {var e,n,i,r,a,o = t.query,s = t.mainType,l = (n = s + \"Index\", i = s + \"Id\", r = s + \"Name\", !(e = o) || null == e[n] && null == e[i] && null == e[r] ? null : { mainType: s, index: e[n], id: e[i], name: e[r] }),h = l ? this.queryComponents(l) : this._componentsMap.get(s);return a = Dl(h, t), t.filter ? x(a, t.filter) : a;}, eachComponent: function eachComponent(t, i, r) {var e = this._componentsMap;if (\"function\" == typeof t) r = i, i = t, e.each(function (t, n) {D(t, function (t, e) {i.call(r, n, t, e);});});else if (L(t)) D(e.get(t), i, r);else if (O(t)) {D(this.findComponents(t), i, r);}}, getSeriesByName: function getSeriesByName(e) {return x(this._componentsMap.get(\"series\"), function (t) {return t.name === e;});}, getSeriesByIndex: function getSeriesByIndex(t) {return this._componentsMap.get(\"series\")[t];}, getSeriesByType: function getSeriesByType(e) {return x(this._componentsMap.get(\"series\"), function (t) {return t.subType === e;});}, getSeries: function getSeries() {return this._componentsMap.get(\"series\").slice();}, getSeriesCount: function getSeriesCount() {return this._componentsMap.get(\"series\").length;}, eachSeries: function eachSeries(n, i) {D(this._seriesIndices, function (t) {var e = this._componentsMap.get(\"series\")[t];n.call(i, e, t);}, this);}, eachRawSeries: function eachRawSeries(t, e) {D(this._componentsMap.get(\"series\"), t, e);}, eachSeriesByType: function eachSeriesByType(n, i, r) {D(this._seriesIndices, function (t) {var e = this._componentsMap.get(\"series\")[t];e.subType === n && i.call(r, e, t);}, this);}, eachRawSeriesByType: function eachRawSeriesByType(t, e, n) {return D(this.getSeriesByType(t), e, n);}, isSeriesFiltered: function isSeriesFiltered(t) {return null == this._seriesIndicesMap.get(t.componentIndex);}, getCurrentSeriesIndices: function getCurrentSeriesIndices() {return (this._seriesIndices || []).slice();}, filterSeries: function filterSeries(t, e) {var n = x(this._componentsMap.get(\"series\"), t, e);kl(this, n);}, restoreData: function restoreData(n) {var i = this._componentsMap;kl(this, i.get(\"series\"));var r = [];i.each(function (t, e) {r.push(e);}), il.topologicalTravel(r, il.getAllClassMainTypes(), function (e, t) {D(i.get(e), function (t) {\"series\" === e && function (t, e) {if (e) {var n = e.seiresIndex,i = e.seriesId,r = e.seriesName;return null != n && t.componentIndex !== n || null != i && t.id !== i || null != r && t.name !== r;}}(t, n) || t.restoreData();});});} });function kl(t, e) {t._seriesIndicesMap = Z(t._seriesIndices = A(e, function (t) {return t.componentIndex;}) || []);}function Dl(t, e) {return e.hasOwnProperty(\"subType\") ? x(t, function (t) {return t.subType === e.subType;}) : t;}_(Cl, ll);var Al = [\"getDom\", \"getZr\", \"getWidth\", \"getHeight\", \"getDevicePixelRatio\", \"dispatchAction\", \"isDisposed\", \"on\", \"off\", \"getDataURL\", \"getConnectedDataURL\", \"getModel\", \"getOption\", \"getViewOfComponentModel\", \"getViewOfSeriesModel\"];function Ll(e) {D(Al, function (t) {this[t] = w(e[t], e);}, this);}var Pl = {};function Ol() {this._coordinateSystems = [];}Ol.prototype = { constructor: Ol, create: function create(i, r) {var a = [];D(Pl, function (t, e) {var n = t.create(i, r);a = a.concat(n || []);}), this._coordinateSystems = a;}, update: function update(e, n) {D(this._coordinateSystems, function (t) {t.update && t.update(e, n);});}, getCoordinateSystems: function getCoordinateSystems() {return this._coordinateSystems.slice();} }, Ol.register = function (t, e) {Pl[t] = e;}, Ol.get = function (t) {return Pl[t];};var El = D,Nl = b,Bl = A,zl = f,Rl = /^(min|max)?(.+)$/;function Fl(t) {this._api = t, this._timelineOptions = [], this._mediaList = [], this._mediaDefault, this._currentMediaIndices = [], this._optionBackup, this._newBaseOption;}function Vl(t, e, n) {var a = { width: e, height: n, aspectratio: e / n },o = !0;return D(t, function (t, e) {var n = e.match(Rl);if (n && n[1] && n[2]) {var i = n[1],r = n[2].toLowerCase();!function (t, e, n) {return \"min\" === n ? e <= t : \"max\" === n ? t <= e : t === e;}(a[r], t, i) && (o = !1);}}), o;}Fl.prototype = { constructor: Fl, setOption: function setOption(t, e) {t && D(Vi(t.series), function (t) {t && t.data && N(t.data) && Y(t.data);}), t = Nl(t);var n = this._optionBackup,i = function (t, n, i) {var e,r,a = [],o = [],s = t.timeline;t.baseOption && (r = t.baseOption);(s || t.options) && (r = r || {}, a = (t.options || []).slice());if (t.media) {r = r || {};var l = t.media;El(l, function (t) {t && t.option && (t.query ? o.push(t) : e = e || t);});}r = r || t;r.timeline || (r.timeline = s);return El([r].concat(a).concat(A(o, function (t) {return t.option;})), function (e) {El(n, function (t) {t(e, i);});}), { baseOption: r, timelineOptions: a, mediaDefault: e, mediaList: o };}.call(this, t, e, !n);this._newBaseOption = i.baseOption, n ? (function (r, t) {El(t = t || {}, function (t, e) {if (null != t) {var n = r[e];if (il.hasClass(e)) {t = Vi(t);var i = Xi(n = Vi(n), t);r[e] = Bl(i, function (t) {return t.option && t.exist ? zl(t.exist, t.option, !0) : t.exist || t.option;});} else r[e] = zl(n, t, !0);}});}(n.baseOption, i.baseOption), i.timelineOptions.length && (n.timelineOptions = i.timelineOptions), i.mediaList.length && (n.mediaList = i.mediaList), i.mediaDefault && (n.mediaDefault = i.mediaDefault)) : this._optionBackup = i;}, mountOption: function mountOption(t) {var e = this._optionBackup;return this._timelineOptions = Bl(e.timelineOptions, Nl), this._mediaList = Bl(e.mediaList, Nl), this._mediaDefault = Nl(e.mediaDefault), this._currentMediaIndices = [], Nl(t ? e.baseOption : this._newBaseOption);}, getTimelineOption: function getTimelineOption(t) {var e,n = this._timelineOptions;if (n.length) {var i = t.getComponent(\"timeline\");i && (e = Nl(n[i.getCurrentIndex()], !0));}return e;}, getMediaOption: function getMediaOption(t) {var e = this._api.getWidth(),n = this._api.getHeight(),i = this._mediaList,r = this._mediaDefault,a = [],o = [];if (!i.length && !r) return o;for (var s = 0, l = i.length; s < l; s++) {Vl(i[s].query, e, n) && a.push(s);}return !a.length && r && (a = [-1]), a.length && !function (t, e) {return t.join(\",\") === e.join(\",\");}(a, this._currentMediaIndices) && (o = Bl(a, function (t) {return Nl(-1 === t ? r.option : i[t].option);})), this._currentMediaIndices = a, o;} };var Wl = D,Hl = O,Gl = [\"areaStyle\", \"lineStyle\", \"nodeStyle\", \"linkStyle\", \"chordStyle\", \"label\", \"labelLine\"];function Xl(t) {var e = t && t.itemStyle;if (e) for (var n = 0, i = Gl.length; n < i; n++) {var r = Gl[n],a = e.normal,o = e.emphasis;a && a[r] && (t[r] = t[r] || {}, t[r].normal ? f(t[r].normal, a[r]) : t[r].normal = a[r], a[r] = null), o && o[r] && (t[r] = t[r] || {}, t[r].emphasis ? f(t[r].emphasis, o[r]) : t[r].emphasis = o[r], o[r] = null);}}function Ul(t, e, n) {if (t && t[e] && (t[e].normal || t[e].emphasis)) {var i = t[e].normal,r = t[e].emphasis;i && (n ? (t[e].normal = t[e].emphasis = null, k(t[e], i)) : t[e] = i), r && (t.emphasis = t.emphasis || {}, t.emphasis[e] = r);}}function Yl(t) {Ul(t, \"itemStyle\"), Ul(t, \"lineStyle\"), Ul(t, \"areaStyle\"), Ul(t, \"label\"), Ul(t, \"labelLine\"), Ul(t, \"upperLabel\"), Ul(t, \"edgeLabel\");}function ql(t, e) {var n = Hl(t) && t[e],i = Hl(n) && n.textStyle;if (i) for (var r = 0, a = Hi.length; r < a; r++) {e = Hi[r];i.hasOwnProperty(e) && (n[e] = i[e]);}}function jl(t) {t && (Yl(t), ql(t, \"label\"), t.emphasis && ql(t.emphasis, \"label\"));}function Zl(t) {return C(t) ? t : t ? [t] : [];}function $l(t) {return (C(t) ? t[0] : t) || {};}function Kl(e, t) {Wl(Zl(e.series), function (t) {Hl(t) && function (t) {if (Hl(t)) {Xl(t), Yl(t), ql(t, \"label\"), ql(t, \"upperLabel\"), ql(t, \"edgeLabel\"), t.emphasis && (ql(t.emphasis, \"label\"), ql(t.emphasis, \"upperLabel\"), ql(t.emphasis, \"edgeLabel\")), (n = t.markPoint) && (Xl(n), jl(n)), (i = t.markLine) && (Xl(i), jl(i));var e = t.markArea;e && jl(e);var n,i,r = t.data;if (\"graph\" === t.type) {r = r || t.nodes;var a = t.links || t.edges;if (a && !N(a)) for (var o = 0; o < a.length; o++) {jl(a[o]);}D(t.categories, function (t) {Yl(t);});}if (r && !N(r)) for (o = 0; o < r.length; o++) {jl(r[o]);}if ((n = t.markPoint) && n.data) {var s = n.data;for (o = 0; o < s.length; o++) {jl(s[o]);}}if ((i = t.markLine) && i.data) {var l = i.data;for (o = 0; o < l.length; o++) {C(l[o]) ? (jl(l[o][0]), jl(l[o][1])) : jl(l[o]);}}\"gauge\" === t.type ? (ql(t, \"axisLabel\"), ql(t, \"title\"), ql(t, \"detail\")) : \"treemap\" === t.type ? (Ul(t.breadcrumb, \"itemStyle\"), D(t.levels, function (t) {Yl(t);})) : \"tree\" === t.type && Yl(t.leaves);}}(t);});var n = [\"xAxis\", \"yAxis\", \"radiusAxis\", \"angleAxis\", \"singleAxis\", \"parallelAxis\", \"radar\"];t && n.push(\"valueAxis\", \"categoryAxis\", \"logAxis\", \"timeAxis\"), Wl(n, function (t) {Wl(Zl(e[t]), function (t) {t && (ql(t, \"axisLabel\"), ql(t.axisPointer, \"label\"));});}), Wl(Zl(e.parallel), function (t) {var e = t && t.parallelAxisDefault;ql(e, \"axisLabel\"), ql(e && e.axisPointer, \"label\");}), Wl(Zl(e.calendar), function (t) {Ul(t, \"itemStyle\"), ql(t, \"dayLabel\"), ql(t, \"monthLabel\"), ql(t, \"yearLabel\");}), Wl(Zl(e.radar), function (t) {ql(t, \"name\");}), Wl(Zl(e.geo), function (t) {Hl(t) && (jl(t), Wl(Zl(t.regions), function (t) {jl(t);}));}), Wl(Zl(e.timeline), function (t) {jl(t), Ul(t, \"label\"), Ul(t, \"itemStyle\"), Ul(t, \"controlStyle\", !0);var e = t.data;C(e) && D(e, function (t) {O(t) && (Ul(t, \"label\"), Ul(t, \"itemStyle\"));});}), Wl(Zl(e.toolbox), function (t) {Ul(t, \"iconStyle\"), Wl(t.feature, function (t) {Ul(t, \"iconStyle\");});}), ql($l(e.axisPointer), \"label\"), ql($l(e.tooltip).axisPointer, \"label\");}function Ql(e) {D(Jl, function (t) {t[0] in e && !(t[1] in e) && (e[t[1]] = e[t[0]]);});}var Jl = [[\"x\", \"left\"], [\"y\", \"top\"], [\"x2\", \"right\"], [\"y2\", \"bottom\"]],th = [\"grid\", \"geo\", \"parallel\", \"legend\", \"toolbox\", \"title\", \"visualMap\", \"dataZoom\", \"timeline\"],eh = function eh(n, t) {Kl(n, t), n.series = Vi(n.series), D(n.series, function (t) {if (O(t)) {var e = t.type;if (\"line\" === e) null != t.clipOverflow && (t.clip = t.clipOverflow);else if (\"pie\" === e || \"gauge\" === e) null != t.clockWise && (t.clockwise = t.clockWise);else if (\"gauge\" === e) {var n = function (t, e) {e = e.split(\",\");for (var n = t, i = 0; i < e.length && null != (n = n && n[e[i]]); i++) {;}return n;}(t, \"pointer.color\");null != n && function (t, e, n, i) {e = e.split(\",\");for (var r, a = t, o = 0; o < e.length - 1; o++) {null == a[r = e[o]] && (a[r] = {}), a = a[r];}!i && null != a[e[o]] || (a[e[o]] = n);}(t, \"itemStyle.color\", n);}Ql(t);}}), n.dataRange && (n.visualMap = n.dataRange), D(th, function (t) {var e = n[t];e && (C(e) || (e = [e]), D(e, function (t) {Ql(t);}));});};function nh(v) {D(v, function (u, c) {var d = [],f = [NaN, NaN],t = [u.stackResultDimension, u.stackedOverDimension],p = u.data,g = u.isStackedByIndex,e = p.map(t, function (t, e, n) {var i,r,a = p.get(u.stackedDimension, n);if (isNaN(a)) return f;g ? r = p.getRawIndex(n) : i = p.get(u.stackedByDimension, n);for (var o = NaN, s = c - 1; 0 <= s; s--) {var l = v[s];if (g || (r = l.data.rawIndexOf(l.stackedByDimension, i)), 0 <= r) {var h = l.data.getByRawIndex(l.stackResultDimension, r);if (0 <= a && 0 < h || a <= 0 && h < 0) {a += h, o = h;break;}}}return d[0] = a, d[1] = o, d;});p.hostModel.setData(e), u.data = e;});}function ih(t, e) {xl.isInstance(t) || (t = xl.seriesDataToSource(t)), this._source = t;var n = this._data = t.data,i = t.sourceFormat;i === ml && (this._offset = 0, this._dimSize = e, this._data = n), S(this, ah[i === fl ? i + \"_\" + t.seriesLayoutBy : i]);}var rh = ih.prototype;rh.pure = !1;var ah = { arrayRows_column: { pure: rh.persistent = !0, count: function count() {return Math.max(0, this._data.length - this._source.startIndex);}, getItem: function getItem(t) {return this._data[t + this._source.startIndex];}, appendData: lh }, arrayRows_row: { pure: !0, count: function count() {var t = this._data[0];return t ? Math.max(0, t.length - this._source.startIndex) : 0;}, getItem: function getItem(t) {t += this._source.startIndex;for (var e = [], n = this._data, i = 0; i < n.length; i++) {var r = n[i];e.push(r ? r[t] : null);}return e;}, appendData: function appendData() {throw new Error('Do not support appendData when set seriesLayoutBy: \"row\".');} }, objectRows: { pure: !0, count: oh, getItem: sh, appendData: lh }, keyedColumns: { pure: !0, count: function count() {var t = this._source.dimensionsDefine[0].name,e = this._data[t];return e ? e.length : 0;}, getItem: function getItem(t) {for (var e = [], n = this._source.dimensionsDefine, i = 0; i < n.length; i++) {var r = this._data[n[i].name];e.push(r ? r[t] : null);}return e;}, appendData: function appendData(t) {var r = this._data;D(t, function (t, e) {for (var n = r[e] || (r[e] = []), i = 0; i < (t || []).length; i++) {n.push(t[i]);}});} }, original: { count: oh, getItem: sh, appendData: lh }, typedArray: { persistent: !(rh.getSource = function () {return this._source;}), pure: !0, count: function count() {return this._data ? this._data.length / this._dimSize : 0;}, getItem: function getItem(t, e) {t -= this._offset, e = e || [];for (var n = this._dimSize * t, i = 0; i < this._dimSize; i++) {e[i] = this._data[n + i];}return e;}, appendData: function appendData(t) {this._data = t;}, clean: function clean() {this._offset += this.count(), this._data = null;} } };function oh() {return this._data.length;}function sh(t) {return this._data[t];}function lh(t) {for (var e = 0; e < t.length; e++) {this._data.push(t[e]);}}var hh = { arrayRows: uh, objectRows: function objectRows(t, e, n, i) {return null != n ? t[i] : t;}, keyedColumns: uh, original: function original(t, e, n, i) {var r = Gi(t);return null != n && r instanceof Array ? r[n] : r;}, typedArray: uh };function uh(t, e, n, i) {return null != n ? t[n] : t;}var ch = { arrayRows: dh, objectRows: function objectRows(t, e, n, i) {return fh(t[e], this._dimensionInfos[e]);}, keyedColumns: dh, original: function original(t, e, n, i) {var r = t && (null == t.value ? t : t.value);return !this._rawData.pure && function (t) {return zi(t) && !(t instanceof Array);}(t) && (this.hasItemOption = !0), fh(r instanceof Array ? r[i] : r, this._dimensionInfos[e]);}, typedArray: function typedArray(t, e, n, i) {return t[i];} };function dh(t, e, n, i) {return fh(t[i], this._dimensionInfos[e]);}function fh(t, e) {var n = e && e.type;if (\"ordinal\" !== n) return \"time\" === n && \"number\" != typeof t && null != t && \"-\" !== t && (t = +Os(t)), null == t || \"\" === t ? NaN : +t;var i = e && e.ordinalMeta;return i ? i.parseAndCollect(t) : t;}function ph(t, e, n) {if (t) {var i = t.getRawDataItem(e);if (null != i) {var r,a,o = t.getProvider().getSource().sourceFormat,s = t.getDimensionInfo(n);return s && (r = s.name, a = s.index), hh[o](i, e, a, r);}}}function gh(t, e, n) {if (t) {var i = t.getProvider().getSource().sourceFormat;if (i === dl || i === pl) {var r = t.getRawDataItem(e);return i !== dl || O(r) || (r = null), r ? r[n] : void 0;}}}var vh = /\\{@(.+?)\\}/g,mh = { getDataParams: function getDataParams(t, e) {var n = this.getData(e),i = this.getRawValue(t, e),r = n.getRawIndex(t),a = n.getName(t),o = n.getRawDataItem(t),s = n.getItemVisual(t, \"color\"),l = n.getItemVisual(t, \"borderColor\"),h = this.ecModel.getComponent(\"tooltip\"),u = function (t) {return \"auto\" === t ? m.domSupported ? \"html\" : \"richText\" : t || \"html\";}(h && h.get(\"renderMode\")),c = this.mainType,d = \"series\" === c,f = n.userOutput;return { componentType: c, componentSubType: this.subType, componentIndex: this.componentIndex, seriesType: d ? this.subType : null, seriesIndex: this.seriesIndex, seriesId: d ? this.id : null, seriesName: d ? this.name : null, name: a, dataIndex: r, data: o, dataType: e, value: i, color: s, borderColor: l, dimensionNames: f ? f.dimensionNames : null, encode: f ? f.encode : null, marker: Gs({ color: s, renderMode: u }), $vars: [\"seriesName\", \"name\", \"value\"] };}, getFormattedLabel: function getFormattedLabel(i, t, e, n, r) {t = t || \"normal\";var a = this.getData(e),o = a.getItemModel(i),s = this.getDataParams(i, e);null != n && s.value instanceof Array && (s.value = s.value[n]);var l = o.get(\"normal\" === t ? [r || \"label\", \"formatter\"] : [t, r || \"label\", \"formatter\"]);return \"function\" == typeof l ? (s.status = t, s.dimensionIndex = n, l(s)) : \"string\" == typeof l ? function (t, e, n) {C(e) || (e = [e]);var i = e.length;if (!i) return \"\";for (var r = e[0].$vars || [], a = 0; a < r.length; a++) {var o = Hs[a];t = t.replace(Ws(o), Ws(o, 0));}for (var s = 0; s < i; s++) {for (var l = 0; l < r.length; l++) {var h = e[s][r[l]];t = t.replace(Ws(Hs[l], s), n ? Vs(h) : h);}}return t;}(l, s).replace(vh, function (t, e) {var n = e.length;return \"[\" === e.charAt(0) && \"]\" === e.charAt(n - 1) && (e = +e.slice(1, n - 1)), ph(a, i, e);}) : void 0;}, getRawValue: function getRawValue(t, e) {return ph(this.getData(e), t);}, formatTooltip: function formatTooltip() {} };function yh(t) {return new _h(t);}function _h(t) {t = t || {}, this._reset = t.reset, this._plan = t.plan, this._count = t.count, this._onDirty = t.onDirty, this._dirty = !0, this.context;}var xh = _h.prototype;xh.perform = function (t) {var e,n = this._upstream,i = t && t.skip;if (this._dirty && n) {var r = this.context;r.data = r.outputData = n.context.outputData;}this.__pipeline && (this.__pipeline.currentTask = this), this._plan && !i && (e = this._plan(this.context));var a,o = u(this._modBy),s = this._modDataCount || 0,l = u(t && t.modBy),h = t && t.modDataCount || 0;function u(t) {return 1 <= t || (t = 1), t;}o === l && s === h || (e = \"reset\"), !this._dirty && \"reset\" !== e || (this._dirty = !1, a = function (t, e) {var n, i;t._dueIndex = t._outputDueEnd = t._dueEnd = 0, t._settedOutputEnd = null, !e && t._reset && ((n = t._reset(t.context)) && n.progress && (i = n.forceFirstProgress, n = n.progress), C(n) && !n.length && (n = null));t._progress = n, t._modBy = t._modDataCount = null;var r = t._downstream;return r && r.dirty(), i;}(this, i)), this._modBy = l, this._modDataCount = h;var c = t && t.step;if (this._dueEnd = n ? n._outputDueEnd : this._count ? this._count(this.context) : 1 / 0, this._progress) {var d = this._dueIndex,f = Math.min(null != c ? this._dueIndex + c : 1 / 0, this._dueEnd);if (!i && (a || d < f)) {var p = this._progress;if (C(p)) for (var g = 0; g < p.length; g++) {Ah(this, p[g], d, f, l, h);} else Ah(this, p, d, f, l, h);}this._dueIndex = f;var v = null != this._settedOutputEnd ? this._settedOutputEnd : f;this._outputDueEnd = v;} else this._dueIndex = this._outputDueEnd = null != this._settedOutputEnd ? this._settedOutputEnd : this._dueEnd;return this.unfinished();};var wh,bh,Sh,Mh,Ih,Th,Ch = Th = { reset: function reset(t, e, n, i) {bh = t, wh = e, Sh = n, Mh = i, Ih = Math.ceil(Mh / Sh), Th.next = 1 < Sh && 0 < Mh ? Dh : kh;} };function kh() {return bh < wh ? bh++ : null;}function Dh() {var t = bh % Ih * Sh + Math.ceil(bh / Ih),e = wh <= bh ? null : t < Mh ? t : bh;return bh++, e;}function Ah(t, e, n, i, r, a) {Ch.reset(n, i, r, a), t._callingProgress = e, t._callingProgress({ start: n, end: i, count: i - n, next: Ch.next }, t.context);}xh.dirty = function () {this._dirty = !0, this._onDirty && this._onDirty(this.context);}, xh.unfinished = function () {return this._progress && this._dueIndex < this._dueEnd;}, xh.pipe = function (t) {this._downstream === t && !this._dirty || ((this._downstream = t)._upstream = this, t.dirty());}, xh.dispose = function () {this._disposed || (this._upstream && (this._upstream._downstream = null), this._downstream && (this._downstream._upstream = null), this._dirty = !1, this._disposed = !0);}, xh.getUpstream = function () {return this._upstream;}, xh.getDownstream = function () {return this._downstream;}, xh.setOutputEnd = function (t) {this._outputDueEnd = this._settedOutputEnd = t;};var Lh = ji(),Ph = il.extend({ type: \"series.__base__\", seriesIndex: 0, coordinateSystem: null, defaultOption: null, legendDataProvider: null, visualColorAccessPath: \"itemStyle.color\", visualBorderColorAccessPath: \"itemStyle.borderColor\", layoutMode: null, init: function init(t, e, n, i) {this.seriesIndex = this.componentIndex, this.dataTask = yh({ count: Eh, reset: Nh }), this.dataTask.context = { model: this }, this.mergeDefaultAndTheme(t, n), bl(this);var r = this.getInitialData(t, n);zh(r, this), this.dataTask.context.data = r, Lh(this).dataBeforeProcessed = r, Oh(this);}, mergeDefaultAndTheme: function mergeDefaultAndTheme(t, e) {var n = this.layoutMode,i = n ? Qs(t) : {},r = this.subType;il.hasClass(r) && (r += \"Series\"), f(t, e.getTheme().get(this.subType)), f(t, this.getDefaultOption()), Wi(t, \"label\", [\"show\"]), this.fillDataTextStyle(t.data), n && Ks(t, i, n);}, mergeOption: function mergeOption(t, e) {t = f(this.option, t, !0), this.fillDataTextStyle(t.data);var n = this.layoutMode;n && Ks(this.option, t, n), bl(this);var i = this.getInitialData(t, e);zh(i, this), this.dataTask.dirty(), this.dataTask.context.data = i, Lh(this).dataBeforeProcessed = i, Oh(this);}, fillDataTextStyle: function fillDataTextStyle(t) {if (t && !N(t)) for (var e = [\"show\"], n = 0; n < t.length; n++) {t[n] && t[n].label && Wi(t[n], \"label\", e);}}, getInitialData: function getInitialData() {}, appendData: function appendData(t) {this.getRawData().appendData(t.data);}, getData: function getData(t) {var e = Fh(this);if (e) {var n = e.context.data;return null == t ? n : n.getLinkedData(t);}return Lh(this).data;}, setData: function setData(t) {var e = Fh(this);if (e) {var n = e.context;n.data !== t && e.modifyOutputEnd && e.setOutputEnd(t.count()), n.outputData = t, e !== this.dataTask && (n.data = t);}Lh(this).data = t;}, getSource: function getSource() {return function (t) {return wl(t).source;}(this);}, getRawData: function getRawData() {return Lh(this).dataBeforeProcessed;}, getBaseAxis: function getBaseAxis() {var t = this.coordinateSystem;return t && t.getBaseAxis && t.getBaseAxis();}, formatTooltip: function formatTooltip(r, u, t, c) {var d = this,e = \"html\" === (c = c || \"html\") ? \"<br/>\" : \"\\n\",f = \"richText\" === c,p = {},g = 0;function n(t) {return { renderMode: c, content: Vs(Bs(t)), style: p };}var v = this.getData(),a = v.mapDimension(\"defaultedTooltip\", !0),i = a.length,o = this.getRawValue(r),s = C(o),m = v.getItemVisual(r, \"color\");O(m) && m.colorStops && (m = (m.colorStops[0] || {}).color), m = m || \"transparent\";var l = (1 < i || s && !i ? function (t) {var l = M(t, function (t, e, n) {var i = v.getDimensionInfo(n);return t | (i && !1 !== i.tooltip && null != i.displayName);}, 0),h = [];function e(t, e) {var n = v.getDimensionInfo(e);if (n && !1 !== n.otherDims.tooltip) {var i = n.type,r = \"sub\" + d.seriesIndex + \"at\" + g,a = Gs({ color: m, type: \"subItem\", renderMode: c, markerId: r }),o = \"string\" == typeof a ? a : a.content,s = (l ? o + Vs(n.displayName || \"-\") + \": \" : \"\") + Vs(\"ordinal\" === i ? t + \"\" : \"time\" === i ? u ? \"\" : Us(\"yyyy/MM/dd hh:mm:ss\", t) : Bs(t));s && h.push(s), f && (p[r] = m, ++g);}}a.length ? D(a, function (t) {e(ph(v, r, t), t);}) : D(t, e);var n = l ? f ? \"\\n\" : \"<br/>\" : \"\",i = n + h.join(n || \", \");return { renderMode: c, content: i, style: p };}(o) : n(i ? ph(v, r, a[0]) : s ? o[0] : o)).content,h = d.seriesIndex + \"at\" + g,y = Gs({ color: m, type: \"item\", renderMode: c, markerId: h });p[h] = m, ++g;var _ = v.getName(r),x = this.name;Ui(this) || (x = \"\"), x = x ? Vs(x) + (u ? \": \" : e) : \"\";var w = \"string\" == typeof y ? y : y.content;return { html: u ? w + x + l : x + w + (_ ? Vs(_) + \": \" + l : l), markers: p };}, isAnimationEnabled: function isAnimationEnabled() {if (m.node) return !1;var t = this.getShallow(\"animation\");return t && this.getData().count() > this.getShallow(\"animationThreshold\") && (t = !1), t;}, restoreData: function restoreData() {this.dataTask.dirty();}, getColorFromPalette: function getColorFromPalette(t, e, n) {var i = this.ecModel,r = ll.getColorFromPalette.call(this, t, e, n);return r = r || i.getColorFromPalette(t, e, n);}, coordDimToDataDim: function coordDimToDataDim(t) {return this.getRawData().mapDimension(t, !0);}, getProgressive: function getProgressive() {return this.get(\"progressive\");}, getProgressiveThreshold: function getProgressiveThreshold() {return this.get(\"progressiveThreshold\");}, getAxisTooltipData: null, getTooltipPosition: null, pipeTask: null, preventIncremental: null, pipelineContext: null });function Oh(t) {var e = t.name;Ui(t) || (t.name = function (t) {var n = t.getRawData(),e = n.mapDimension(\"seriesName\", !0),i = [];return D(e, function (t) {var e = n.getDimensionInfo(t);e.displayName && i.push(e.displayName);}), i.join(\" \");}(t) || e);}function Eh(t) {return t.model.getRawData().count();}function Nh(t) {var e = t.model;return e.setData(e.getRawData().cloneShallow()), Bh;}function Bh(t, e) {t.end > e.outputData.count() && e.model.getRawData().cloneShallow(e.outputData);}function zh(e, n) {D(e.CHANGABLE_METHODS, function (t) {e.wrapMethod(t, I(Rh, n));});}function Rh(t) {var e = Fh(t);e && e.setOutputEnd(this.count());}function Fh(t) {var e = (t.ecModel || {}).scheduler,n = e && e.getPipeline(t.uid);if (n) {var i = n.currentTask;if (i) {var r = i.agentStubMap;r && (i = r.get(t.uid));}return i;}}_(Ph, mh), _(Ph, ll);var Vh = function Vh() {this.group = new Ye(), this.uid = Ms(\"viewComponent\");};Vh.prototype = { constructor: Vh, init: function init(t, e) {}, render: function render(t, e, n, i) {}, dispose: function dispose() {}, filterForExposedEvent: null };var Wh = Vh.prototype;Wh.updateView = Wh.updateLayout = Wh.updateVisual = function (t, e, n, i) {}, nr(Vh), sr(Vh, { registerWhenExtend: !0 });function Hh() {var s = ji();return function (t) {var e = s(t),n = t.pipelineContext,i = e.large,r = e.progressiveRender,a = e.large = n.large,o = e.progressiveRender = n.progressiveRender;return !!(i ^ a || r ^ o) && \"reset\";};}var Gh = ji(),Xh = Hh();function Uh() {this.group = new Ye(), this.uid = Ms(\"viewChart\"), this.renderTask = yh({ plan: Zh, reset: $h }), this.renderTask.context = { view: this };}var Yh = Uh.prototype = { type: \"chart\", init: function init(t, e) {}, render: function render(t, e, n, i) {}, highlight: function highlight(t, e, n, i) {jh(t.getData(), i, \"emphasis\");}, downplay: function downplay(t, e, n, i) {jh(t.getData(), i, \"normal\");}, remove: function remove(t, e) {this.group.removeAll();}, dispose: function dispose() {}, incrementalPrepareRender: null, incrementalRender: null, updateTransform: null, filterForExposedEvent: null };function qh(t, e, n) {if (t && (t.trigger(e, n), t.isGroup && !$o(t))) for (var i = 0, r = t.childCount(); i < r; i++) {qh(t.childAt(i), e, n);}}function jh(e, t, n) {var i = qi(e, t),r = t && null != t.highlightKey ? Ko(t.highlightKey) : null;null != i ? D(Vi(i), function (t) {qh(e.getItemGraphicEl(t), n, r);}) : e.eachItemGraphicEl(function (t) {qh(t, n, r);});}function Zh(t) {return Xh(t.model);}function $h(t) {var e = t.model,n = t.ecModel,i = t.api,r = t.payload,a = e.pipelineContext.progressiveRender,o = t.view,s = r && Gh(r).updateMethod,l = a ? \"incrementalPrepareRender\" : s && o[s] ? s : \"render\";return \"render\" !== l && o[l](e, n, i, r), Kh[l];}Yh.updateView = Yh.updateLayout = Yh.updateVisual = function (t, e, n, i) {this.render(t, e, n, i);}, nr(Uh), sr(Uh, { registerWhenExtend: !0 }), Uh.markUpdateMethod = function (t, e) {Gh(t).updateMethod = e;};var Kh = { incrementalPrepareRender: { progress: function progress(t, e) {e.view.incrementalRender(t, e.model, e.ecModel, e.api, e.payload);} }, render: { forceFirstProgress: !0, progress: function progress(t, e) {e.view.render(e.model, e.ecModel, e.api, e.payload);} } };function Qh(t, n, i) {var r,a,o,s,l,h = 0,u = 0,c = null;function d() {u = new Date().getTime(), c = null, t.apply(o, s || []);}n = n || 0;function e() {r = new Date().getTime(), o = this, s = arguments;var t = l || n,e = l || i;l = null, a = r - (e ? h : u) - t, clearTimeout(c), e ? c = setTimeout(d, t) : 0 <= a ? d() : c = setTimeout(d, -a), h = r;}return e.clear = function () {c && (clearTimeout(c), c = null);}, e.debounceNextCall = function (t) {l = t;}, e;}var Jh = { createOnAllSeries: !0, performRawSeries: !0, reset: function reset(e, t) {var n = e.getData(),a = (e.visualColorAccessPath || \"itemStyle.color\").split(\".\"),i = e.get(a) || e.getColorFromPalette(e.name, null, t.getSeriesCount());n.setVisual(\"color\", i);var o = (e.visualBorderColorAccessPath || \"itemStyle.borderColor\").split(\".\"),r = e.get(o);if (n.setVisual(\"borderColor\", r), !t.isSeriesFiltered(e)) {\"function\" != typeof i || i instanceof lo || n.each(function (t) {n.setItemVisual(t, \"color\", i(e.getDataParams(t)));});return { dataEach: n.hasItemOption ? function (t, e) {var n = t.getItemModel(e),i = n.get(a, !0),r = n.get(o, !0);null != i && t.setItemVisual(e, \"color\", i), null != r && t.setItemVisual(e, \"borderColor\", r);} : null };}} },tu = { legend: { selector: { all: \"全选\", inverse: \"反选\" } }, toolbox: { brush: { title: { rect: \"矩形选择\", polygon: \"圈选\", lineX: \"横向选择\", lineY: \"纵向选择\", keep: \"保持选择\", clear: \"清除选择\" } }, dataView: { title: \"数据视图\", lang: [\"数据视图\", \"关闭\", \"刷新\"] }, dataZoom: { title: { zoom: \"区域缩放\", back: \"区域缩放还原\" } }, magicType: { title: { line: \"切换为折线图\", bar: \"切换为柱状图\", stack: \"切换为堆叠\", tiled: \"切换为平铺\" } }, restore: { title: \"还原\" }, saveAsImage: { title: \"保存为图片\", lang: [\"右键另存为图片\"] } }, series: { typeNames: { pie: \"饼图\", bar: \"柱状图\", line: \"折线图\", scatter: \"散点图\", effectScatter: \"涟漪散点图\", radar: \"雷达图\", tree: \"树图\", treemap: \"矩形树图\", boxplot: \"箱型图\", candlestick: \"K线图\", k: \"K线图\", heatmap: \"热力图\", map: \"地图\", parallel: \"平行坐标图\", lines: \"线图\", graph: \"关系图\", sankey: \"桑基图\", funnel: \"漏斗图\", gauge: \"仪表盘图\", pictorialBar: \"象形柱图\", themeRiver: \"主题河流图\", sunburst: \"旭日图\" } }, aria: { general: { withTitle: \"这是一个关于“{title}”的图表。\", withoutTitle: \"这是一个图表，\" }, series: { single: { prefix: \"\", withName: \"图表类型是{seriesType}，表示{seriesName}。\", withoutName: \"图表类型是{seriesType}。\" }, multiple: { prefix: \"它由{seriesCount}个图表系列组成。\", withName: \"第{seriesId}个系列是一个表示{seriesName}的{seriesType}，\", withoutName: \"第{seriesId}个系列是一个{seriesType}，\", separator: { middle: \"；\", end: \"。\" } } }, data: { allData: \"其数据是——\", partialData: \"其中，前{displayCnt}项是——\", withName: \"{name}的数据是{value}\", withoutName: \"{value}\", separator: { middle: \"，\", end: \"\" } } } },eu = function eu(t, e) {var a = e.getModel(\"aria\");if (a.get(\"show\")) if (a.get(\"description\")) t.setAttribute(\"aria-label\", a.get(\"description\"));else {var u = 0;e.eachSeries(function (t, e) {++u;}, this);var n,c = a.get(\"data.maxCount\") || 10,i = a.get(\"series.maxCount\") || 10,d = Math.min(u, i);if (!(u < 1)) {var r = function () {var t = e.getModel(\"title\").option;t && t.length && (t = t[0]);return t && t.text;}();n = r ? p(g(\"general.withTitle\"), { title: r }) : g(\"general.withoutTitle\");var f = [];n += p(g(1 < u ? \"series.multiple.prefix\" : \"series.single.prefix\"), { seriesCount: u }), e.eachSeries(function (t, e) {if (e < d) {var n,i = t.get(\"name\"),r = \"series.\" + (1 < u ? \"multiple\" : \"single\") + \".\";n = p(n = g(i ? r + \"withName\" : r + \"withoutName\"), { seriesId: t.seriesIndex, seriesName: t.get(\"name\"), seriesType: function (t) {return tu.series.typeNames[t] || \"自定义图\";}(t.subType) });var a = t.getData();(window.data = a).count() > c ? n += p(g(\"data.partialData\"), { displayCnt: c }) : n += g(\"data.allData\");for (var o = [], s = 0; s < a.count(); s++) {if (s < c) {var l = a.getName(s),h = ph(a, s);o.push(p(g(l ? \"data.withName\" : \"data.withoutName\"), { name: l, value: h }));}}n += o.join(g(\"data.separator.middle\")) + g(\"data.separator.end\"), f.push(n);}}), n += f.join(g(\"series.multiple.separator.middle\")) + g(\"series.multiple.separator.end\"), t.setAttribute(\"aria-label\", n);}}function p(t, e) {if (\"string\" != typeof t) return t;var n = t;return D(e, function (t, e) {n = n.replace(new RegExp(\"\\\\{\\\\s*\" + e + \"\\\\s*\\\\}\", \"g\"), t);}), n;}function g(t) {var e = a.get(t);if (null != e) return e;for (var n = t.split(\".\"), i = tu.aria, r = 0; r < n.length; ++r) {i = i[n[r]];}return i;}},nu = Math.PI;function iu(t, e, n, i) {this.ecInstance = t, this.api = e, this.unfinished;n = this._dataProcessorHandlers = n.slice(), i = this._visualHandlers = i.slice();this._allHandlers = n.concat(i), this._stageTaskMap = Z();}var ru = iu.prototype;function au(l, t, h, u, c) {var d;function f(t, e) {return t.setDirty && (!t.dirtyMap || t.dirtyMap.get(e.__pipeline.id));}c = c || {}, D(t, function (i, t) {if (!c.visualType || c.visualType === i.visualType) {var e = l._stageTaskMap.get(i.uid),n = e.seriesTaskMap,r = e.overallTask;if (r) {var a,o = r.agentStubMap;o.each(function (t) {f(c, t) && (t.dirty(), a = !0);}), a && r.dirty(), ou(r, u);var s = l.getPerformArgs(r, c.block);o.each(function (t) {t.perform(s);}), d |= r.perform(s);} else n && n.each(function (t, e) {f(c, t) && t.dirty();var n = l.getPerformArgs(t, c.block);n.skip = !i.performRawSeries && h.isSeriesFiltered(t.context.model), ou(t, u), d |= t.perform(n);});}}), l.unfinished |= d;}ru.restoreData = function (t, e) {t.restoreData(e), this._stageTaskMap.each(function (t) {var e = t.overallTask;e && e.dirty();});}, ru.getPerformArgs = function (t, e) {if (t.__pipeline) {var n = this._pipelineMap.get(t.__pipeline.id),i = n.context,r = !e && n.progressiveEnabled && (!i || i.progressiveRender) && t.__idxInPipeline > n.blockIndex ? n.step : null,a = i && i.modDataCount;return { step: r, modBy: null != a ? Math.ceil(a / r) : null, modDataCount: a };}}, ru.getPipeline = function (t) {return this._pipelineMap.get(t);}, ru.updateStreamModes = function (t, e) {var n = this._pipelineMap.get(t.uid),i = t.getData().count(),r = n.progressiveEnabled && e.incrementalPrepareRender && i >= n.threshold,a = t.get(\"large\") && i >= t.get(\"largeThreshold\"),o = \"mod\" === t.get(\"progressiveChunkMode\") ? i : null;t.pipelineContext = n.context = { progressiveRender: r, modDataCount: o, large: a };}, ru.restorePipelines = function (t) {var i = this,r = i._pipelineMap = Z();t.eachSeries(function (t) {var e = t.getProgressive(),n = t.uid;r.set(n, { id: n, head: null, tail: null, threshold: t.getProgressiveThreshold(), progressiveEnabled: e && !(t.preventIncremental && t.preventIncremental()), blockIndex: -1, step: Math.round(e || 700), count: 0 }), vu(i, t, t.dataTask);});}, ru.prepareStageTasks = function () {var n = this._stageTaskMap,i = this.ecInstance.getModel(),r = this.api;D(this._allHandlers, function (t) {var e = n.get(t.uid) || n.set(t.uid, []);t.reset && function (i, r, t, a, o) {var s = t.seriesTaskMap || (t.seriesTaskMap = Z()),e = r.seriesType,n = r.getTargetSeries;r.createOnAllSeries ? a.eachRawSeries(l) : e ? a.eachRawSeriesByType(e, l) : n && n(a, o).each(l);function l(t) {var e = t.uid,n = s.get(e) || s.set(e, yh({ plan: cu, reset: du, count: gu }));n.context = { model: t, ecModel: a, api: o, useClearVisual: r.isVisual && !r.isLayout, plan: r.plan, reset: r.reset, scheduler: i }, vu(i, t, n);}var h = i._pipelineMap;s.each(function (t, e) {h.get(e) || (t.dispose(), s.removeKey(e));});}(this, t, e, i, r), t.overallReset && function (i, t, e, n, r) {var a = e.overallTask = e.overallTask || yh({ reset: su });a.context = { ecModel: n, api: r, overallReset: t.overallReset, scheduler: i };var o = a.agentStubMap = a.agentStubMap || Z(),s = t.seriesType,l = t.getTargetSeries,h = !0,u = t.modifyOutputEnd;s ? n.eachRawSeriesByType(s, c) : l ? l(n, r).each(c) : (h = !1, D(n.getSeries(), c));function c(t) {var e = t.uid,n = o.get(e);n || (n = o.set(e, yh({ reset: lu, onDirty: uu })), a.dirty()), n.context = { model: t, overallProgress: h, modifyOutputEnd: u }, n.agent = a, n.__block = h, vu(i, t, n);}var d = i._pipelineMap;o.each(function (t, e) {d.get(e) || (t.dispose(), a.dirty(), o.removeKey(e));});}(this, t, e, i, r);}, this);}, ru.prepareView = function (t, e, n, i) {var r = t.renderTask,a = r.context;a.model = e, a.ecModel = n, a.api = i, r.__block = !t.incrementalPrepareRender, vu(this, e, r);}, ru.performDataProcessorTasks = function (t, e) {au(this, this._dataProcessorHandlers, t, e, { block: !0 });}, ru.performVisualTasks = function (t, e, n) {au(this, this._visualHandlers, t, e, n);}, ru.performSeriesTasks = function (t) {var e;t.eachSeries(function (t) {e |= t.dataTask.perform();}), this.unfinished |= e;}, ru.plan = function () {this._pipelineMap.each(function (t) {var e = t.tail;do {if (e.__block) {t.blockIndex = e.__idxInPipeline;break;}e = e.getUpstream();} while (e);});};var ou = ru.updatePayload = function (t, e) {\"remain\" !== e && (t.context.payload = e);};function su(t) {t.overallReset(t.ecModel, t.api, t.payload);}function lu(t, e) {return t.overallProgress && hu;}function hu() {this.agent.dirty(), this.getDownstream().dirty();}function uu() {this.agent && this.agent.dirty();}function cu(t) {return t.plan && t.plan(t.model, t.ecModel, t.api, t.payload);}function du(t) {t.useClearVisual && t.data.clearAllVisual();var e = t.resetDefines = Vi(t.reset(t.model, t.ecModel, t.api, t.payload));return 1 < e.length ? A(e, function (t, e) {return pu(e);}) : fu;}var fu = pu(0);function pu(a) {return function (t, e) {var n = e.data,i = e.resetDefines[a];if (i && i.dataEach) for (var r = t.start; r < t.end; r++) {i.dataEach(n, r);} else i && i.progress && i.progress(t, n);};}function gu(t) {return t.data.count();}function vu(t, e, n) {var i = e.uid,r = t._pipelineMap.get(i);r.head || (r.head = n), r.tail && r.tail.pipe(n), (r.tail = n).__idxInPipeline = r.count++, n.__pipeline = r;}iu.wrapStageHandler = function (t, e) {return T(t) && (t = { overallReset: t, seriesType: function (t) {mu = null;try {t(yu, _u);} catch (t) {}return mu;}(t) }), t.uid = Ms(\"stageHandler\"), e && (t.visualType = e), t;};var mu,yu = {},_u = {};function xu(t, e) {for (var n in e.prototype) {t[n] = $;}}xu(yu, Cl), xu(_u, Ll), yu.eachSeriesByType = yu.eachRawSeriesByType = function (t) {mu = t;}, yu.eachComponent = function (t) {\"series\" === t.mainType && t.subType && (mu = t.subType);};function wu() {return { axisLine: { lineStyle: { color: Mu } }, axisTick: { lineStyle: { color: Mu } }, axisLabel: { textStyle: { color: Mu } }, splitLine: { lineStyle: { type: \"dashed\", color: \"#aaa\" } }, splitArea: { areaStyle: { color: Mu } } };}var bu = [\"#37A2DA\", \"#32C5E9\", \"#67E0E3\", \"#9FE6B8\", \"#FFDB5C\", \"#ff9f7f\", \"#fb7293\", \"#E062AE\", \"#E690D1\", \"#e7bcf3\", \"#9d96f5\", \"#8378EA\", \"#96BFFF\"],Su = { color: bu, colorLayer: [[\"#37A2DA\", \"#ffd85c\", \"#fd7b5f\"], [\"#37A2DA\", \"#67E0E3\", \"#FFDB5C\", \"#ff9f7f\", \"#E062AE\", \"#9d96f5\"], [\"#37A2DA\", \"#32C5E9\", \"#9FE6B8\", \"#FFDB5C\", \"#ff9f7f\", \"#fb7293\", \"#e7bcf3\", \"#8378EA\", \"#96BFFF\"], bu] },Mu = \"#eee\",Iu = [\"#dd6b66\", \"#759aa0\", \"#e69d87\", \"#8dc1a9\", \"#ea7e53\", \"#eedd78\", \"#73a373\", \"#73b9bc\", \"#7289ab\", \"#91ca8c\", \"#f49f42\"],Tu = { color: Iu, backgroundColor: \"#333\", tooltip: { axisPointer: { lineStyle: { color: Mu }, crossStyle: { color: Mu } } }, legend: { textStyle: { color: Mu } }, textStyle: { color: Mu }, title: { textStyle: { color: Mu } }, toolbox: { iconStyle: { normal: { borderColor: Mu } } }, dataZoom: { textStyle: { color: Mu } }, visualMap: { textStyle: { color: Mu } }, timeline: { lineStyle: { color: Mu }, itemStyle: { normal: { color: Iu[1] } }, label: { normal: { textStyle: { color: Mu } } }, controlStyle: { normal: { color: Mu, borderColor: Mu } } }, timeAxis: wu(), logAxis: wu(), valueAxis: wu(), categoryAxis: wu(), line: { symbol: \"circle\" }, graph: { color: Iu }, gauge: { title: { textStyle: { color: Mu } } }, candlestick: { itemStyle: { normal: { color: \"#FD1050\", color0: \"#0CF49B\", borderColor: \"#FD1050\", borderColor0: \"#0CF49B\" } } } };Tu.categoryAxis.splitLine.show = !1, il.extend({ type: \"dataset\", defaultOption: { seriesLayoutBy: yl, sourceHeader: null, dimensions: null, source: null }, optionUpdated: function optionUpdated() {!function (t) {var e = t.option.source,n = vl;if (N(e)) n = ml;else if (C(e)) {0 === e.length && (n = fl);for (var i = 0, r = e.length; i < r; i++) {var a = e[i];if (null != a) {if (C(a)) {n = fl;break;}if (O(a)) {n = pl;break;}}}} else if (O(e)) {for (var o in e) {if (e.hasOwnProperty(o) && P(e[o])) {n = gl;break;}}} else if (null != e) throw new Error(\"Invalid data\");wl(t).sourceFormat = n;}(this);} }), Vh.extend({ type: \"dataset\" });var Cu = Ma.extend({ type: \"ellipse\", shape: { cx: 0, cy: 0, rx: 0, ry: 0 }, buildPath: function buildPath(t, e) {var n = e.cx,i = e.cy,r = e.rx,a = e.ry,o = .5522848 * r,s = .5522848 * a;t.moveTo(n - r, i), t.bezierCurveTo(n - r, i - s, n - o, i - a, n, i - a), t.bezierCurveTo(n + o, i - a, n + r, i - s, n + r, i), t.bezierCurveTo(n + r, i + s, n + o, i + a, n, i + a), t.bezierCurveTo(n - o, i + a, n - r, i + s, n - r, i), t.closePath();} }),ku = /[\\s,]+/;function Du(t) {L(t) && (t = new DOMParser().parseFromString(t, \"text/xml\"));for (9 === t.nodeType && (t = t.firstChild); \"svg\" !== t.nodeName.toLowerCase() || 1 !== t.nodeType;) {t = t.nextSibling;}return t;}var Au = { g: function g(t, e) {var n = new Ye();return Pu(e, n), Nu(t, n, this._defs), n;}, rect: function rect(t, e) {var n = new io();return Pu(e, n), Nu(t, n, this._defs), n.setShape({ x: parseFloat(t.getAttribute(\"x\") || 0), y: parseFloat(t.getAttribute(\"y\") || 0), width: parseFloat(t.getAttribute(\"width\") || 0), height: parseFloat(t.getAttribute(\"height\") || 0) }), n;}, circle: function circle(t, e) {var n = new Xa();return Pu(e, n), Nu(t, n, this._defs), n.setShape({ cx: parseFloat(t.getAttribute(\"cx\") || 0), cy: parseFloat(t.getAttribute(\"cy\") || 0), r: parseFloat(t.getAttribute(\"r\") || 0) }), n;}, line: function line(t, e) {var n = new ao();return Pu(e, n), Nu(t, n, this._defs), n.setShape({ x1: parseFloat(t.getAttribute(\"x1\") || 0), y1: parseFloat(t.getAttribute(\"y1\") || 0), x2: parseFloat(t.getAttribute(\"x2\") || 0), y2: parseFloat(t.getAttribute(\"y2\") || 0) }), n;}, ellipse: function ellipse(t, e) {var n = new Cu();return Pu(e, n), Nu(t, n, this._defs), n.setShape({ cx: parseFloat(t.getAttribute(\"cx\") || 0), cy: parseFloat(t.getAttribute(\"cy\") || 0), rx: parseFloat(t.getAttribute(\"rx\") || 0), ry: parseFloat(t.getAttribute(\"ry\") || 0) }), n;}, polygon: function polygon(t, e) {var n = t.getAttribute(\"points\");n = n && Ou(n);var i = new $a({ shape: { points: n || [] } });return Pu(e, i), Nu(t, i, this._defs), i;}, polyline: function polyline(t, e) {var n = new Ma();Pu(e, n), Nu(t, n, this._defs);var i = t.getAttribute(\"points\");return i = i && Ou(i), new Ka({ shape: { points: i || [] } });}, image: function image(t, e) {var n = new gi();return Pu(e, n), Nu(t, n, this._defs), n.setStyle({ image: t.getAttribute(\"xlink:href\"), x: t.getAttribute(\"x\"), y: t.getAttribute(\"y\"), width: t.getAttribute(\"width\"), height: t.getAttribute(\"height\") }), n;}, text: function text(t, e) {var n = t.getAttribute(\"x\") || 0,i = t.getAttribute(\"y\") || 0,r = t.getAttribute(\"dx\") || 0,a = t.getAttribute(\"dy\") || 0;this._textX = parseFloat(n) + parseFloat(r), this._textY = parseFloat(i) + parseFloat(a);var o = new Ye();return Pu(e, o), Nu(t, o, this._defs), o;}, tspan: function tspan(t, e) {var n = t.getAttribute(\"x\"),i = t.getAttribute(\"y\");null != n && (this._textX = parseFloat(n)), null != i && (this._textY = parseFloat(i));var r = t.getAttribute(\"dx\") || 0,a = t.getAttribute(\"dy\") || 0,o = new Ye();return Pu(e, o), Nu(t, o, this._defs), this._textX += r, this._textY += a, o;}, path: function path(t, e) {var n = Wa(t.getAttribute(\"d\") || \"\");return Pu(e, n), Nu(t, n, this._defs), n;} },Lu = { lineargradient: function lineargradient(t) {var e = parseInt(t.getAttribute(\"x1\") || 0, 10),n = parseInt(t.getAttribute(\"y1\") || 0, 10),i = parseInt(t.getAttribute(\"x2\") || 10, 10),r = parseInt(t.getAttribute(\"y2\") || 0, 10),a = new fo(e, n, i, r);return function (t, e) {var n = t.firstChild;for (; n;) {if (1 === n.nodeType) {var i = n.getAttribute(\"offset\");i = 0 < i.indexOf(\"%\") ? parseInt(i, 10) / 100 : i ? parseFloat(i) : 0;var r = n.getAttribute(\"stop-color\") || \"#000000\";e.addColorStop(i, r);}n = n.nextSibling;}}(t, a), a;}, radialgradient: function radialgradient(t) {} };function Pu(t, e) {t && t.__inheritedStyle && (e.__inheritedStyle || (e.__inheritedStyle = {}), k(e.__inheritedStyle, t.__inheritedStyle));}function Ou(t) {for (var e = X(t).split(ku), n = [], i = 0; i < e.length; i += 2) {var r = parseFloat(e[i]),a = parseFloat(e[i + 1]);n.push([r, a]);}return n;}var Eu = { fill: \"fill\", stroke: \"stroke\", \"stroke-width\": \"lineWidth\", opacity: \"opacity\", \"fill-opacity\": \"fillOpacity\", \"stroke-opacity\": \"strokeOpacity\", \"stroke-dasharray\": \"lineDash\", \"stroke-dashoffset\": \"lineDashOffset\", \"stroke-linecap\": \"lineCap\", \"stroke-linejoin\": \"lineJoin\", \"stroke-miterlimit\": \"miterLimit\", \"font-family\": \"fontFamily\", \"font-size\": \"fontSize\", \"font-style\": \"fontStyle\", \"font-weight\": \"fontWeight\", \"text-align\": \"textAlign\", \"alignment-baseline\": \"textBaseline\" };function Nu(t, e, n, i) {var r = e.__inheritedStyle || {},a = \"text\" === e.type;if (1 === t.nodeType && (function (t, e) {var n = t.getAttribute(\"transform\");if (n) {n = n.replace(/,/g, \" \");var i = null,r = [];n.replace(Ru, function (t, e, n) {r.push(e, n);});for (var a = r.length - 1; 0 < a; a -= 2) {var o = r[a],s = r[a - 1];switch (i = i || Nt(), s) {case \"translate\":o = X(o).split(ku), Rt(i, i, [parseFloat(o[0]), parseFloat(o[1] || 0)]);break;case \"scale\":o = X(o).split(ku), Vt(i, i, [parseFloat(o[0]), parseFloat(o[1] || o[0])]);break;case \"rotate\":o = X(o).split(ku), Ft(i, i, parseFloat(o[0]));break;case \"skew\":o = X(o).split(ku), __f__(\"warn\", \"Skew transform is not supported yet\", \" at components\\\\echarts\\\\echarts.simple.min.js:22\");break;case \"matrix\":o = X(o).split(ku);i[0] = parseFloat(o[0]), i[1] = parseFloat(o[1]), i[2] = parseFloat(o[2]), i[3] = parseFloat(o[3]), i[4] = parseFloat(o[4]), i[5] = parseFloat(o[5]);}}e.setLocalTransform(i);}}(t, e), S(r, function (t) {var e = t.getAttribute(\"style\"),n = {};if (!e) return n;var i,r = {};Fu.lastIndex = 0;for (; null != (i = Fu.exec(e));) {r[i[1]] = i[2];}for (var a in Eu) {Eu.hasOwnProperty(a) && null != r[a] && (n[Eu[a]] = r[a]);}return n;}(t)), !i)) for (var o in Eu) {if (Eu.hasOwnProperty(o)) {var s = t.getAttribute(o);null != s && (r[Eu[o]] = s);}}var l = a ? \"textFill\" : \"fill\",h = a ? \"textStroke\" : \"stroke\";e.style = e.style || new hn();var u = e.style;null != r.fill && u.set(l, zu(r.fill, n)), null != r.stroke && u.set(h, zu(r.stroke, n)), D([\"lineWidth\", \"opacity\", \"fillOpacity\", \"strokeOpacity\", \"miterLimit\", \"fontSize\"], function (t) {var e = \"lineWidth\" === t && a ? \"textStrokeWidth\" : t;null != r[t] && u.set(e, parseFloat(r[t]));}), r.textBaseline && \"auto\" !== r.textBaseline || (r.textBaseline = \"alphabetic\"), \"alphabetic\" === r.textBaseline && (r.textBaseline = \"bottom\"), \"start\" === r.textAlign && (r.textAlign = \"left\"), \"end\" === r.textAlign && (r.textAlign = \"right\"), D([\"lineDashOffset\", \"lineCap\", \"lineJoin\", \"fontWeight\", \"fontFamily\", \"fontStyle\", \"textAlign\", \"textBaseline\"], function (t) {null != r[t] && u.set(t, r[t]);}), r.lineDash && (e.style.lineDash = X(r.lineDash).split(ku)), u[h] && \"none\" !== u[h] && (e[h] = !0), e.__inheritedStyle = r;}var Bu = /url\\(\\s*#(.*?)\\)/;function zu(t, e) {var n = e && t && t.match(Bu);return n ? e[X(n[1])] : t;}var Ru = /(translate|scale|rotate|skewX|skewY|matrix)\\(([\\-\\s0-9\\.e,]*)\\)/g;var Fu = /([^\\s:;]+)\\s*:\\s*([^:;]+)/g;var Vu = Z(),Wu = function Wu(t, e, n) {var i;return D(i = C(e) ? e : e.svg ? [{ type: \"svg\", source: e.svg, specialAreas: e.specialAreas }] : (e.geoJson && !e.features && (n = e.specialAreas, e = e.geoJson), [{ type: \"geoJSON\", source: e, specialAreas: n }]), function (t) {var e = t.type;\"geoJson\" === e && (e = t.type = \"geoJSON\"), (0, Gu[e])(t);}), Vu.set(t, i);},Hu = function Hu(t) {return Vu.get(t);},Gu = { geoJSON: function geoJSON(t) {var e = t.source;t.geoJSON = L(e) ? \"undefined\" != typeof JSON && JSON.parse ? JSON.parse(e) : new Function(\"return (\" + e + \");\")() : e;}, svg: function svg(t) {t.svgXML = Du(t.source);} },Xu = G,Uu = D,Yu = T,qu = O,ju = il.parseClassType,Zu = { PROCESSOR: { FILTER: 1e3, SERIES_FILTER: 800, STATISTIC: 5e3 }, VISUAL: { LAYOUT: 1e3, PROGRESSIVE_LAYOUT: 1100, GLOBAL: 2e3, CHART: 3e3, POST_CHART_LAYOUT: 3500, COMPONENT: 4e3, BRUSH: 5e3 } },$u = \"__flagInMainProcess\",Ku = \"__optionUpdated\",Qu = /^[a-zA-Z0-9_]+$/;function Ju(i, r) {return function (t, e, n) {!r && this._disposed || (t = t && t.toLowerCase(), ft.prototype[i].call(this, t, e, n));};}function tc() {ft.call(this);}function ec(t, e, n) {n = n || {}, \"string\" == typeof e && (e = Ic[e]), this.id, this.group, this._dom = t;var i = this._zr = Ei(t, { renderer: n.renderer || \"canvas\", devicePixelRatio: n.devicePixelRatio, width: n.width, height: n.height });this._throttledZrFlush = Qh(w(i.flush, i), 17), (e = b(e)) && eh(e, !0), this._theme = e, this._chartsViews = [], this._chartsMap = {}, this._componentsViews = [], this._componentsMap = {}, this._coordSysMgr = new Ol();var r = this._api = function (n) {var t = n._coordSysMgr;return S(new Ll(n), { getCoordinateSystems: w(t.getCoordinateSystems, t), getComponentByElement: function getComponentByElement(t) {for (; t;) {var e = t.__ecComponentInfo;if (null != e) return n._model.getComponent(e.mainType, e.index);t = t.parent;}} });}(this);function a(t, e) {return t.__prio - e.__prio;}tn(Mc, a), tn(wc, a), this._scheduler = new iu(this, r, wc, Mc), ft.call(this, this._ecEventProcessor = new yc()), this._messageCenter = new tc(), this._initEvents(), this.resize = w(this.resize, this), this._pendingActions = [], i.animation.on(\"frame\", this._onframe, this), function (t, e) {t.on(\"rendered\", function () {e.trigger(\"rendered\"), !t.animation.isFinished() || e[Ku] || e._scheduler.unfinished || e._pendingActions.length || e.trigger(\"finished\");});}(i, this), Y(this);}tc.prototype.on = Ju(\"on\", !0), tc.prototype.off = Ju(\"off\", !0), tc.prototype.one = Ju(\"one\", !0), _(tc, ft);var nc = ec.prototype;function ic(t, e, n) {if (!this._disposed) {var i,r = this._model,a = this._coordSysMgr.getCoordinateSystems();e = $i(r, e);for (var o = 0; o < a.length; o++) {var s = a[o];if (s[t] && null != (i = s[t](r, e, n))) return i;}}}nc._onframe = function () {if (!this._disposed) {var t = this._scheduler;if (this[Ku]) {var e = this[Ku].silent;this[$u] = !0, ac(this), rc.update.call(this), this[$u] = !1, this[Ku] = !1, hc.call(this, e), uc.call(this, e);} else if (t.unfinished) {var n = 1,i = this._model,r = this._api;t.unfinished = !1;do {var a = +new Date();t.performSeriesTasks(i), t.performDataProcessorTasks(i), sc(this, i), t.performVisualTasks(i), pc(this, this._model, r, \"remain\"), n -= +new Date() - a;} while (0 < n && t.unfinished);t.unfinished || this._zr.flush();}}}, nc.getDom = function () {return this._dom;}, nc.getZr = function () {return this._zr;}, nc.setOption = function (t, e, n) {if (!this._disposed) {var i;if (qu(e) && (n = e.lazyUpdate, i = e.silent, e = e.notMerge), this[$u] = !0, !this._model || e) {var r = new Fl(this._api),a = this._theme,o = this._model = new Cl();o.scheduler = this._scheduler, o.init(null, null, a, r);}this._model.setOption(t, bc), n ? (this[Ku] = { silent: i }, this[$u] = !1) : (ac(this), rc.update.call(this), this._zr.flush(), this[Ku] = !1, this[$u] = !1, hc.call(this, i), uc.call(this, i));}}, nc.setTheme = function () {__f__(\"error\", \"ECharts#setTheme() is DEPRECATED in ECharts 3.0\", \" at components\\\\echarts\\\\echarts.simple.min.js:22\");}, nc.getModel = function () {return this._model;}, nc.getOption = function () {return this._model && this._model.getOption();}, nc.getWidth = function () {return this._zr.getWidth();}, nc.getHeight = function () {return this._zr.getHeight();}, nc.getDevicePixelRatio = function () {return this._zr.painter.dpr || window.devicePixelRatio || 1;}, nc.getRenderedCanvas = function (t) {if (m.canvasSupported) return (t = t || {}).pixelRatio = t.pixelRatio || 1, t.backgroundColor = t.backgroundColor || this._model.get(\"backgroundColor\"), this._zr.painter.getRenderedCanvas(t);}, nc.getSvgDataUrl = function () {if (m.svgSupported) {var t = this._zr;return D(t.storage.getDisplayList(), function (t) {t.stopAnimation(!0);}), t.painter.pathToDataUrl();}}, nc.getDataURL = function (t) {if (!this._disposed) {var e = (t = t || {}).excludeComponents,n = this._model,i = [],r = this;Uu(e, function (t) {n.eachComponent({ mainType: t }, function (t) {var e = r._componentsMap[t.__viewId];e.group.ignore || (i.push(e), e.group.ignore = !0);});});var a = \"svg\" === this._zr.painter.getType() ? this.getSvgDataUrl() : this.getRenderedCanvas(t).toDataURL(\"image/\" + (t && t.type || \"png\"));return Uu(i, function (t) {t.group.ignore = !1;}), a;}}, nc.getConnectedDataURL = function (r) {if (!this._disposed && m.canvasSupported) {var a = this.group,o = Math.min,s = Math.max;if (kc[a]) {var l = 1 / 0,h = 1 / 0,u = -1 / 0,c = -1 / 0,d = [],n = r && r.pixelRatio || 1;D(Cc, function (t, e) {if (t.group === a) {var n = t.getRenderedCanvas(b(r)),i = t.getDom().getBoundingClientRect();l = o(i.left, l), h = o(i.top, h), u = s(i.right, u), c = s(i.bottom, c), d.push({ dom: n, left: i.left, top: i.top });}});var t = (u *= n) - (l *= n),e = (c *= n) - (h *= n),i = p();i.width = t, i.height = e;var f = Ei(i);return r.connectedBackgroundColor && f.add(new io({ shape: { x: 0, y: 0, width: t, height: e }, style: { fill: r.connectedBackgroundColor } })), Uu(d, function (t) {var e = new gi({ style: { x: t.left * n - l, y: t.top * n - h, image: t.dom } });f.add(e);}), f.refreshImmediately(), i.toDataURL(\"image/\" + (r && r.type || \"png\"));}return this.getDataURL(r);}}, nc.convertToPixel = I(ic, \"convertToPixel\"), nc.convertFromPixel = I(ic, \"convertFromPixel\"), nc.containPixel = function (t, r) {var a;if (!this._disposed) return D(t = $i(this._model, t), function (t, i) {0 <= i.indexOf(\"Models\") && D(t, function (t) {var e = t.coordinateSystem;if (e && e.containPoint) a |= !!e.containPoint(r);else if (\"seriesModels\" === i) {var n = this._chartsMap[t.__viewId];n && n.containPoint && (a |= n.containPoint(r, t));}}, this);}, this), !!a;}, nc.getVisual = function (t, e) {var n = (t = $i(this._model, t, { defaultMainType: \"series\" })).seriesModel.getData(),i = t.hasOwnProperty(\"dataIndexInside\") ? t.dataIndexInside : t.hasOwnProperty(\"dataIndex\") ? n.indexOfRawIndex(t.dataIndex) : null;return null != i ? n.getItemVisual(i, e) : n.getVisual(e);}, nc.getViewOfComponentModel = function (t) {return this._componentsMap[t.__viewId];}, nc.getViewOfSeriesModel = function (t) {return this._chartsMap[t.__viewId];};var rc = { prepareAndUpdate: function prepareAndUpdate(t) {ac(this), rc.update.call(this, t);}, update: function update(t) {var e = this._model,n = this._api,i = this._zr,r = this._coordSysMgr,a = this._scheduler;if (e) {a.restoreData(e, t), a.performSeriesTasks(e), r.create(e, n), a.performDataProcessorTasks(e, t), sc(this, e), r.update(e, n), dc(e), a.performVisualTasks(e, t), fc(this, e, n, t);var o = e.get(\"backgroundColor\") || \"transparent\";if (m.canvasSupported) i.setBackgroundColor(o);else {var s = fe(o);o = ge(s, \"rgb\"), 0 === s[3] && (o = \"transparent\");}gc(e, n);}}, updateTransform: function updateTransform(r) {var a = this._model,o = this,s = this._api;if (a) {var l = [];a.eachComponent(function (t, e) {var n = o.getViewOfComponentModel(e);if (n && n.__alive) if (n.updateTransform) {var i = n.updateTransform(e, a, s, r);i && i.update && l.push(n);} else l.push(n);});var i = Z();a.eachSeries(function (t) {var e = o._chartsMap[t.__viewId];if (e.updateTransform) {var n = e.updateTransform(t, a, s, r);n && n.update && i.set(t.uid, 1);} else i.set(t.uid, 1);}), dc(a), this._scheduler.performVisualTasks(a, r, { setDirty: !0, dirtyMap: i }), pc(o, a, s, r, i), gc(a, this._api);}}, updateView: function updateView(t) {var e = this._model;e && (Uh.markUpdateMethod(t, \"updateView\"), dc(e), this._scheduler.performVisualTasks(e, t, { setDirty: !0 }), fc(this, this._model, this._api, t), gc(e, this._api));}, updateVisual: function updateVisual(t) {rc.update.call(this, t);}, updateLayout: function updateLayout(t) {rc.update.call(this, t);} };function ac(t) {var e = t._model,n = t._scheduler;n.restorePipelines(e), n.prepareStageTasks(), cc(t, \"component\", e, n), cc(t, \"chart\", e, n), n.plan();}function oc(e, n, i, r, t) {var a = e._model;if (r) {var o = {};o[r + \"Id\"] = i[r + \"Id\"], o[r + \"Index\"] = i[r + \"Index\"], o[r + \"Name\"] = i[r + \"Name\"];var s = { mainType: r, query: o };t && (s.subType = t);var l = i.excludeSeriesId;null != l && (l = Z(Vi(l))), a && a.eachComponent(s, function (t) {l && null != l.get(t.id) || h(e[\"series\" === r ? \"_chartsMap\" : \"_componentsMap\"][t.__viewId]);}, e);} else Uu(e._componentsViews.concat(e._chartsViews), h);function h(t) {t && t.__alive && t[n] && t[n](t.__model, a, e._api, i);}}function sc(t, e) {var n = t._chartsMap,i = t._scheduler;e.eachSeries(function (t) {i.updateStreamModes(t, n[t.__viewId]);});}function lc(e, t) {var n = e.type,i = e.escapeConnect,r = _c[n],a = r.actionInfo,o = (a.update || \"update\").split(\":\"),s = o.pop();o = null != o[0] && ju(o[0]), this[$u] = !0;var l = [e],h = !1;e.batch && (h = !0, l = A(e.batch, function (t) {return (t = k(S({}, t), e)).batch = null, t;}));var u,c = [],d = \"highlight\" === n || \"downplay\" === n;Uu(l, function (t) {(u = (u = r.action(t, this._model, this._api)) || S({}, t)).type = a.event || u.type, c.push(u), d ? oc(this, s, t, \"series\") : o && oc(this, s, t, o.main, o.sub);}, this), \"none\" === s || d || o || (this[Ku] ? (ac(this), rc.update.call(this, e), this[Ku] = !1) : rc[s].call(this, e)), u = h ? { type: a.event || n, escapeConnect: i, batch: c } : c[0], this[$u] = !1, t || this._messageCenter.trigger(u.type, u);}function hc(t) {for (var e = this._pendingActions; e.length;) {var n = e.shift();lc.call(this, n, t);}}function uc(t) {t || this.trigger(\"updated\");}function cc(t, e, r, a) {for (var o = \"component\" === e, s = o ? t._componentsViews : t._chartsViews, l = o ? t._componentsMap : t._chartsMap, h = t._zr, u = t._api, n = 0; n < s.length; n++) {s[n].__alive = !1;}function i(t) {var e = \"_ec_\" + t.id + \"_\" + t.type,n = l[e];if (!n) {var i = ju(t.type);(n = new (o ? Vh.getClass(i.main, i.sub) : Uh.getClass(i.sub))()).init(r, u), l[e] = n, s.push(n), h.add(n.group);}t.__viewId = n.__id = e, n.__alive = !0, n.__model = t, n.group.__ecComponentInfo = { mainType: t.mainType, index: t.componentIndex }, o || a.prepareView(n, t, r, u);}o ? r.eachComponent(function (t, e) {\"series\" !== t && i(e);}) : r.eachSeries(i);for (n = 0; n < s.length;) {var c = s[n];c.__alive ? n++ : (o || c.renderTask.dispose(), h.remove(c.group), c.dispose(r, u), s.splice(n, 1), delete l[c.__id], c.__id = c.group.__ecComponentInfo = null);}}function dc(t) {t.clearColorPalette(), t.eachSeries(function (t) {t.clearColorPalette();});}function fc(t, e, n, i) {!function (t, n, i, r, e) {Uu(e || t._componentsViews, function (t) {var e = t.__model;t.render(e, n, i, r), mc(e, t);});}(t, e, n, i), Uu(t._chartsViews, function (t) {t.__alive = !1;}), pc(t, e, n, i), Uu(t._chartsViews, function (t) {t.__alive || t.remove(e, n);});}function pc(i, t, e, r, a) {var o,s = i._scheduler;t.eachSeries(function (t) {var e = i._chartsMap[t.__viewId];e.__alive = !0;var n = e.renderTask;s.updatePayload(n, r), a && a.get(t.uid) && n.dirty(), o |= n.perform(s.getPerformArgs(n)), e.group.silent = !!t.get(\"silent\"), mc(t, e), function (t, e) {var n = t.get(\"blendMode\") || null;e.group.traverse(function (t) {t.isGroup || t.style.blend !== n && t.setStyle(\"blend\", n), t.eachPendingDisplayable && t.eachPendingDisplayable(function (t) {t.setStyle(\"blend\", n);});});}(t, e);}), s.unfinished |= o, function (n, t) {var e = n._zr.storage,i = 0;e.traverse(function (t) {i++;}), i > t.get(\"hoverLayerThreshold\") && !m.node && t.eachSeries(function (t) {if (!t.preventUsingHoverLayer) {var e = n._chartsMap[t.__viewId];e.__alive && e.group.traverse(function (t) {t.useHoverLayer = !0;});}});}(i, t), eu(i._zr.dom, t);}function gc(e, n) {Uu(Sc, function (t) {t(e, n);});}nc.resize = function (t) {if (!this._disposed) {this._zr.resize(t);var e = this._model;if (this._loadingFX && this._loadingFX.resize(), e) {var n = e.resetOption(\"media\"),i = t && t.silent;this[$u] = !0, n && ac(this), rc.update.call(this), this[$u] = !1, hc.call(this, i), uc.call(this, i);}}}, nc.showLoading = function (t, e) {if (!this._disposed && (qu(t) && (e = t, t = \"\"), t = t || \"default\", this.hideLoading(), Tc[t])) {var n = Tc[t](this._api, e),i = this._zr;this._loadingFX = n, i.add(n);}}, nc.hideLoading = function () {this._disposed || (this._loadingFX && this._zr.remove(this._loadingFX), this._loadingFX = null);}, nc.makeActionFromEvent = function (t) {var e = S({}, t);return e.type = xc[t.type], e;}, nc.dispatchAction = function (t, e) {this._disposed || (qu(e) || (e = { silent: !!e }), _c[t.type] && this._model && (this[$u] ? this._pendingActions.push(t) : (lc.call(this, t, e.silent), e.flush ? this._zr.flush(!0) : !1 !== e.flush && m.browser.weChat && this._throttledZrFlush(), hc.call(this, e.silent), uc.call(this, e.silent))));}, nc.appendData = function (t) {if (!this._disposed) {var e = t.seriesIndex;this.getModel().getSeriesByIndex(e).appendData(t), this._scheduler.unfinished = !0;}}, nc.on = Ju(\"on\", !1), nc.off = Ju(\"off\", !1), nc.one = Ju(\"one\", !1);var vc = [\"click\", \"dblclick\", \"mouseover\", \"mouseout\", \"mousemove\", \"mousedown\", \"mouseup\", \"globalout\", \"contextmenu\"];function mc(t, e) {var n = t.get(\"z\"),i = t.get(\"zlevel\");e.group.traverse(function (t) {\"group\" !== t.type && (null != n && (t.z = n), null != i && (t.zlevel = i));});}function yc() {this.eventInfo;}nc._initEvents = function () {Uu(vc, function (h) {function t(t) {var e,n = this.getModel(),i = t.target;if (\"globalout\" === h) e = {};else if (i && null != i.dataIndex) {var r = i.dataModel || n.getSeriesByIndex(i.seriesIndex);e = r && r.getDataParams(i.dataIndex, i.dataType, i) || {};} else i && i.eventData && (e = S({}, i.eventData));if (e) {var a = e.componentType,o = e.componentIndex;\"markLine\" !== a && \"markPoint\" !== a && \"markArea\" !== a || (a = \"series\", o = e.seriesIndex);var s = a && null != o && n.getComponent(a, o),l = s && this[\"series\" === s.mainType ? \"_chartsMap\" : \"_componentsMap\"][s.__viewId];e.event = t, e.type = h, this._ecEventProcessor.eventInfo = { targetEl: i, packedEvent: e, model: s, view: l }, this.trigger(h, e);}}t.zrEventfulCallAtLast = !0, this._zr.on(h, t, this);}, this), Uu(xc, function (t, e) {this._messageCenter.on(e, function (t) {this.trigger(e, t);}, this);}, this);}, nc.isDisposed = function () {return this._disposed;}, nc.clear = function () {this._disposed || this.setOption({ series: [] }, !0);}, nc.dispose = function () {if (!this._disposed) {this._disposed = !0, Qi(this.getDom(), Lc, \"\");var e = this._api,n = this._model;Uu(this._componentsViews, function (t) {t.dispose(n, e);}), Uu(this._chartsViews, function (t) {t.dispose(n, e);}), this._zr.dispose(), delete Cc[this.id];}}, _(ec, ft), yc.prototype = { constructor: yc, normalizeQuery: function normalizeQuery(t) {var s = {},l = {},h = {};if (L(t)) {var e = ju(t);s.mainType = e.main || null, s.subType = e.sub || null;} else {var u = [\"Index\", \"Name\", \"Id\"],c = { name: 1, dataIndex: 1, dataType: 1 };D(t, function (t, e) {for (var n = !1, i = 0; i < u.length; i++) {var r = u[i],a = e.lastIndexOf(r);if (0 < a && a === e.length - r.length) {var o = e.slice(0, a);\"data\" !== o && (s.mainType = o, s[r.toLowerCase()] = t, n = !0);}}c.hasOwnProperty(e) && (l[e] = t, n = !0), n || (h[e] = t);});}return { cptQuery: s, dataQuery: l, otherQuery: h };}, filter: function filter(t, e, n) {var i = this.eventInfo;if (!i) return !0;var r = i.targetEl,a = i.packedEvent,o = i.model,s = i.view;if (!o || !s) return !0;var l = e.cptQuery,h = e.dataQuery;return u(l, o, \"mainType\") && u(l, o, \"subType\") && u(l, o, \"index\", \"componentIndex\") && u(l, o, \"name\") && u(l, o, \"id\") && u(h, a, \"name\") && u(h, a, \"dataIndex\") && u(h, a, \"dataType\") && (!s.filterForExposedEvent || s.filterForExposedEvent(t, e.otherQuery, r, a));function u(t, e, n, i) {return null == t[n] || e[i || n] === t[n];}}, afterTrigger: function afterTrigger() {this.eventInfo = null;} };var _c = {},xc = {},wc = [],bc = [],Sc = [],Mc = [],Ic = {},Tc = {},Cc = {},kc = {},Dc = new Date() - 0,Ac = new Date() - 0,Lc = \"_echarts_instance_\";function Pc(t) {kc[t] = !1;}var Oc = Pc;function Ec(t) {return Cc[function (t, e) {return t.getAttribute ? t.getAttribute(e) : t[e];}(t, Lc)];}function Nc(t, e) {Ic[t] = e;}function Bc(t) {bc.push(t);}function zc(t, e) {Wc(wc, t, e, 1e3);}function Rc(t, e, n) {\"function\" == typeof e && (n = e, e = \"\");var i = qu(t) ? t.type : [t, t = { event: e }][0];t.event = (t.event || i).toLowerCase(), e = t.event, Xu(Qu.test(i) && Qu.test(e)), _c[i] || (_c[i] = { action: n, actionInfo: t }), xc[e] = i;}function Fc(t, e) {Wc(Mc, t, e, 1e3, \"layout\");}function Vc(t, e) {Wc(Mc, t, e, 3e3, \"visual\");}function Wc(t, e, n, i, r) {(Yu(e) || qu(e)) && (n = e, e = i);var a = iu.wrapStageHandler(n, r);return a.__prio = e, a.__raw = n, t.push(a), a;}function Hc(t, e) {Tc[t] = e;}function Gc(t) {return Vh.extend(t);}function Xc(t) {return Ph.extend(t);}function Uc(t) {return Uh.extend(t);}Vc(2e3, Jh), Bc(eh), zc(900, function (t) {var a = Z();t.eachSeries(function (t) {var e = t.get(\"stack\");if (e) {var n = a.get(e) || a.set(e, []),i = t.getData(),r = { stackResultDimension: i.getCalculationInfo(\"stackResultDimension\"), stackedOverDimension: i.getCalculationInfo(\"stackedOverDimension\"), stackedDimension: i.getCalculationInfo(\"stackedDimension\"), stackedByDimension: i.getCalculationInfo(\"stackedByDimension\"), isStackedByIndex: i.getCalculationInfo(\"isStackedByIndex\"), data: i, seriesModel: t };if (!r.stackedDimension || !r.isStackedByIndex && !r.stackedByDimension) return;n.length && i.setCalculationInfo(\"stackedOnSeries\", n[n.length - 1].seriesModel), n.push(r);}}), a.each(nh);}), Hc(\"default\", function (i, t) {k(t = t || {}, { text: \"loading\", color: \"#c23531\", textColor: \"#000\", maskColor: \"rgba(255, 255, 255, 0.8)\", zlevel: 0 });var r = new io({ style: { fill: t.maskColor }, zlevel: t.zlevel, z: 1e4 }),a = new uo({ shape: { startAngle: -nu / 2, endAngle: -nu / 2 + .1, r: 10 }, style: { stroke: t.color, lineCap: \"round\", lineWidth: 5 }, zlevel: t.zlevel, z: 10001 }),o = new io({ style: { fill: \"none\", text: t.text, textPosition: \"right\", textDistance: 10, textFill: t.textColor }, zlevel: t.zlevel, z: 10001 });a.animateShape(!0).when(1e3, { endAngle: 3 * nu / 2 }).start(\"circularInOut\"), a.animateShape(!0).when(1e3, { startAngle: 3 * nu / 2 }).delay(300).start(\"circularInOut\");var e = new Ye();return e.add(a), e.add(o), e.add(r), e.resize = function () {var t = i.getWidth() / 2,e = i.getHeight() / 2;a.setShape({ cx: t, cy: e });var n = a.shape.r;o.setShape({ x: t - n, y: e - n, width: 2 * n, height: 2 * n }), r.setShape({ x: 0, y: 0, width: i.getWidth(), height: i.getHeight() });}, e.resize(), e;}), Rc({ type: \"highlight\", event: \"highlight\", update: \"highlight\" }, $), Rc({ type: \"downplay\", event: \"downplay\", update: \"downplay\" }, $), Nc(\"light\", Su), Nc(\"dark\", Tu);function Yc(t) {return t;}function qc(t, e, n, i, r) {this._old = t, this._new = e, this._oldKeyGetter = n || Yc, this._newKeyGetter = i || Yc, this.context = r;}function jc(t, e, n, i, r) {for (var a = 0; a < t.length; a++) {var o = \"_ec_\" + r[i](t[a], a),s = e[o];null == s ? (n.push(o), e[o] = a) : (s.length || (e[o] = s = [s]), s.push(a));}}qc.prototype = { constructor: qc, add: function add(t) {return this._add = t, this;}, update: function update(t) {return this._update = t, this;}, remove: function remove(t) {return this._remove = t, this;}, execute: function execute() {var t = this._old,e = this._new,n = {},i = [],r = [];for (jc(t, {}, i, \"_oldKeyGetter\", this), jc(e, n, r, \"_newKeyGetter\", this), a = 0; a < t.length; a++) {if (null != (s = n[o = i[a]])) (h = s.length) ? (1 === h && (n[o] = null), s = s.shift()) : n[o] = null, this._update && this._update(s, a);else this._remove && this._remove(a);}for (var a = 0; a < r.length; a++) {var o = r[a];if (n.hasOwnProperty(o)) {var s;if (null == (s = n[o])) continue;if (s.length) for (var l = 0, h = s.length; l < h; l++) {this._add && this._add(s[l]);} else this._add && this._add(s);}}} };var Zc = Z([\"tooltip\", \"label\", \"itemName\", \"itemId\", \"seriesName\"]);function $c(t, e) {return t.hasOwnProperty(e) || (t[e] = []), t[e];}var Kc = O,Qc = \"undefined\",Jc = { float: typeof Float64Array == Qc ? Array : Float64Array, int: typeof Int32Array == Qc ? Array : Int32Array, ordinal: Array, number: Array, time: Array },td = typeof Uint32Array == Qc ? Array : Uint32Array,ed = typeof Int32Array == Qc ? Array : Int32Array,nd = typeof Uint16Array == Qc ? Array : Uint16Array;function id(t) {return 65535 < t._rawCount ? td : nd;}var rd = [\"hasItemOption\", \"_nameList\", \"_idList\", \"_invertedIndicesMap\", \"_rawData\", \"_chunkSize\", \"_chunkCount\", \"_dimValueGetter\", \"_count\", \"_rawCount\", \"_nameDimIdx\", \"_idDimIdx\"],ad = [\"_extent\", \"_approximateExtent\", \"_rawExtent\"];function od(e, n) {D(rd.concat(n.__wrappedMethods || []), function (t) {n.hasOwnProperty(t) && (e[t] = n[t]);}), e.__wrappedMethods = n.__wrappedMethods, D(ad, function (t) {e[t] = b(n[t]);}), e._calculationInfo = S(n._calculationInfo);}function sd(t, e) {t = t || [\"x\", \"y\"];for (var n = {}, i = [], r = {}, a = 0; a < t.length; a++) {var o = t[a];L(o) && (o = { name: o });var s = o.name;o.type = o.type || \"float\", o.coordDim || (o.coordDim = s, o.coordDimIndex = 0), o.otherDims = o.otherDims || {}, i.push(s), (n[s] = o).index = a, o.createInvertedIndices && (r[s] = []);}this.dimensions = i, this._dimensionInfos = n, this.hostModel = e, this.dataType, this._indices = null, this._count = 0, this._rawCount = 0, this._storage = {}, this._nameList = [], this._idList = [], this._optionModels = [], this._visual = {}, this._layout = {}, this._itemVisuals = [], this.hasItemVisual = {}, this._itemLayouts = [], this._graphicEls = [], this._chunkSize = 1e5, this._chunkCount = 0, this._rawData, this._rawExtent = {}, this._extent = {}, this._approximateExtent = {}, this._dimensionsSummary = function (i) {var t = {},a = t.encode = {},o = Z(),s = [],l = [],h = t.userOutput = { dimensionNames: i.dimensions.slice(), encode: {} };D(i.dimensions, function (t) {var r = i.getDimensionInfo(t),e = r.coordDim;if (e) {var n = r.coordDimIndex;$c(a, e)[n] = t, r.isExtraCoord || (o.set(e, 1), function (t) {return !(\"ordinal\" === t || \"time\" === t);}(r.type) && (s[0] = t), $c(h.encode, e)[n] = r.index), r.defaultTooltip && l.push(t);}Zc.each(function (t, e) {var n = $c(a, e),i = r.otherDims[e];null != i && !1 !== i && (n[i] = r.name);});});var r = [],u = {};o.each(function (t, e) {var n = a[e];u[e] = n[0], r = r.concat(n);}), t.dataDimsOnCoord = r, t.encodeFirstDimNotExtra = u;var e = a.label;e && e.length && (s = e.slice());var n = a.tooltip;return n && n.length ? l = n.slice() : l.length || (l = s.slice()), a.defaultedLabel = s, a.defaultedTooltip = l, t;}(this), this._invertedIndicesMap = r, this._calculationInfo = {}, this.userOutput = this._dimensionsSummary.userOutput;}var ld = sd.prototype;function hd(t, e, n, i, r) {var a = Jc[e.type],o = i - 1,s = e.name,l = t[s][o];if (l && l.length < n) {for (var h = new a(Math.min(r - o * n, n)), u = 0; u < l.length; u++) {h[u] = l[u];}t[s][o] = h;}for (var c = i * n; c < r; c += n) {t[s].push(new a(Math.min(r - c, n)));}}function ud(r) {var a = r._invertedIndicesMap;D(a, function (t, e) {var n = r._dimensionInfos[e].ordinalMeta;if (n) {t = a[e] = new ed(n.categories.length);for (var i = 0; i < t.length; i++) {t[i] = -1;}for (i = 0; i < r._count; i++) {t[r.get(e, i)] = i;}}});}function cd(t, e, n) {var i;if (null != e) {var r = t._chunkSize,a = Math.floor(n / r),o = n % r,s = t.dimensions[e],l = t._storage[s][a];if (l) {i = l[o];var h = t._dimensionInfos[s].ordinalMeta;h && h.categories.length && (i = h.categories[i]);}}return i;}function dd(t) {return t;}function fd(t) {return t < this._count && 0 <= t ? this._indices[t] : -1;}function pd(t, e) {var n = t._idList[e];return null == n && (n = cd(t, t._idDimIdx, e)), null == n && (n = \"e\\0\\0\" + e), n;}function gd(t) {return C(t) || (t = [t]), t;}function vd(t, e) {var n = t.dimensions,i = new sd(A(n, t.getDimensionInfo, t), t.hostModel);od(i, t);for (var r = i._storage = {}, a = t._storage, o = 0; o < n.length; o++) {var s = n[o];a[s] && (0 <= v(e, s) ? (r[s] = md(a[s]), i._rawExtent[s] = yd(), i._extent[s] = null) : r[s] = a[s]);}return i;}function md(t) {for (var e, n, i = new Array(t.length), r = 0; r < t.length; r++) {i[r] = (e = t[r], n = void 0, (n = e.constructor) === Array ? e.slice() : new n(e));}return i;}function yd() {return [1 / 0, -1 / 0];}ld.type = \"list\", ld.hasItemOption = !0, ld.getDimension = function (t) {return \"number\" != typeof t && (isNaN(t) || this._dimensionInfos.hasOwnProperty(t)) || (t = this.dimensions[t]), t;}, ld.getDimensionInfo = function (t) {return this._dimensionInfos[this.getDimension(t)];}, ld.getDimensionsOnCoord = function () {return this._dimensionsSummary.dataDimsOnCoord.slice();}, ld.mapDimension = function (t, e) {var n = this._dimensionsSummary;if (null == e) return n.encodeFirstDimNotExtra[t];var i = n.encode[t];return !0 === e ? (i || []).slice() : i && i[e];}, ld.initData = function (t, e, n) {(xl.isInstance(t) || P(t)) && (t = new ih(t, this.dimensions.length)), this._rawData = t, this._storage = {}, this._indices = null, this._nameList = e || [], this._idList = [], this._nameRepeatCount = {}, n || (this.hasItemOption = !1), this.defaultDimValueGetter = ch[this._rawData.getSource().sourceFormat], this._dimValueGetter = n = n || this.defaultDimValueGetter, this._dimValueGetterArrayRows = ch.arrayRows, this._rawExtent = {}, this._initDataFromProvider(0, t.count()), t.pure && (this.hasItemOption = !1);}, ld.getProvider = function () {return this._rawData;}, ld.appendData = function (t) {var e = this._rawData,n = this.count();e.appendData(t);var i = e.count();e.persistent || (i += n), this._initDataFromProvider(n, i);}, ld.appendValues = function (t, e) {for (var n = this._chunkSize, i = this._storage, r = this.dimensions, a = r.length, o = this._rawExtent, s = this.count(), l = s + Math.max(t.length, e ? e.length : 0), h = this._chunkCount, u = 0; u < a; u++) {o[m = r[u]] || (o[m] = yd()), i[m] || (i[m] = []), hd(i, this._dimensionInfos[m], n, h, l), this._chunkCount = i[m].length;}for (var c = new Array(a), d = s; d < l; d++) {for (var f = d - s, p = Math.floor(d / n), g = d % n, v = 0; v < a; v++) {var m = r[v],y = this._dimValueGetterArrayRows(t[f] || c, m, f, v);i[m][p][g] = y;var _ = o[m];y < _[0] && (_[0] = y), y > _[1] && (_[1] = y);}e && (this._nameList[d] = e[f]);}this._rawCount = this._count = l, this._extent = {}, ud(this);}, ld._initDataFromProvider = function (t, e) {if (!(e <= t)) {for (var n, i = this._chunkSize, r = this._rawData, a = this._storage, o = this.dimensions, s = o.length, l = this._dimensionInfos, h = this._nameList, u = this._idList, c = this._rawExtent, d = this._nameRepeatCount = {}, f = this._chunkCount, p = 0; p < s; p++) {c[w = o[p]] || (c[w] = yd());var g = l[w];0 === g.otherDims.itemName && (n = this._nameDimIdx = p), 0 === g.otherDims.itemId && (this._idDimIdx = p), a[w] || (a[w] = []), hd(a, g, i, f, e), this._chunkCount = a[w].length;}for (var v = new Array(s), m = t; m < e; m++) {v = r.getItem(m, v);for (var y = Math.floor(m / i), _ = m % i, x = 0; x < s; x++) {var w,b = a[w = o[x]][y],S = this._dimValueGetter(v, w, m, x);b[_] = S;var M = c[w];S < M[0] && (M[0] = S), S > M[1] && (M[1] = S);}if (!r.pure) {var I = h[m];if (v && null == I) if (null != v.name) h[m] = I = v.name;else if (null != n) {var T = o[n],C = a[T][y];if (C) {I = C[_];var k = l[T].ordinalMeta;k && k.categories.length && (I = k.categories[I]);}}var D = null == v ? null : v.id;null == D && null != I && (d[I] = d[I] || 0, 0 < d[D = I] && (D += \"__ec__\" + d[I]), d[I]++), null != D && (u[m] = D);}}!r.persistent && r.clean && r.clean(), this._rawCount = this._count = e, this._extent = {}, ud(this);}}, ld.count = function () {return this._count;}, ld.getIndices = function () {var t = this._indices;if (t) {var e = t.constructor,n = this._count;if (e === Array) {r = new e(n);for (var i = 0; i < n; i++) {r[i] = t[i];}} else r = new e(t.buffer, 0, n);} else {var r = new (e = id(this))(this.count());for (i = 0; i < r.length; i++) {r[i] = i;}}return r;}, ld.get = function (t, e) {if (!(0 <= e && e < this._count)) return NaN;var n = this._storage;if (!n[t]) return NaN;e = this.getRawIndex(e);var i = Math.floor(e / this._chunkSize),r = e % this._chunkSize;return n[t][i][r];}, ld.getByRawIndex = function (t, e) {if (!(0 <= e && e < this._rawCount)) return NaN;var n = this._storage[t];if (!n) return NaN;var i = Math.floor(e / this._chunkSize),r = e % this._chunkSize;return n[i][r];}, ld._getFast = function (t, e) {var n = Math.floor(e / this._chunkSize),i = e % this._chunkSize;return this._storage[t][n][i];}, ld.getValues = function (t, e) {var n = [];C(t) || (e = t, t = this.dimensions);for (var i = 0, r = t.length; i < r; i++) {n.push(this.get(t[i], e));}return n;}, ld.hasValue = function (t) {for (var e = this._dimensionsSummary.dataDimsOnCoord, n = 0, i = e.length; n < i; n++) {if (isNaN(this.get(e[n], t))) return !1;}return !0;}, ld.getDataExtent = function (t) {t = this.getDimension(t);var e = this._storage[t],n = yd();if (!e) return n;var i,r = this.count();if (!this._indices) return this._rawExtent[t].slice();if (i = this._extent[t]) return i.slice();for (var a = (i = n)[0], o = i[1], s = 0; s < r; s++) {var l = this._getFast(t, this.getRawIndex(s));l < a && (a = l), o < l && (o = l);}return i = [a, o], this._extent[t] = i;}, ld.getApproximateExtent = function (t) {return t = this.getDimension(t), this._approximateExtent[t] || this.getDataExtent(t);}, ld.setApproximateExtent = function (t, e) {e = this.getDimension(e), this._approximateExtent[e] = t.slice();}, ld.getCalculationInfo = function (t) {return this._calculationInfo[t];}, ld.setCalculationInfo = function (t, e) {Kc(t) ? S(this._calculationInfo, t) : this._calculationInfo[t] = e;}, ld.getSum = function (t) {var e = 0;if (this._storage[t]) for (var n = 0, i = this.count(); n < i; n++) {var r = this.get(t, n);isNaN(r) || (e += r);}return e;}, ld.getMedian = function (t) {var n = [];this.each(t, function (t, e) {isNaN(t) || n.push(t);});var e = [].concat(n).sort(function (t, e) {return t - e;}),i = this.count();return 0 === i ? 0 : i % 2 == 1 ? e[(i - 1) / 2] : (e[i / 2] + e[i / 2 - 1]) / 2;}, ld.rawIndexOf = function (t, e) {var n = (t && this._invertedIndicesMap[t])[e];return null == n || isNaN(n) ? -1 : n;}, ld.indexOfName = function (t) {for (var e = 0, n = this.count(); e < n; e++) {if (this.getName(e) === t) return e;}return -1;}, ld.indexOfRawIndex = function (t) {if (t >= this._rawCount || t < 0) return -1;if (!this._indices) return t;var e = this._indices,n = e[t];if (null != n && n < this._count && n === t) return t;for (var i = 0, r = this._count - 1; i <= r;) {var a = (i + r) / 2 | 0;if (e[a] < t) i = 1 + a;else {if (!(e[a] > t)) return a;r = a - 1;}}return -1;}, ld.indicesOfNearest = function (t, e, n) {var i = [];if (!this._storage[t]) return i;null == n && (n = 1 / 0);for (var r = Number.MAX_VALUE, a = -1, o = 0, s = this.count(); o < s; o++) {var l = e - this.get(t, o),h = Math.abs(l);l <= n && h <= r && ((h < r || 0 <= l && a < 0) && (r = h, a = l, i.length = 0), i.push(o));}return i;}, ld.getRawIndex = dd, ld.getRawDataItem = function (t) {if (this._rawData.persistent) return this._rawData.getItem(this.getRawIndex(t));for (var e = [], n = 0; n < this.dimensions.length; n++) {var i = this.dimensions[n];e.push(this.get(i, t));}return e;}, ld.getName = function (t) {var e = this.getRawIndex(t);return this._nameList[e] || cd(this, this._nameDimIdx, e) || \"\";}, ld.getId = function (t) {return pd(this, this.getRawIndex(t));}, ld.each = function (t, e, n, i) {if (this._count) {\"function\" == typeof t && (i = n, n = e, e = t, t = []), n = n || i || this;for (var r = (t = A(gd(t), this.getDimension, this)).length, a = 0; a < this.count(); a++) {switch (r) {case 0:e.call(n, a);break;case 1:e.call(n, this.get(t[0], a), a);break;case 2:e.call(n, this.get(t[0], a), this.get(t[1], a), a);break;default:for (var o = 0, s = []; o < r; o++) {s[o] = this.get(t[o], a);}s[o] = a, e.apply(n, s);}}}}, ld.filterSelf = function (t, e, n, i) {if (this._count) {\"function\" == typeof t && (i = n, n = e, e = t, t = []), n = n || i || this, t = A(gd(t), this.getDimension, this);for (var r = this.count(), a = new (id(this))(r), o = [], s = t.length, l = 0, h = t[0], u = 0; u < r; u++) {var c,d = this.getRawIndex(u);if (0 === s) c = e.call(n, u);else if (1 === s) {var f = this._getFast(h, d);c = e.call(n, f, u);} else {for (var p = 0; p < s; p++) {o[p] = this._getFast(h, d);}o[p] = u, c = e.apply(n, o);}c && (a[l++] = d);}return l < r && (this._indices = a), this._count = l, this._extent = {}, this.getRawIndex = this._indices ? fd : dd, this;}}, ld.selectRange = function (t) {if (this._count) {var e = [];for (var n in t) {t.hasOwnProperty(n) && e.push(n);}var i = e.length;if (i) {var r = this.count(),a = new (id(this))(r),o = 0,s = e[0],l = t[s][0],h = t[s][1],u = !1;if (!this._indices) {var c = 0;if (1 === i) {for (var d = this._storage[e[0]], f = 0; f < this._chunkCount; f++) {for (var p = d[f], g = Math.min(this._count - f * this._chunkSize, this._chunkSize), v = 0; v < g; v++) {(l <= (w = p[v]) && w <= h || isNaN(w)) && (a[o++] = c), c++;}}u = !0;} else if (2 === i) {d = this._storage[s];var m = this._storage[e[1]],y = t[e[1]][0],_ = t[e[1]][1];for (f = 0; f < this._chunkCount; f++) {p = d[f];var x = m[f];for (g = Math.min(this._count - f * this._chunkSize, this._chunkSize), v = 0; v < g; v++) {var w = p[v],b = x[v];(l <= w && w <= h || isNaN(w)) && (y <= b && b <= _ || isNaN(b)) && (a[o++] = c), c++;}}u = !0;}}if (!u) if (1 === i) for (v = 0; v < r; v++) {var S = this.getRawIndex(v);(l <= (w = this._getFast(s, S)) && w <= h || isNaN(w)) && (a[o++] = S);} else for (v = 0; v < r; v++) {var M = !0;for (S = this.getRawIndex(v), f = 0; f < i; f++) {var I = e[f];((w = this._getFast(n, S)) < t[I][0] || w > t[I][1]) && (M = !1);}M && (a[o++] = this.getRawIndex(v));}return o < r && (this._indices = a), this._count = o, this._extent = {}, this.getRawIndex = this._indices ? fd : dd, this;}}}, ld.mapArray = function (t, e, n, i) {\"function\" == typeof t && (i = n, n = e, e = t, t = []), n = n || i || this;var r = [];return this.each(t, function () {r.push(e && e.apply(this, arguments));}, n), r;}, ld.map = function (t, e, n, i) {n = n || i || this;var r = vd(this, t = A(gd(t), this.getDimension, this));r._indices = this._indices, r.getRawIndex = r._indices ? fd : dd;for (var a = r._storage, o = [], s = this._chunkSize, l = t.length, h = this.count(), u = [], c = r._rawExtent, d = 0; d < h; d++) {for (var f = 0; f < l; f++) {u[f] = this.get(t[f], d);}u[l] = d;var p = e && e.apply(n, u);if (null != p) {\"object\" != typeof p && (o[0] = p, p = o);for (var g = this.getRawIndex(d), v = Math.floor(g / s), m = g % s, y = 0; y < p.length; y++) {var _ = t[y],x = p[y],w = c[_],b = a[_];b && (b[v][m] = x), x < w[0] && (w[0] = x), x > w[1] && (w[1] = x);}}}return r;}, ld.downSample = function (t, e, n, i) {for (var r = vd(this, [t]), a = r._storage, o = [], s = Math.floor(1 / e), l = a[t], h = this.count(), u = this._chunkSize, c = r._rawExtent[t], d = new (id(this))(h), f = 0, p = 0; p < h; p += s) {h - p < s && (s = h - p, o.length = s);for (var g = 0; g < s; g++) {var v = this.getRawIndex(p + g),m = Math.floor(v / u),y = v % u;o[g] = l[m][y];}var _ = n(o),x = this.getRawIndex(Math.min(p + i(o, _) || 0, h - 1)),w = x % u;(l[Math.floor(x / u)][w] = _) < c[0] && (c[0] = _), _ > c[1] && (c[1] = _), d[f++] = x;}return r._count = f, r._indices = d, r.getRawIndex = fd, r;}, ld.getItemModel = function (t) {var e = this.hostModel;return new xs(this.getRawDataItem(t), e, e && e.ecModel);}, ld.diff = function (e) {var n = this;return new qc(e ? e.getIndices() : [], this.getIndices(), function (t) {return pd(e, t);}, function (t) {return pd(n, t);});}, ld.getVisual = function (t) {var e = this._visual;return e && e[t];}, ld.setVisual = function (t, e) {if (Kc(t)) for (var n in t) {t.hasOwnProperty(n) && this.setVisual(n, t[n]);} else this._visual = this._visual || {}, this._visual[t] = e;}, ld.setLayout = function (t, e) {if (Kc(t)) for (var n in t) {t.hasOwnProperty(n) && this.setLayout(n, t[n]);} else this._layout[t] = e;}, ld.getLayout = function (t) {return this._layout[t];}, ld.getItemLayout = function (t) {return this._itemLayouts[t];}, ld.setItemLayout = function (t, e, n) {this._itemLayouts[t] = n ? S(this._itemLayouts[t] || {}, e) : e;}, ld.clearItemLayouts = function () {this._itemLayouts.length = 0;}, ld.getItemVisual = function (t, e, n) {var i = this._itemVisuals[t],r = i && i[e];return null != r || n ? r : this.getVisual(e);}, ld.setItemVisual = function (t, e, n) {var i = this._itemVisuals[t] || {},r = this.hasItemVisual;if (this._itemVisuals[t] = i, Kc(e)) for (var a in e) {e.hasOwnProperty(a) && (i[a] = e[a], r[a] = !0);} else i[e] = n, r[e] = !0;}, ld.clearAllVisual = function () {this._visual = {}, this._itemVisuals = [], this.hasItemVisual = {};};function _d(t) {t.seriesIndex = this.seriesIndex, t.dataIndex = this.dataIndex, t.dataType = this.dataType;}function xd(t, e, n) {xl.isInstance(e) || (e = xl.seriesDataToSource(e)), n = n || {}, t = (t || []).slice();for (var i = (n.dimsDef || []).slice(), l = Z(n.encodeDef), r = Z(), a = Z(), h = [], o = function (t, e, n, i) {var r = Math.max(t.dimensionsDetectCount || 1, e.length, n.length, i || 0);return D(e, function (t) {var e = t.dimsDef;e && (r = Math.max(r, e.length));}), r;}(e, t, i, n.dimCount), s = 0; s < o; s++) {var u = i[s] = S({}, O(i[s]) ? i[s] : { name: i[s] }),c = u.name,d = h[s] = { otherDims: {} };null != c && null == r.get(c) && (d.name = d.displayName = c, r.set(c, s)), null != u.type && (d.type = u.type), null != u.displayName && (d.displayName = u.displayName);}l.each(function (t, n) {if (1 === (t = Vi(t).slice()).length && !L(t[0]) && t[0] < 0) l.set(n, !1);else {var i = l.set(n, []);D(t, function (t, e) {L(t) && (t = r.get(t)), null != t && t < o && (i[e] = t, p(h[t], n, e));});}});var f = 0;function p(t, e, n) {null != Zc.get(e) ? t.otherDims[e] = n : (t.coordDim = e, t.coordDimIndex = n, a.set(e, !0));}D(t, function (r, t) {var a, o, s;if (L(r)) a = r, r = {};else {a = r.name;var e = r.ordinalMeta;r.ordinalMeta = null, (r = b(r)).ordinalMeta = e, o = r.dimsDef, s = r.otherDims, r.name = r.coordDim = r.coordDimIndex = r.dimsDef = r.otherDims = null;}if (!1 !== (n = l.get(a))) {var n;if (!(n = Vi(n)).length) for (var i = 0; i < (o && o.length || 1); i++) {for (; f < h.length && null != h[f].coordDim;) {f++;}f < h.length && n.push(f++);}D(n, function (t, e) {var n = h[t];if (p(k(n, r), a, e), null == n.name && o) {var i = o[e];O(i) || (i = { name: i }), n.name = n.displayName = i.name, n.defaultTooltip = i.defaultTooltip;}s && k(n.otherDims, s);});}});var g = n.generateCoord,v = n.generateCoordCount,m = null != v;v = g ? v || 1 : 0;for (var y, _, x = g || \"value\", w = 0; w < o; w++) {null == (d = h[w] = h[w] || {}).coordDim && (d.coordDim = wd(x, a, m), d.coordDimIndex = 0, (!g || v <= 0) && (d.isExtraCoord = !0), v--), null == d.name && (d.name = wd(d.coordDim, r)), null == d.type && (y = e, _ = w, d.name, Il(y.data, y.sourceFormat, y.seriesLayoutBy, y.dimensionsDefine, y.startIndex, _)) && (d.type = \"ordinal\");}return h;}function wd(t, e, n) {if (n || null != e.get(t)) {for (var i = 0; null != e.get(t + i);) {i++;}t += i;}return e.set(t, !0), t;}ld.setItemGraphicEl = function (t, e) {var n = this.hostModel;e && (e.dataIndex = t, e.dataType = this.dataType, e.seriesIndex = n && n.seriesIndex, \"group\" === e.type && e.traverse(_d, e)), this._graphicEls[t] = e;}, ld.getItemGraphicEl = function (t) {return this._graphicEls[t];}, ld.eachItemGraphicEl = function (n, i) {D(this._graphicEls, function (t, e) {t && n && n.call(i, t, e);});}, ld.cloneShallow = function (t) {if (!t) {var e = A(this.dimensions, this.getDimensionInfo, this);t = new sd(e, this.hostModel);}if (t._storage = this._storage, od(t, this), this._indices) {var n = this._indices.constructor;t._indices = new n(this._indices);} else t._indices = null;return t.getRawIndex = t._indices ? fd : dd, t;}, ld.wrapMethod = function (t, e) {var n = this[t];\"function\" == typeof n && (this.__wrappedMethods = this.__wrappedMethods || [], this.__wrappedMethods.push(t), this[t] = function () {var t = n.apply(this, arguments);return e.apply(this, [t].concat(W(arguments)));});}, ld.TRANSFERABLE_METHODS = [\"cloneShallow\", \"downSample\", \"map\"], ld.CHANGABLE_METHODS = [\"filterSelf\", \"selectRange\"];function bd(t, e) {return xd((e = e || {}).coordDimensions || [], t, { dimsDef: e.dimensionsDefine || t.dimensionsDefine, encodeDef: e.encodeDefine || t.encodeDefine, dimCount: e.dimensionsCount, generateCoord: e.generateCoord, generateCoordCount: e.generateCoordCount });}function Sd(t, e) {return !!e && e === t.getCalculationInfo(\"stackedDimension\");}function Md(t, e, n) {n = n || {}, xl.isInstance(t) || (t = xl.seriesDataToSource(t));var i,r = e.get(\"coordinateSystem\"),a = Ol.get(r),o = hl(e);o && (i = A(o.coordSysDims, function (t) {var e = { name: t },n = o.axisMap.get(t);if (n) {var i = n.get(\"type\");e.type = function (t) {return \"category\" === t ? \"ordinal\" : \"time\" === t ? \"time\" : \"float\";}(i);}return e;})), i = i || a && (a.getDimensionsInfo ? a.getDimensionsInfo() : a.dimensions.slice()) || [\"x\", \"y\"];var s,l,h = bd(t, { coordDimensions: i, generateCoord: n.generateCoord });o && D(h, function (t, e) {var n = t.coordDim,i = o.categoryAxisMap.get(n);i && (null == s && (s = e), t.ordinalMeta = i.getOrdinalMeta()), null != t.otherDims.itemName && (l = !0);}), l || null == s || (h[s].otherDims.itemName = 0);var u = function (t, n, e) {var i,r,a,o,s = (e = e || {}).byIndex,l = e.stackedCoordDimension,h = !(!t || !t.get(\"stack\"));if (D(n, function (t, e) {L(t) && (n[e] = t = { name: t }), h && !t.isExtraCoord && (s || i || !t.ordinalMeta || (i = t), r || \"ordinal\" === t.type || \"time\" === t.type || l && l !== t.coordDim || (r = t));}), !r || s || i || (s = !0), r) {a = \"__\\0ecstackresult\", o = \"__\\0ecstackedover\", i && (i.createInvertedIndices = !0);var u = r.coordDim,c = r.type,d = 0;D(n, function (t) {t.coordDim === u && d++;}), n.push({ name: a, coordDim: u, coordDimIndex: d, type: c, isExtraCoord: !0, isCalculationCoord: !0 }), d++, n.push({ name: o, coordDim: o, coordDimIndex: d, type: c, isExtraCoord: !0, isCalculationCoord: !0 });}return { stackedDimension: r && r.name, stackedByDimension: i && i.name, isStackedByIndex: s, stackedOverDimension: o, stackResultDimension: a };}(e, h),c = new sd(h, e);c.setCalculationInfo(u);var d = null != s && function (t) {if (t.sourceFormat === dl) {var e = function (t) {var e = 0;for (; e < t.length && null == t[e];) {e++;}return t[e];}(t.data || []);return null != e && !C(Gi(e));}}(t) ? function (t, e, n, i) {return i === s ? n : this.defaultDimValueGetter(t, e, n, i);} : null;return c.hasItemOption = !1, c.initData(t, null, d), c;}Ph.extend({ type: \"series.line\", dependencies: [\"grid\", \"polar\"], getInitialData: function getInitialData(t, e) {return Md(this.getSource(), this);}, defaultOption: { zlevel: 0, z: 2, coordinateSystem: \"cartesian2d\", legendHoverLink: !0, hoverAnimation: !0, clip: !0, label: { position: \"top\" }, lineStyle: { width: 2, type: \"solid\" }, step: !1, smooth: !1, smoothMonotone: null, symbol: \"emptyCircle\", symbolSize: 4, symbolRotate: null, showSymbol: !0, showAllSymbol: \"auto\", connectNulls: !1, sampling: \"none\", animationEasing: \"linear\", progressive: 0, hoverLayerThreshold: 1 / 0 } });var Id = To({ type: \"triangle\", shape: { cx: 0, cy: 0, width: 0, height: 0 }, buildPath: function buildPath(t, e) {var n = e.cx,i = e.cy,r = e.width / 2,a = e.height / 2;t.moveTo(n, i - a), t.lineTo(n + r, i + a), t.lineTo(n - r, i + a), t.closePath();} }),Td = To({ type: \"diamond\", shape: { cx: 0, cy: 0, width: 0, height: 0 }, buildPath: function buildPath(t, e) {var n = e.cx,i = e.cy,r = e.width / 2,a = e.height / 2;t.moveTo(n, i - a), t.lineTo(n + r, i), t.lineTo(n, i + a), t.lineTo(n - r, i), t.closePath();} }),Cd = To({ type: \"pin\", shape: { x: 0, y: 0, width: 0, height: 0 }, buildPath: function buildPath(t, e) {var n = e.x,i = e.y,r = e.width / 5 * 3,a = Math.max(r, e.height),o = r / 2,s = o * o / (a - o),l = i - a + o + s,h = Math.asin(s / o),u = Math.cos(h) * o,c = Math.sin(h),d = Math.cos(h),f = .6 * o,p = .7 * o;t.moveTo(n - u, l + s), t.arc(n, l, o, Math.PI - h, 2 * Math.PI + h), t.bezierCurveTo(n + u - c * f, l + s + d * f, n, i - p, n, i), t.bezierCurveTo(n, i - p, n - u + c * f, l + s + d * f, n - u, l + s), t.closePath();} }),kd = To({ type: \"arrow\", shape: { x: 0, y: 0, width: 0, height: 0 }, buildPath: function buildPath(t, e) {var n = e.height,i = e.width,r = e.x,a = e.y,o = i / 3 * 2;t.moveTo(r, a), t.lineTo(r + o, a + n), t.lineTo(r, a + n / 4 * 3), t.lineTo(r - o, a + n), t.lineTo(r, a), t.closePath();} }),Dd = { line: function line(t, e, n, i, r) {r.x1 = t, r.y1 = e + i / 2, r.x2 = t + n, r.y2 = e + i / 2;}, rect: function rect(t, e, n, i, r) {r.x = t, r.y = e, r.width = n, r.height = i;}, roundRect: function roundRect(t, e, n, i, r) {r.x = t, r.y = e, r.width = n, r.height = i, r.r = Math.min(n, i) / 4;}, square: function square(t, e, n, i, r) {var a = Math.min(n, i);r.x = t, r.y = e, r.width = a, r.height = a;}, circle: function circle(t, e, n, i, r) {r.cx = t + n / 2, r.cy = e + i / 2, r.r = Math.min(n, i) / 2;}, diamond: function diamond(t, e, n, i, r) {r.cx = t + n / 2, r.cy = e + i / 2, r.width = n, r.height = i;}, pin: function pin(t, e, n, i, r) {r.x = t + n / 2, r.y = e + i / 2, r.width = n, r.height = i;}, arrow: function arrow(t, e, n, i, r) {r.x = t + n / 2, r.y = e + i / 2, r.width = n, r.height = i;}, triangle: function triangle(t, e, n, i, r) {r.cx = t + n / 2, r.cy = e + i / 2, r.width = n, r.height = i;} },Ad = {};D({ line: ao, rect: io, roundRect: io, square: io, circle: Xa, diamond: Td, pin: Cd, arrow: kd, triangle: Id }, function (t, e) {Ad[e] = new t();});var Ld = To({ type: \"symbol\", shape: { symbolType: \"\", x: 0, y: 0, width: 0, height: 0 }, calculateTextPosition: function calculateTextPosition(t, e, n) {var i = Nn(t, e, n),r = this.shape;return r && \"pin\" === r.symbolType && \"inside\" === e.textPosition && (i.y = n.y + .4 * n.height), i;}, buildPath: function buildPath(t, e, n) {var i = e.symbolType;if (\"none\" !== i) {var r = Ad[i];r = r || Ad[i = \"rect\"], Dd[i](e.x, e.y, e.width, e.height, r.shape), r.buildPath(t, r.shape, n);}} });function Pd(t, e) {if (\"image\" !== this.type) {var n = this.style,i = this.shape;i && \"line\" === i.symbolType ? n.stroke = t : this.__isEmptyBrush ? (n.stroke = t, n.fill = e || \"#fff\") : (n.fill && (n.fill = t), n.stroke && (n.stroke = t)), this.dirty(!1);}}function Od(t, e, n, i, r, a, o) {var s,l = 0 === t.indexOf(\"empty\");return l && (t = t.substr(5, 1).toLowerCase() + t.substr(6)), (s = 0 === t.indexOf(\"image://\") ? Do(t.slice(8), new Ue(e, n, i, r), o ? \"center\" : \"cover\") : 0 === t.indexOf(\"path://\") ? ko(t.slice(7), {}, new Ue(e, n, i, r), o ? \"center\" : \"cover\") : new Ld({ shape: { symbolType: t, x: e, y: n, width: i, height: r } })).__isEmptyBrush = l, s.setColor = Pd, s.setColor(a), s;}function Ed(t, e) {var n = t.mapDimension(\"defaultedLabel\", !0),i = n.length;if (1 === i) return ph(t, e, n[0]);if (i) {for (var r = [], a = 0; a < n.length; a++) {var o = ph(t, e, n[a]);r.push(o);}return r.join(\" \");}}function Nd(t, e, n) {Ye.call(this), this.updateData(t, e, n);}var Bd = Nd.prototype,zd = Nd.getSymbolSize = function (t, e) {var n = t.getItemVisual(e, \"symbolSize\");return n instanceof Array ? n.slice() : [+n, +n];};function Rd(t) {return [t[0] / 2, t[1] / 2];}function Fd(t, e) {this.parent.drift(t, e);}Bd._createSymbol = function (t, e, n, i, r) {this.removeAll();var a = Od(t, -1, -1, 2, 2, e.getItemVisual(n, \"color\"), r);a.attr({ z2: 100, culling: !0, scale: Rd(i) }), a.drift = Fd, this._symbolType = t, this.add(a);}, Bd.stopSymbolAnimation = function (t) {this.childAt(0).stopAnimation(t);}, Bd.getSymbolPath = function () {return this.childAt(0);}, Bd.getScale = function () {return this.childAt(0).scale;}, Bd.highlight = function () {this.childAt(0).trigger(\"emphasis\");}, Bd.downplay = function () {this.childAt(0).trigger(\"normal\");}, Bd.setZ = function (t, e) {var n = this.childAt(0);n.zlevel = t, n.z = e;}, Bd.setDraggable = function (t) {var e = this.childAt(0);e.draggable = t, e.cursor = t ? \"move\" : e.cursor;}, Bd.updateData = function (t, e, n) {this.silent = !1;var i = t.getItemVisual(e, \"symbol\") || \"circle\",r = t.hostModel,a = zd(t, e),o = i !== this._symbolType;if (o) {var s = t.getItemVisual(e, \"symbolKeepAspect\");this._createSymbol(i, t, e, a, s);} else {(l = this.childAt(0)).silent = !1, ss(l, { scale: Rd(a) }, r, e);}if (this._updateCommon(t, e, a, n), o) {var l = this.childAt(0),h = n && n.fadeIn,u = { scale: l.scale.slice() };h && (u.style = { opacity: l.style.opacity }), l.scale = [0, 0], h && (l.style.opacity = 0), ls(l, u, r, e);}this._seriesModel = r;};var Vd = [\"itemStyle\"],Wd = [\"emphasis\", \"itemStyle\"],Hd = [\"label\"],Gd = [\"emphasis\", \"label\"];function Xd(t, e) {if (!this.incremental && !this.useHoverLayer) if (\"emphasis\" === e) {var n = this.__symbolOriginalScale,i = n[1] / n[0],r = { scale: [Math.max(1.1 * n[0], n[0] + 3), Math.max(1.1 * n[1], n[1] + 3 * i)] };this.animateTo(r, 400, \"elasticOut\");} else \"normal\" === e && this.animateTo({ scale: this.__symbolOriginalScale }, 400, \"elasticOut\");}function Ud(t) {this.group = new Ye(), this._symbolCtor = t || Nd;}Bd._updateCommon = function (n, t, e, i) {var r = this.childAt(0),a = n.hostModel,o = n.getItemVisual(t, \"color\");\"image\" !== r.type ? r.useStyle({ strokeNoScale: !0 }) : r.setStyle({ opacity: null, shadowBlur: null, shadowOffsetX: null, shadowOffsetY: null, shadowColor: null });var s = i && i.itemStyle,l = i && i.hoverItemStyle,h = i && i.symbolRotate,u = i && i.symbolOffset,c = i && i.labelModel,d = i && i.hoverLabelModel,f = i && i.hoverAnimation,p = i && i.cursorStyle;if (!i || n.hasItemOption) {var g = i && i.itemModel ? i.itemModel : n.getItemModel(t);s = g.getModel(Vd).getItemStyle([\"color\"]), l = g.getModel(Wd).getItemStyle(), h = g.getShallow(\"symbolRotate\"), u = g.getShallow(\"symbolOffset\"), c = g.getModel(Hd), d = g.getModel(Gd), f = g.getShallow(\"hoverAnimation\"), p = g.getShallow(\"cursor\");} else l = S({}, l);var v = r.style;r.attr(\"rotation\", (h || 0) * Math.PI / 180 || 0), u && r.attr(\"position\", [Cs(u[0], e[0]), Cs(u[1], e[1])]), p && r.attr(\"cursor\", p), r.setColor(o, i && i.symbolInnerColor), r.setStyle(s);var m = n.getItemVisual(t, \"opacity\");null != m && (v.opacity = m);var y = n.getItemVisual(t, \"liftZ\"),_ = r.__z2Origin;null != y ? null == _ && (r.__z2Origin = r.z2, r.z2 += y) : null != _ && (r.z2 = _, r.__z2Origin = null);var x = i && i.useNameLabel;Qo(v, l, c, d, { labelFetcher: a, labelDataIndex: t, defaultText: function defaultText(t, e) {return x ? n.getName(t) : Ed(n, t);}, isRectText: !0, autoColor: o }), r.__symbolOriginalScale = Rd(e), r.hoverStyle = l, r.highDownOnUpdate = f && a.isAnimationEnabled() ? Xd : null, jo(r);}, Bd.fadeOut = function (t, e) {var n = this.childAt(0);this.silent = n.silent = !0, e && e.keepLabel || (n.style.text = null), ss(n, { style: { opacity: 0 }, scale: [0, 0] }, this._seriesModel, this.dataIndex, t);}, y(Nd, Ye);var Yd = Ud.prototype;function qd(t, e, n, i) {return e && !isNaN(e[0]) && !isNaN(e[1]) && !(i.isIgnore && i.isIgnore(n)) && !(i.clipShape && !i.clipShape.contain(e[0], e[1])) && \"none\" !== t.getItemVisual(n, \"symbol\");}function jd(t) {return null == t || O(t) || (t = { isIgnore: t }), t || {};}function Zd(t) {var e = t.hostModel;return { itemStyle: e.getModel(\"itemStyle\").getItemStyle([\"color\"]), hoverItemStyle: e.getModel(\"emphasis.itemStyle\").getItemStyle(), symbolRotate: e.get(\"symbolRotate\"), symbolOffset: e.get(\"symbolOffset\"), hoverAnimation: e.get(\"hoverAnimation\"), labelModel: e.getModel(\"label\"), hoverLabelModel: e.getModel(\"emphasis.label\"), cursorStyle: e.get(\"cursor\") };}function $d(t, e, n) {var i,r = t.getBaseAxis(),a = t.getOtherAxis(r),o = function (t, e) {var n = 0,i = t.scale.getExtent();\"start\" === e ? n = i[0] : \"end\" === e ? n = i[1] : 0 < i[0] ? n = i[0] : i[1] < 0 && (n = i[1]);return n;}(a, n),s = r.dim,l = a.dim,h = e.mapDimension(l),u = e.mapDimension(s),c = \"x\" === l || \"radius\" === l ? 1 : 0,d = A(t.dimensions, function (t) {return e.mapDimension(t);}),f = e.getCalculationInfo(\"stackResultDimension\");return (i |= Sd(e, d[0])) && (d[0] = f), (i |= Sd(e, d[1])) && (d[1] = f), { dataDimsForPoint: d, valueStart: o, valueAxisDim: l, baseAxisDim: s, stacked: !!i, valueDim: h, baseDim: u, baseDataOffset: c, stackedOverDimension: e.getCalculationInfo(\"stackedOverDimension\") };}function Kd(t, e, n, i) {var r = NaN;t.stacked && (r = n.get(n.getCalculationInfo(\"stackedOverDimension\"), i)), isNaN(r) && (r = t.valueStart);var a = t.baseDataOffset,o = [];return o[a] = n.get(t.baseDim, i), o[1 - a] = r, e.dataToPoint(o);}Yd.updateData = function (r, a) {a = jd(a);var o = this.group,s = r.hostModel,l = this._data,h = this._symbolCtor,u = Zd(r);l || o.removeAll(), r.diff(l).add(function (t) {var e = r.getItemLayout(t);if (qd(r, e, t, a)) {var n = new h(r, t, u);n.attr(\"position\", e), r.setItemGraphicEl(t, n), o.add(n);}}).update(function (t, e) {var n = l.getItemGraphicEl(e),i = r.getItemLayout(t);qd(r, i, t, a) ? (n ? (n.updateData(r, t, u), ss(n, { position: i }, s)) : (n = new h(r, t)).attr(\"position\", i), o.add(n), r.setItemGraphicEl(t, n)) : o.remove(n);}).remove(function (t) {var e = l.getItemGraphicEl(t);e && e.fadeOut(function () {o.remove(e);});}).execute(), this._data = r;}, Yd.isPersistent = function () {return !0;}, Yd.updateLayout = function () {var i = this._data;i && i.eachItemGraphicEl(function (t, e) {var n = i.getItemLayout(e);t.attr(\"position\", n);});}, Yd.incrementalPrepareUpdate = function (t) {this._seriesScope = Zd(t), this._data = null, this.group.removeAll();}, Yd.incrementalUpdate = function (t, e, n) {function i(t) {t.isGroup || (t.incremental = t.useHoverLayer = !0);}n = jd(n);for (var r = t.start; r < t.end; r++) {var a = e.getItemLayout(r);if (qd(e, a, r, n)) {var o = new this._symbolCtor(e, r, this._seriesScope);o.traverse(i), o.attr(\"position\", a), this.group.add(o), e.setItemGraphicEl(r, o);}}}, Yd.remove = function (t) {var e = this.group,n = this._data;n && t ? n.eachItemGraphicEl(function (t) {t.fadeOut(function () {e.remove(t);});}) : e.removeAll();};var Qd = lt,Jd = ht,tf = function tf(t, e, n, i) {return t[0] = e[0] + n[0] * i, t[1] = e[1] + n[1] * i, t;},ef = function ef(t, e) {return t[0] = e[0], t[1] = e[1], t;},nf = [],rf = [],af = [];function of(t) {return isNaN(t[0]) || isNaN(t[1]);}function sf(t, e, n, i, r, a, o, s, l, h) {return \"none\" !== h && h ? function (t, e, n, i, r, a, o, s, l, h, u) {for (var c = 0, d = n, f = 0; f < i; f++) {var p = e[d];if (r <= d || d < 0) break;if (of(p)) {if (u) {d += a;continue;}break;}if (d === n) t[0 < a ? \"moveTo\" : \"lineTo\"](p[0], p[1]);else if (0 < l) {var g = e[c],v = \"y\" === h ? 1 : 0,m = (p[v] - g[v]) * l;ef(rf, g), rf[v] = g[v] + m, ef(af, p), af[v] = p[v] - m, t.bezierCurveTo(rf[0], rf[1], af[0], af[1], p[0], p[1]);} else t.lineTo(p[0], p[1]);c = d, d += a;}return f;}.apply(this, arguments) : function (t, e, n, i, r, a, o, s, l, h, u) {for (var c = 0, d = n, f = 0; f < i; f++) {var p = e[d];if (r <= d || d < 0) break;if (of(p)) {if (u) {d += a;continue;}break;}if (d === n) t[0 < a ? \"moveTo\" : \"lineTo\"](p[0], p[1]), ef(rf, p);else if (0 < l) {var g = d + a,v = e[g];if (u) for (; v && of(e[g]);) {v = e[g += a];}var m = .5,y = e[c];if (!(v = e[g]) || of(v)) ef(af, p);else {var _, x;if (of(v) && !u && (v = p), et(nf, v, y), \"x\" === h || \"y\" === h) {var w = \"x\" === h ? 0 : 1;_ = Math.abs(p[w] - y[w]), x = Math.abs(p[w] - v[w]);} else _ = at(p, y), x = at(p, v);tf(af, p, nf, -l * (1 - (m = x / (x + _))));}Qd(rf, rf, s), Jd(rf, rf, o), Qd(af, af, s), Jd(af, af, o), t.bezierCurveTo(rf[0], rf[1], af[0], af[1], p[0], p[1]), tf(rf, p, nf, l * m);} else t.lineTo(p[0], p[1]);c = d, d += a;}return f;}.apply(this, arguments);}function lf(t, e) {var n = [1 / 0, 1 / 0],i = [-1 / 0, -1 / 0];if (e) for (var r = 0; r < t.length; r++) {var a = t[r];a[0] < n[0] && (n[0] = a[0]), a[1] < n[1] && (n[1] = a[1]), a[0] > i[0] && (i[0] = a[0]), a[1] > i[1] && (i[1] = a[1]);}return { min: e ? n : i, max: e ? i : n };}var hf = Ma.extend({ type: \"ec-polyline\", shape: { points: [], smooth: 0, smoothConstraint: !0, smoothMonotone: null, connectNulls: !1 }, style: { fill: null, stroke: \"#000\" }, brush: Ga(Ma.prototype.brush), buildPath: function buildPath(t, e) {var n = e.points,i = 0,r = n.length,a = lf(n, e.smoothConstraint);if (e.connectNulls) {for (; 0 < r && of(n[r - 1]); r--) {;}for (; i < r && of(n[i]); i++) {;}}for (; i < r;) {i += sf(t, n, i, r, r, 1, a.min, a.max, e.smooth, e.smoothMonotone, e.connectNulls) + 1;}} }),uf = Ma.extend({ type: \"ec-polygon\", shape: { points: [], stackedOnPoints: [], smooth: 0, stackedOnSmooth: 0, smoothConstraint: !0, smoothMonotone: null, connectNulls: !1 }, brush: Ga(Ma.prototype.brush), buildPath: function buildPath(t, e) {var n = e.points,i = e.stackedOnPoints,r = 0,a = n.length,o = e.smoothMonotone,s = lf(n, e.smoothConstraint),l = lf(i, e.smoothConstraint);if (e.connectNulls) {for (; 0 < a && of(n[a - 1]); a--) {;}for (; r < a && of(n[r]); r++) {;}}for (; r < a;) {var h = sf(t, n, r, a, a, 1, s.min, s.max, e.smooth, o, e.connectNulls);sf(t, i, r + h - 1, h, a, -1, l.min, l.max, e.stackedOnSmooth, o, e.connectNulls), r += h + 1, t.closePath();}} });function cf(t, e, n) {var i = t.getArea(),r = t.getBaseAxis().isHorizontal(),a = i.x,o = i.y,s = i.width,l = i.height,h = n.get(\"lineStyle.width\") || 2,u = new io({ shape: { x: a -= h / 2, y: o -= h / 2, width: s += h, height: l += h } });return e && (u.shape[r ? \"width\" : \"height\"] = 0, ls(u, { shape: { width: s, height: l } }, n)), u;}function df(t, e, n) {var i = t.getArea(),r = new Ya({ shape: { cx: ks(t.cx, 1), cy: ks(t.cy, 1), r0: ks(i.r0, 1), r: ks(i.r, 1), startAngle: i.startAngle, endAngle: i.endAngle, clockwise: i.clockwise } });return e && (r.shape.endAngle = i.startAngle, ls(r, { shape: { endAngle: i.endAngle } }, n)), r;}function ff(t, e) {if (t.length === e.length) {for (var n = 0; n < t.length; n++) {var i = t[n],r = e[n];if (i[0] !== r[0] || i[1] !== r[1]) return;}return !0;}}function pf(t) {return \"number\" == typeof t ? t : t ? .5 : 0;}function gf(t, e, n) {for (var i = e.getBaseAxis(), r = \"x\" === i.dim || \"radius\" === i.dim ? 0 : 1, a = [], o = 0; o < t.length - 1; o++) {var s = t[o + 1],l = t[o];a.push(l);var h = [];switch (n) {case \"end\":h[r] = s[r], h[1 - r] = l[1 - r], a.push(h);break;case \"middle\":var u = (l[r] + s[r]) / 2,c = [];h[r] = c[r] = u, h[1 - r] = l[1 - r], c[1 - r] = s[1 - r], a.push(h), a.push(c);break;default:h[r] = l[r], h[1 - r] = s[1 - r], a.push(h);}}return t[o] && a.push(t[o]), a;}function vf(t, e, n) {var i = t.get(\"showAllSymbol\"),r = \"auto\" === i;if (!i || r) {var a = n.getAxesByScale(\"ordinal\")[0];if (a && (!r || !function (t, e) {var n = t.getExtent(),i = Math.abs(n[1] - n[0]) / t.scale.count();isNaN(i) && (i = 0);for (var r = e.count(), a = Math.max(1, Math.round(r / 5)), o = 0; o < r; o += a) {if (1.5 * Nd.getSymbolSize(e, o)[t.isHorizontal() ? 1 : 0] > i) return !1;}return !0;}(a, e))) {var o = e.mapDimension(a.dim),s = {};return D(a.getViewLabels(), function (t) {s[t.tickValue] = 1;}), function (t) {return !s.hasOwnProperty(e.get(o, t));};}}}function mf(t, e, n) {if (\"cartesian2d\" !== t.type) return df(t, e, n);var i = t.getBaseAxis().isHorizontal(),r = cf(t, e, n);if (!n.get(\"clip\", !0)) {var a = r.shape,o = Math.max(a.width, a.height);i ? (a.y -= o, a.height += 2 * o) : (a.x -= o, a.width += 2 * o);}return r;}Uh.extend({ type: \"line\", init: function init() {var t = new Ye(),e = new Ud();this.group.add(e.group), this._symbolDraw = e, this._lineGroup = t;}, render: function render(t, e, n) {var i = t.coordinateSystem,r = this.group,a = t.getData(),o = t.getModel(\"lineStyle\"),s = t.getModel(\"areaStyle\"),l = a.mapArray(a.getItemLayout),h = \"polar\" === i.type,u = this._coordSys,c = this._symbolDraw,d = this._polyline,f = this._polygon,p = this._lineGroup,g = t.get(\"animation\"),v = !s.isEmpty(),m = s.get(\"origin\"),y = function (t, e, n) {if (!n.valueDim) return [];for (var i = [], r = 0, a = e.count(); r < a; r++) {i.push(Kd(n, t, e, r));}return i;}(i, a, $d(i, a, m)),_ = t.get(\"showSymbol\"),x = _ && !h && vf(t, a, i),w = this._data;w && w.eachItemGraphicEl(function (t, e) {t.__temp && (r.remove(t), w.setItemGraphicEl(e, null));}), _ || c.remove(), r.add(p);var b,S = !h && t.get(\"step\");i && i.getArea && (null != (b = i.getArea()).width ? (b.x -= .1, b.y -= .1, b.width += .2, b.height += .2) : b.r0 && (b.r0 -= .5, b.r1 += .5)), d && u.type === i.type && S === this._step ? (v && !f ? f = this._newPolygon(l, y, i, g) : f && !v && (p.remove(f), f = this._polygon = null), p.setClipPath(mf(i, !1, t)), _ && c.updateData(a, { isIgnore: x, clipShape: b }), a.eachItemGraphicEl(function (t) {t.stopAnimation(!0);}), ff(this._stackedOnPoints, y) && ff(this._points, l) || (g ? this._updateAnimation(a, y, i, n, S, m) : (S && (l = gf(l, i, S), y = gf(y, i, S)), d.setShape({ points: l }), f && f.setShape({ points: l, stackedOnPoints: y })))) : (_ && c.updateData(a, { isIgnore: x, clipShape: b }), S && (l = gf(l, i, S), y = gf(y, i, S)), d = this._newPolyline(l, i, g), v && (f = this._newPolygon(l, y, i, g)), p.setClipPath(mf(i, !0, t)));var M = function (t, e) {var n = t.getVisual(\"visualMeta\");if (n && n.length && t.count() && \"cartesian2d\" === e.type) {for (var i, r, a = n.length - 1; 0 <= a; a--) {var o = n[a].dimension,s = t.dimensions[o],l = t.getDimensionInfo(s);if (\"x\" === (i = l && l.coordDim) || \"y\" === i) {r = n[a];break;}}if (r) {var h = e.getAxis(i),u = A(r.stops, function (t) {return { coord: h.toGlobalCoord(h.dataToCoord(t.value)), color: t.color };}),c = u.length,d = r.outerColors.slice();c && u[0].coord > u[c - 1].coord && (u.reverse(), d.reverse());var f = u[0].coord - 10,p = u[c - 1].coord + 10,g = p - f;if (g < .001) return \"transparent\";D(u, function (t) {t.offset = (t.coord - f) / g;}), u.push({ offset: c ? u[c - 1].offset : .5, color: d[1] || \"transparent\" }), u.unshift({ offset: c ? u[0].offset : .5, color: d[0] || \"transparent\" });var v = new fo(0, 0, 0, 0, u, !0);return v[i] = f, v[i + \"2\"] = p, v;}}}(a, i) || a.getVisual(\"color\");d.useStyle(k(o.getLineStyle(), { fill: \"none\", stroke: M, lineJoin: \"bevel\" }));var I = t.get(\"smooth\");if (I = pf(t.get(\"smooth\")), d.setShape({ smooth: I, smoothMonotone: t.get(\"smoothMonotone\"), connectNulls: t.get(\"connectNulls\") }), f) {var T = a.getCalculationInfo(\"stackedOnSeries\"),C = 0;f.useStyle(k(s.getAreaStyle(), { fill: M, opacity: .7, lineJoin: \"bevel\" })), T && (C = pf(T.get(\"smooth\"))), f.setShape({ smooth: I, stackedOnSmooth: C, smoothMonotone: t.get(\"smoothMonotone\"), connectNulls: t.get(\"connectNulls\") });}this._data = a, this._coordSys = i, this._stackedOnPoints = y, this._points = l, this._step = S, this._valueOrigin = m;}, dispose: function dispose() {}, highlight: function highlight(t, e, n, i) {var r = t.getData(),a = qi(r, i);if (!(a instanceof Array) && null != a && 0 <= a) {var o = r.getItemGraphicEl(a);if (!o) {var s = r.getItemLayout(a);if (!s) return;(o = new Nd(r, a)).position = s, o.setZ(t.get(\"zlevel\"), t.get(\"z\")), o.ignore = isNaN(s[0]) || isNaN(s[1]), o.__temp = !0, r.setItemGraphicEl(a, o), o.stopSymbolAnimation(!0), this.group.add(o);}o.highlight();} else Uh.prototype.highlight.call(this, t, e, n, i);}, downplay: function downplay(t, e, n, i) {var r = t.getData(),a = qi(r, i);if (null != a && 0 <= a) {var o = r.getItemGraphicEl(a);o && (o.__temp ? (r.setItemGraphicEl(a, null), this.group.remove(o)) : o.downplay());} else Uh.prototype.downplay.call(this, t, e, n, i);}, _newPolyline: function _newPolyline(t) {var e = this._polyline;return e && this._lineGroup.remove(e), e = new hf({ shape: { points: t }, silent: !0, z2: 10 }), this._lineGroup.add(e), this._polyline = e;}, _newPolygon: function _newPolygon(t, e) {var n = this._polygon;return n && this._lineGroup.remove(n), n = new uf({ shape: { points: t, stackedOnPoints: e }, silent: !0 }), this._lineGroup.add(n), this._polygon = n;}, _updateAnimation: function _updateAnimation(t, e, n, i, r, a) {var o = this._polyline,s = this._polygon,l = t.hostModel,h = function (t, e, n, i, r, a, o, s) {for (var l = function (t, e) {var n = [];return e.diff(t).add(function (t) {n.push({ cmd: \"+\", idx: t });}).update(function (t, e) {n.push({ cmd: \"=\", idx: e, idx1: t });}).remove(function (t) {n.push({ cmd: \"-\", idx: t });}).execute(), n;}(t, e), h = [], u = [], c = [], d = [], f = [], p = [], g = [], v = $d(r, e, o), m = $d(a, t, s), y = 0; y < l.length; y++) {var _ = l[y],x = !0;switch (_.cmd) {case \"=\":var w = t.getItemLayout(_.idx),b = e.getItemLayout(_.idx1);(isNaN(w[0]) || isNaN(w[1])) && (w = b.slice()), h.push(w), u.push(b), c.push(n[_.idx]), d.push(i[_.idx1]), g.push(e.getRawIndex(_.idx1));break;case \"+\":var S = _.idx;h.push(r.dataToPoint([e.get(v.dataDimsForPoint[0], S), e.get(v.dataDimsForPoint[1], S)])), u.push(e.getItemLayout(S).slice()), c.push(Kd(v, r, e, S)), d.push(i[S]), g.push(e.getRawIndex(S));break;case \"-\":S = _.idx;var M = t.getRawIndex(S);M !== S ? (h.push(t.getItemLayout(S)), u.push(a.dataToPoint([t.get(m.dataDimsForPoint[0], S), t.get(m.dataDimsForPoint[1], S)])), c.push(n[S]), d.push(Kd(m, a, t, S)), g.push(M)) : x = !1;}x && (f.push(_), p.push(p.length));}p.sort(function (t, e) {return g[t] - g[e];});var I = [],T = [],C = [],k = [],D = [];for (y = 0; y < p.length; y++) {S = p[y];I[y] = h[S], T[y] = u[S], C[y] = c[S], k[y] = d[S], D[y] = f[S];}return { current: I, next: T, stackedOnCurrent: C, stackedOnNext: k, status: D };}(this._data, t, this._stackedOnPoints, e, this._coordSys, n, this._valueOrigin, a),u = h.current,c = h.stackedOnCurrent,d = h.next,f = h.stackedOnNext;r && (u = gf(h.current, n, r), c = gf(h.stackedOnCurrent, n, r), d = gf(h.next, n, r), f = gf(h.stackedOnNext, n, r)), o.shape.__points = h.current, o.shape.points = u, ss(o, { shape: { points: d } }, l), s && (s.setShape({ points: u, stackedOnPoints: c }), ss(s, { shape: { points: d, stackedOnPoints: f } }, l));for (var p = [], g = h.status, v = 0; v < g.length; v++) {if (\"=\" === g[v].cmd) {var m = t.getItemGraphicEl(g[v].idx1);m && p.push({ el: m, ptIdx: v });}}o.animators && o.animators.length && o.animators[0].during(function () {for (var t = 0; t < p.length; t++) {p[t].el.attr(\"position\", o.shape.__points[p[t].ptIdx]);}});}, remove: function remove(t) {var n = this.group,i = this._data;this._lineGroup.removeAll(), this._symbolDraw.remove(!0), i && i.eachItemGraphicEl(function (t, e) {t.__temp && (n.remove(t), i.setItemGraphicEl(e, null));}), this._polyline = this._polygon = this._coordSys = this._points = this._stackedOnPoints = this._data = null;} });function yf(t, e) {return Math.round(t.length / 2);}var _f = { average: function average(t) {for (var e = 0, n = 0, i = 0; i < t.length; i++) {isNaN(t[i]) || (e += t[i], n++);}return 0 === n ? NaN : e / n;}, sum: function sum(t) {for (var e = 0, n = 0; n < t.length; n++) {e += t[n] || 0;}return e;}, max: function max(t) {for (var e = -1 / 0, n = 0; n < t.length; n++) {t[n] > e && (e = t[n]);}return isFinite(e) ? e : NaN;}, min: function min(t) {for (var e = 1 / 0, n = 0; n < t.length; n++) {t[n] < e && (e = t[n]);}return isFinite(e) ? e : NaN;}, nearest: function nearest(t) {return t[0];} };function xf(t) {this._setting = t || {}, this._extent = [1 / 0, -1 / 0], this._interval = 0, this.init && this.init.apply(this, arguments);}function wf(t) {this.categories = t.categories || [], this._needCollect = t.needCollect, this._deduplication = t.deduplication, this._map;}xf.prototype.parse = function (t) {return t;}, xf.prototype.getSetting = function (t) {return this._setting[t];}, xf.prototype.contain = function (t) {var e = this._extent;return t >= e[0] && t <= e[1];}, xf.prototype.normalize = function (t) {var e = this._extent;return e[1] === e[0] ? .5 : (t - e[0]) / (e[1] - e[0]);}, xf.prototype.scale = function (t) {var e = this._extent;return t * (e[1] - e[0]) + e[0];}, xf.prototype.unionExtent = function (t) {var e = this._extent;t[0] < e[0] && (e[0] = t[0]), t[1] > e[1] && (e[1] = t[1]);}, xf.prototype.unionExtentFromData = function (t, e) {this.unionExtent(t.getApproximateExtent(e));}, xf.prototype.getExtent = function () {return this._extent.slice();}, xf.prototype.setExtent = function (t, e) {var n = this._extent;isNaN(t) || (n[0] = t), isNaN(e) || (n[1] = e);}, xf.prototype.isBlank = function () {return this._isBlank;}, xf.prototype.setBlank = function (t) {this._isBlank = t;}, xf.prototype.getLabel = null, nr(xf), sr(xf, { registerWhenExtend: !0 }), wf.createByAxisModel = function (t) {var e = t.option,n = e.data,i = n && A(n, Mf);return new wf({ categories: i, needCollect: !i, deduplication: !1 !== e.dedplication });};var bf = wf.prototype;function Sf(t) {return t._map || (t._map = Z(t.categories));}function Mf(t) {return O(t) && null != t.value ? t.value : t + \"\";}bf.getOrdinal = function (t) {return Sf(this).get(t);}, bf.parseAndCollect = function (t) {var e,n = this._needCollect;if (\"string\" != typeof t && !n) return t;if (n && !this._deduplication) return e = this.categories.length, this.categories[e] = t, e;var i = Sf(this);return null == (e = i.get(t)) && (n ? (e = this.categories.length, this.categories[e] = t, i.set(t, e)) : e = NaN), e;};var If = xf.prototype,Tf = xf.extend({ type: \"ordinal\", init: function init(t, e) {t && !C(t) || (t = new wf({ categories: t })), this._ordinalMeta = t, this._extent = e || [0, t.categories.length - 1];}, parse: function parse(t) {return \"string\" == typeof t ? this._ordinalMeta.getOrdinal(t) : Math.round(t);}, contain: function contain(t) {return t = this.parse(t), If.contain.call(this, t) && null != this._ordinalMeta.categories[t];}, normalize: function normalize(t) {return If.normalize.call(this, this.parse(t));}, scale: function scale(t) {return Math.round(If.scale.call(this, t));}, getTicks: function getTicks() {for (var t = [], e = this._extent, n = e[0]; n <= e[1];) {t.push(n), n++;}return t;}, getLabel: function getLabel(t) {if (!this.isBlank()) return this._ordinalMeta.categories[t];}, count: function count() {return this._extent[1] - this._extent[0] + 1;}, unionExtentFromData: function unionExtentFromData(t, e) {this.unionExtent(t.getApproximateExtent(e));}, getOrdinalMeta: function getOrdinalMeta() {return this._ordinalMeta;}, niceTicks: $, niceExtent: $ });Tf.create = function () {return new Tf();};var Cf = ks;function kf(t) {return Ds(t) + 2;}function Df(t, e, n) {t[e] = Math.max(Math.min(t[e], n[1]), n[0]);}function Af(t, e) {isFinite(t[0]) || (t[0] = e[0]), isFinite(t[1]) || (t[1] = e[1]), Df(t, 0, e), Df(t, 1, e), t[0] > t[1] && (t[0] = t[1]);}var Lf = ks,Pf = xf.extend({ type: \"interval\", _interval: 0, _intervalPrecision: 2, setExtent: function setExtent(t, e) {var n = this._extent;isNaN(t) || (n[0] = parseFloat(t)), isNaN(e) || (n[1] = parseFloat(e));}, unionExtent: function unionExtent(t) {var e = this._extent;t[0] < e[0] && (e[0] = t[0]), t[1] > e[1] && (e[1] = t[1]), Pf.prototype.setExtent.call(this, e[0], e[1]);}, getInterval: function getInterval() {return this._interval;}, setInterval: function setInterval(t) {this._interval = t, this._niceExtent = this._extent.slice(), this._intervalPrecision = kf(t);}, getTicks: function getTicks() {return function (t, e, n, i) {var r = [];if (!t) return r;e[0] < n[0] && r.push(e[0]);for (var a = n[0]; a <= n[1] && (r.push(a), (a = Cf(a + t, i)) !== r[r.length - 1]);) {if (1e4 < r.length) return [];}return e[1] > (r.length ? r[r.length - 1] : n[1]) && r.push(e[1]), r;}(this._interval, this._extent, this._niceExtent, this._intervalPrecision);}, getLabel: function getLabel(t, e) {if (null == t) return \"\";var n = e && e.precision;return null == n ? n = Ds(t) || 0 : \"auto\" === n && (n = this._intervalPrecision), Bs(t = Lf(t, n, !0));}, niceTicks: function niceTicks(t, e, n) {t = t || 5;var i = this._extent,r = i[1] - i[0];if (isFinite(r)) {r < 0 && (r = -r, i.reverse());var a = function (t, e, n, i) {var r = {},a = t[1] - t[0],o = r.interval = Ns(a / e, !0);null != n && o < n && (o = r.interval = n), null != i && i < o && (o = r.interval = i);var s = r.intervalPrecision = kf(o);return Af(r.niceTickExtent = [Cf(Math.ceil(t[0] / o) * o, s), Cf(Math.floor(t[1] / o) * o, s)], t), r;}(i, t, e, n);this._intervalPrecision = a.intervalPrecision, this._interval = a.interval, this._niceExtent = a.niceTickExtent;}}, niceExtent: function niceExtent(t) {var e = this._extent;if (e[0] === e[1]) if (0 !== e[0]) {var n = e[0];t.fixMax || (e[1] += n / 2), e[0] -= n / 2;} else e[1] = 1;var i = e[1] - e[0];isFinite(i) || (e[0] = 0, e[1] = 1), this.niceTicks(t.splitNumber, t.minInterval, t.maxInterval);var r = this._interval;t.fixMin || (e[0] = Lf(Math.floor(e[0] / r) * r)), t.fixMax || (e[1] = Lf(Math.ceil(e[1] / r) * r));} });Pf.create = function () {return new Pf();};var Of = \"__ec_stack_\",Ef = \"undefined\" != typeof Float32Array ? Float32Array : Array;function Nf(t) {return t.get(\"stack\") || Of + t.seriesIndex;}function Bf(t) {return t.dim + t.index;}function zf(t, e) {var n = [];return e.eachSeriesByType(t, function (t) {Wf(t) && !Hf(t) && n.push(t);}), n;}function Rf(t) {var g = function (t) {var l = {};D(t, function (t) {var e = t.coordinateSystem.getBaseAxis();if (\"time\" === e.type || \"value\" === e.type) for (var n = t.getData(), i = e.dim + \"_\" + e.index, r = n.mapDimension(e.dim), a = 0, o = n.count(); a < o; ++a) {var s = n.get(r, a);l[i] ? l[i].push(s) : l[i] = [s];}});var e = [];for (var n in l) {if (l.hasOwnProperty(n)) {var i = l[n];if (i) {i.sort(function (t, e) {return t - e;});for (var r = null, a = 1; a < i.length; ++a) {var o = i[a] - i[a - 1];0 < o && (r = null === r ? o : Math.min(r, o));}e[n] = r;}}}return e;}(t),v = [];return D(t, function (t) {var e,n = t.coordinateSystem.getBaseAxis(),i = n.getExtent();if (\"category\" === n.type) e = n.getBandWidth();else if (\"value\" === n.type || \"time\" === n.type) {var r = n.dim + \"_\" + n.index,a = g[r],o = Math.abs(i[1] - i[0]),s = n.scale.getExtent(),l = Math.abs(s[1] - s[0]);e = a ? o / l * a : o;} else {var h = t.getData();e = Math.abs(i[1] - i[0]) / h.count();}var u = Cs(t.get(\"barWidth\"), e),c = Cs(t.get(\"barMaxWidth\"), e),d = Cs(t.get(\"barMinWidth\") || 1, e),f = t.get(\"barGap\"),p = t.get(\"barCategoryGap\");v.push({ bandWidth: e, barWidth: u, barMaxWidth: c, barMinWidth: d, barGap: f, barCategoryGap: p, axisKey: Bf(n), stackId: Nf(t) });}), function (t) {var d = {};D(t, function (t, e) {var n = t.axisKey,i = t.bandWidth,r = d[n] || { bandWidth: i, remainedWidth: i, autoWidthCount: 0, categoryGap: \"20%\", gap: \"30%\", stacks: {} },a = r.stacks;d[n] = r;var o = t.stackId;a[o] || r.autoWidthCount++, a[o] = a[o] || { width: 0, maxWidth: 0 };var s = t.barWidth;s && !a[o].width && (a[o].width = s, s = Math.min(r.remainedWidth, s), r.remainedWidth -= s);var l = t.barMaxWidth;l && (a[o].maxWidth = l);var h = t.barMinWidth;h && (a[o].minWidth = h);var u = t.barGap;null != u && (r.gap = u);var c = t.barCategoryGap;null != c && (r.categoryGap = c);});var f = {};return D(d, function (t, n) {f[n] = {};var e = t.stacks,i = t.bandWidth,r = Cs(t.categoryGap, i),a = Cs(t.gap, 1),o = t.remainedWidth,s = t.autoWidthCount,l = (o - r) / (s + (s - 1) * a);l = Math.max(l, 0), D(e, function (t) {var e = t.maxWidth,n = t.minWidth;if (t.width) {i = t.width;e && (i = Math.min(i, e)), n && (i = Math.max(i, n)), t.width = i, o -= i, s--;} else {var i = l;e && e < i && (i = Math.min(e, o)), n && i < n && (i = n), i !== l && (t.width = i, o -= i, s--);}}), l = (o - r) / (s + (s - 1) * a), l = Math.max(l, 0);var h,u = 0;D(e, function (t, e) {t.width || (t.width = l), u += (h = t).width * (1 + a);}), h && (u -= h.width * a);var c = -u / 2;D(e, function (t, e) {f[n][e] = f[n][e] || { bandWidth: i, offset: c, width: t.width }, c += t.width * (1 + a);});}), f;}(v);}function Ff(t, e, n) {if (t && e) {var i = t[Bf(e)];return null != i && null != n && (i = i[Nf(n)]), i;}}var Vf = { seriesType: \"bar\", plan: Hh(), reset: function reset(t) {if (Wf(t) && Hf(t)) {var e = t.getData(),u = t.coordinateSystem,c = u.getBaseAxis(),d = u.getOtherAxis(c),f = e.mapDimension(d.dim),p = e.mapDimension(c.dim),g = d.isHorizontal(),v = g ? 0 : 1,m = Ff(Rf([t]), c, t).width;return .5 < m || (m = .5), { progress: function progress(t, e) {var n,i = t.count,r = new Ef(2 * i),a = new Ef(i),o = [],s = [],l = 0,h = 0;for (; null != (n = t.next());) {s[v] = e.get(f, n), s[1 - v] = e.get(p, n), o = u.dataToPoint(s, null, o), r[l++] = o[0], r[l++] = o[1], a[h++] = n;}e.setLayout({ largePoints: r, largeDataIndices: a, barWidth: m, valueAxisStart: Gf(c, d, !1), valueAxisHorizontal: g });} };}} };function Wf(t) {return t.coordinateSystem && \"cartesian2d\" === t.coordinateSystem.type;}function Hf(t) {return t.pipelineContext && t.pipelineContext.large;}function Gf(t, e) {return e.toGlobalCoord(e.dataToCoord(\"log\" === e.type ? 1 : 0));}var Xf = Pf.prototype,Uf = Math.ceil,Yf = Math.floor,qf = 36e5,jf = 864e5,Zf = Pf.extend({ type: \"time\", getLabel: function getLabel(t) {var e = this._stepLvl,n = new Date(t);return Us(e[0], n, this.getSetting(\"useUTC\"));}, niceExtent: function niceExtent(t) {var e = this._extent;if (e[0] === e[1] && (e[0] -= jf, e[1] += jf), e[1] === -1 / 0 && e[0] === 1 / 0) {var n = new Date();e[1] = +new Date(n.getFullYear(), n.getMonth(), n.getDate()), e[0] = e[1] - jf;}this.niceTicks(t.splitNumber, t.minInterval, t.maxInterval);var i = this._interval;t.fixMin || (e[0] = ks(Yf(e[0] / i) * i)), t.fixMax || (e[1] = ks(Uf(e[1] / i) * i));}, niceTicks: function niceTicks(t, e, n) {t = t || 10;var i = this._extent,r = i[1] - i[0],a = r / t;null != e && a < e && (a = e), null != n && n < a && (a = n);var o = $f.length,s = function (t, e, n, i) {for (; n < i;) {var r = n + i >>> 1;t[r][1] < e ? n = 1 + r : i = r;}return n;}($f, a, 0, o),l = $f[Math.min(s, o - 1)],h = l[1];\"year\" === l[0] && (h *= Ns(r / h / t, !0));var u = this.getSetting(\"useUTC\") ? 0 : 60 * new Date(+i[0] || +i[1]).getTimezoneOffset() * 1e3,c = [Math.round(Uf((i[0] - u) / h) * h + u), Math.round(Yf((i[1] - u) / h) * h + u)];Af(c, i), this._stepLvl = l, this._interval = h, this._niceExtent = c;}, parse: function parse(t) {return +Os(t);} });D([\"contain\", \"normalize\"], function (e) {Zf.prototype[e] = function (t) {return Xf[e].call(this, this.parse(t));};});var $f = [[\"hh:mm:ss\", 1e3], [\"hh:mm:ss\", 5e3], [\"hh:mm:ss\", 1e4], [\"hh:mm:ss\", 15e3], [\"hh:mm:ss\", 3e4], [\"hh:mm\\nMM-dd\", 6e4], [\"hh:mm\\nMM-dd\", 3e5], [\"hh:mm\\nMM-dd\", 6e5], [\"hh:mm\\nMM-dd\", 9e5], [\"hh:mm\\nMM-dd\", 18e5], [\"hh:mm\\nMM-dd\", qf], [\"hh:mm\\nMM-dd\", 72e5], [\"hh:mm\\nMM-dd\", 6 * qf], [\"hh:mm\\nMM-dd\", 432e5], [\"MM-dd\\nyyyy\", jf], [\"MM-dd\\nyyyy\", 2 * jf], [\"MM-dd\\nyyyy\", 3 * jf], [\"MM-dd\\nyyyy\", 4 * jf], [\"MM-dd\\nyyyy\", 5 * jf], [\"MM-dd\\nyyyy\", 6 * jf], [\"week\", 7 * jf], [\"MM-dd\\nyyyy\", 864e6], [\"week\", 14 * jf], [\"week\", 21 * jf], [\"month\", 31 * jf], [\"week\", 42 * jf], [\"month\", 62 * jf], [\"week\", 70 * jf], [\"quarter\", 95 * jf], [\"month\", 31 * jf * 4], [\"month\", 13392e6], [\"half-year\", 16416e6], [\"month\", 31 * jf * 8], [\"month\", 26784e6], [\"year\", 380 * jf]];Zf.create = function (t) {return new Zf({ useUTC: t.ecModel.get(\"useUTC\") });};var Kf = xf.prototype,Qf = Pf.prototype,Jf = Ds,tp = ks,ep = Math.floor,np = Math.ceil,ip = Math.pow,rp = Math.log,ap = xf.extend({ type: \"log\", base: 10, $constructor: function $constructor() {xf.apply(this, arguments), this._originalScale = new Pf();}, getTicks: function getTicks() {var n = this._originalScale,i = this._extent,r = n.getExtent();return A(Qf.getTicks.call(this), function (t) {var e = ks(ip(this.base, t));return e = t === i[0] && n.__fixMin ? op(e, r[0]) : e, e = t === i[1] && n.__fixMax ? op(e, r[1]) : e;}, this);}, getLabel: Qf.getLabel, scale: function scale(t) {return t = Kf.scale.call(this, t), ip(this.base, t);}, setExtent: function setExtent(t, e) {var n = this.base;t = rp(t) / rp(n), e = rp(e) / rp(n), Qf.setExtent.call(this, t, e);}, getExtent: function getExtent() {var t = this.base,e = Kf.getExtent.call(this);e[0] = ip(t, e[0]), e[1] = ip(t, e[1]);var n = this._originalScale,i = n.getExtent();return n.__fixMin && (e[0] = op(e[0], i[0])), n.__fixMax && (e[1] = op(e[1], i[1])), e;}, unionExtent: function unionExtent(t) {this._originalScale.unionExtent(t);var e = this.base;t[0] = rp(t[0]) / rp(e), t[1] = rp(t[1]) / rp(e), Kf.unionExtent.call(this, t);}, unionExtentFromData: function unionExtentFromData(t, e) {this.unionExtent(t.getApproximateExtent(e));}, niceTicks: function niceTicks(t) {t = t || 10;var e = this._extent,n = e[1] - e[0];if (!(n == 1 / 0 || n <= 0)) {var i = function (t) {return Math.pow(10, Es(t));}(n);for (t / n * i <= .5 && (i *= 10); !isNaN(i) && Math.abs(i) < 1 && 0 < Math.abs(i);) {i *= 10;}var r = [ks(np(e[0] / i) * i), ks(ep(e[1] / i) * i)];this._interval = i, this._niceExtent = r;}}, niceExtent: function niceExtent(t) {Qf.niceExtent.call(this, t);var e = this._originalScale;e.__fixMin = t.fixMin, e.__fixMax = t.fixMax;} });function op(t, e) {return tp(t, Jf(e));}function sp(t, e) {var n,i,r,a = t.type,o = e.getMin(),s = e.getMax(),l = null != o,h = null != s,u = t.getExtent();\"ordinal\" === a ? n = e.getCategories().length : (C(i = e.get(\"boundaryGap\")) || (i = [i || 0, i || 0]), \"boolean\" == typeof i[0] && (i = [0, 0]), i[0] = Cs(i[0], 1), i[1] = Cs(i[1], 1), r = u[1] - u[0] || Math.abs(u[0])), null == o && (o = \"ordinal\" === a ? n ? 0 : NaN : u[0] - i[0] * r), null == s && (s = \"ordinal\" === a ? n ? n - 1 : NaN : u[1] + i[1] * r), \"dataMin\" === o ? o = u[0] : \"function\" == typeof o && (o = o({ min: u[0], max: u[1] })), \"dataMax\" === s ? s = u[1] : \"function\" == typeof s && (s = s({ min: u[0], max: u[1] })), null != o && isFinite(o) || (o = NaN), null != s && isFinite(s) || (s = NaN), t.setBlank(z(o) || z(s) || \"ordinal\" === a && !t.getOrdinalMeta().categories.length), e.getNeedCrossZero() && (0 < o && 0 < s && !l && (o = 0), o < 0 && s < 0 && !h && (s = 0));var c = e.ecModel;if (c && \"time\" === a) {var d,f = zf(\"bar\", c);if (D(f, function (t) {d |= t.getBaseAxis() === e.axis;}), d) {var p = Rf(f),g = function (t, e, n, i) {var r = n.axis.getExtent(),a = r[1] - r[0],o = Ff(i, n.axis);if (void 0 === o) return { min: t, max: e };var s = 1 / 0;D(o, function (t) {s = Math.min(t.offset, s);});var l = -1 / 0;D(o, function (t) {l = Math.max(t.offset + t.width, l);}), s = Math.abs(s), l = Math.abs(l);var h = s + l,u = e - t,c = u / (1 - (s + l) / a) - u;return { min: t -= s / h * c, max: e += l / h * c };}(o, s, e, p);o = g.min, s = g.max;}}return [o, s];}function lp(t, e) {var n = sp(t, e),i = null != e.getMin(),r = null != e.getMax(),a = e.get(\"splitNumber\");\"log\" === t.type && (t.base = e.get(\"logBase\"));var o = t.type;t.setExtent(n[0], n[1]), t.niceExtent({ splitNumber: a, fixMin: i, fixMax: r, minInterval: \"interval\" === o || \"time\" === o ? e.get(\"minInterval\") : null, maxInterval: \"interval\" === o || \"time\" === o ? e.get(\"maxInterval\") : null });var s = e.get(\"interval\");null != s && t.setInterval && t.setInterval(s);}function hp(n) {var e,i = n.getLabelModel().get(\"formatter\"),r = \"category\" === n.type ? n.scale.getExtent()[0] : null;return \"string\" == typeof i ? (e = i, i = function i(t) {return t = n.scale.getLabel(t), e.replace(\"{value}\", null != t ? t : \"\");}) : \"function\" == typeof i ? function (t, e) {return null != r && (e = t - r), i(function (t, e) {return \"category\" === t.type ? t.scale.getLabel(e) : e;}(n, t), e);} : function (t) {return n.scale.getLabel(t);};}function up(t) {var e = t.get(\"interval\");return null == e ? \"auto\" : e;}function cp(t) {return \"category\" === t.type && 0 === up(t.getLabelModel());}function dp(t) {return this._axes[t];}D([\"contain\", \"normalize\"], function (e) {ap.prototype[e] = function (t) {return t = rp(t) / rp(this.base), Kf[e].call(this, t);};}), ap.create = function () {return new ap();};function fp(t) {this._axes = {}, this._dimList = [], this.name = t || \"\";}function pp(t) {fp.call(this, t);}fp.prototype = { constructor: fp, type: \"cartesian\", getAxis: function getAxis(t) {return this._axes[t];}, getAxes: function getAxes() {return A(this._dimList, dp, this);}, getAxesByScale: function getAxesByScale(e) {return e = e.toLowerCase(), x(this.getAxes(), function (t) {return t.scale.type === e;});}, addAxis: function addAxis(t) {var e = t.dim;this._axes[e] = t, this._dimList.push(e);}, dataToCoord: function dataToCoord(t) {return this._dataCoordConvert(t, \"dataToCoord\");}, coordToData: function coordToData(t) {return this._dataCoordConvert(t, \"coordToData\");}, _dataCoordConvert: function _dataCoordConvert(t, e) {for (var n = this._dimList, i = t instanceof Array ? [] : {}, r = 0; r < n.length; r++) {var a = n[r],o = this._axes[a];i[a] = o[e](t[a]);}return i;} }, pp.prototype = { constructor: pp, type: \"cartesian2d\", dimensions: [\"x\", \"y\"], getBaseAxis: function getBaseAxis() {return this.getAxesByScale(\"ordinal\")[0] || this.getAxesByScale(\"time\")[0] || this.getAxis(\"x\");}, containPoint: function containPoint(t) {var e = this.getAxis(\"x\"),n = this.getAxis(\"y\");return e.contain(e.toLocalCoord(t[0])) && n.contain(n.toLocalCoord(t[1]));}, containData: function containData(t) {return this.getAxis(\"x\").containData(t[0]) && this.getAxis(\"y\").containData(t[1]);}, dataToPoint: function dataToPoint(t, e, n) {var i = this.getAxis(\"x\"),r = this.getAxis(\"y\");return (n = n || [])[0] = i.toGlobalCoord(i.dataToCoord(t[0])), n[1] = r.toGlobalCoord(r.dataToCoord(t[1])), n;}, clampData: function clampData(t, e) {var n = this.getAxis(\"x\").scale,i = this.getAxis(\"y\").scale,r = n.getExtent(),a = i.getExtent(),o = n.parse(t[0]),s = i.parse(t[1]);return (e = e || [])[0] = Math.min(Math.max(Math.min(r[0], r[1]), o), Math.max(r[0], r[1])), e[1] = Math.min(Math.max(Math.min(a[0], a[1]), s), Math.max(a[0], a[1])), e;}, pointToData: function pointToData(t, e) {var n = this.getAxis(\"x\"),i = this.getAxis(\"y\");return (e = e || [])[0] = n.coordToData(n.toLocalCoord(t[0])), e[1] = i.coordToData(i.toLocalCoord(t[1])), e;}, getOtherAxis: function getOtherAxis(t) {return this.getAxis(\"x\" === t.dim ? \"y\" : \"x\");}, getArea: function getArea() {var t = this.getAxis(\"x\").getGlobalExtent(),e = this.getAxis(\"y\").getGlobalExtent(),n = Math.min(t[0], t[1]),i = Math.min(e[0], e[1]);return new Ue(n, i, Math.max(t[0], t[1]) - n, Math.max(e[0], e[1]) - i);} }, y(pp, fp);var gp = ji();function vp(t) {return \"category\" === t.type ? function (t) {var e = t.getLabelModel(),n = yp(t, e);return !e.get(\"show\") || t.scale.isBlank() ? { labels: [], labelCategoryInterval: n.labelCategoryInterval } : n;}(t) : function (n) {var t = n.scale.getTicks(),i = hp(n);return { labels: A(t, function (t, e) {return { formattedLabel: i(t, e), rawLabel: n.scale.getLabel(t), tickValue: t };}) };}(t);}function mp(t, e) {return \"category\" === t.type ? function (t, e) {var n,i,r = _p(t, \"ticks\"),a = up(e),o = xp(r, a);if (o) return o;e.get(\"show\") && !t.scale.isBlank() || (n = []);if (T(a)) n = Sp(t, a, !0);else if (\"auto\" === a) {var s = yp(t, t.getLabelModel());i = s.labelCategoryInterval, n = A(s.labels, function (t) {return t.tickValue;});} else n = bp(t, i = a, !0);return wp(r, a, { ticks: n, tickCategoryInterval: i });}(t, e) : { ticks: t.scale.getTicks() };}function yp(t, e) {var n,i = _p(t, \"labels\"),r = up(e),a = xp(i, r);return a || wp(i, r, { labels: T(r) ? Sp(t, r) : bp(t, n = \"auto\" === r ? function (t) {var e = gp(t).autoInterval;return null != e ? e : gp(t).autoInterval = t.calculateCategoryInterval();}(t) : r), labelCategoryInterval: n });}function _p(t, e) {return gp(t)[e] || (gp(t)[e] = []);}function xp(t, e) {for (var n = 0; n < t.length; n++) {if (t[n].key === e) return t[n].value;}}function wp(t, e, n) {return t.push({ key: e, value: n }), n;}function bp(t, e, n) {var i = hp(t),r = t.scale,a = r.getExtent(),o = t.getLabelModel(),s = [],l = Math.max((e || 0) + 1, 1),h = a[0],u = r.count();0 !== h && 1 < l && 2 < u / l && (h = Math.round(Math.ceil(h / l) * l));var c = cp(t),d = o.get(\"showMinLabel\") || c,f = o.get(\"showMaxLabel\") || c;d && h !== a[0] && g(a[0]);for (var p = h; p <= a[1]; p += l) {g(p);}function g(t) {s.push(n ? t : { formattedLabel: i(t), rawLabel: r.getLabel(t), tickValue: t });}return f && p - l !== a[1] && g(a[1]), s;}function Sp(t, n, i) {var r = t.scale,a = hp(t),o = [];return D(r.getTicks(), function (t) {var e = r.getLabel(t);n(t, e) && o.push(i ? t : { formattedLabel: a(t), rawLabel: e, tickValue: t });}), o;}function Mp(t, e, n) {this.dim = t, this.scale = e, this._extent = n || [0, 0], this.inverse = !1, this.onBand = !1;}var Ip = [0, 1];function Tp(t, e) {var n = (t[1] - t[0]) / e / 2;t[0] += n, t[1] -= n;}Mp.prototype = { constructor: Mp, contain: function contain(t) {var e = this._extent,n = Math.min(e[0], e[1]),i = Math.max(e[0], e[1]);return n <= t && t <= i;}, containData: function containData(t) {return this.contain(this.dataToCoord(t));}, getExtent: function getExtent() {return this._extent.slice();}, getPixelPrecision: function getPixelPrecision(t) {return function (t, e) {var n = Math.log,i = Math.LN10,r = Math.floor(n(t[1] - t[0]) / i),a = Math.round(n(Math.abs(e[1] - e[0])) / i),o = Math.min(Math.max(-r + a, 0), 20);return isFinite(o) ? o : 20;}(t || this.scale.getExtent(), this._extent);}, setExtent: function setExtent(t, e) {var n = this._extent;n[0] = t, n[1] = e;}, dataToCoord: function dataToCoord(t, e) {var n = this._extent,i = this.scale;return t = i.normalize(t), this.onBand && \"ordinal\" === i.type && Tp(n = n.slice(), i.count()), Ts(t, Ip, n, e);}, coordToData: function coordToData(t, e) {var n = this._extent,i = this.scale;this.onBand && \"ordinal\" === i.type && Tp(n = n.slice(), i.count());var r = Ts(t, n, Ip, e);return this.scale.scale(r);}, pointToData: function pointToData(t, e) {}, getTicksCoords: function getTicksCoords(t) {var e = (t = t || {}).tickModel || this.getTickModel(),n = A(mp(this, e).ticks, function (t) {return { coord: this.dataToCoord(t), tickValue: t };}, this);return function (t, e, n, i) {var r = e.length;if (!t.onBand || n || !r) return;var a,o,s = t.getExtent();if (1 === r) e[0].coord = s[0], a = e[1] = { coord: s[0] };else {var l = e[r - 1].tickValue - e[0].tickValue,h = (e[r - 1].coord - e[0].coord) / l;D(e, function (t) {t.coord -= h / 2;});var u = t.scale.getExtent();o = 1 + u[1] - e[r - 1].tickValue, a = { coord: e[r - 1].coord + h * o }, e.push(a);}var c = s[0] > s[1];d(e[0].coord, s[0]) && (i ? e[0].coord = s[0] : e.shift());i && d(s[0], e[0].coord) && e.unshift({ coord: s[0] });d(s[1], a.coord) && (i ? a.coord = s[1] : e.pop());i && d(a.coord, s[1]) && e.push({ coord: s[1] });function d(t, e) {return t = ks(t), e = ks(e), c ? e < t : t < e;}}(this, n, e.get(\"alignWithLabel\"), t.clamp), n;}, getViewLabels: function getViewLabels() {return vp(this).labels;}, getLabelModel: function getLabelModel() {return this.model.getModel(\"axisLabel\");}, getTickModel: function getTickModel() {return this.model.getModel(\"axisTick\");}, getBandWidth: function getBandWidth() {var t = this._extent,e = this.scale.getExtent(),n = e[1] - e[0] + (this.onBand ? 1 : 0);0 === n && (n = 1);var i = Math.abs(t[1] - t[0]);return Math.abs(i) / n;}, isHorizontal: null, getRotate: null, calculateCategoryInterval: function calculateCategoryInterval() {return function (t) {var e = function (t) {var e = t.getLabelModel();return { axisRotate: t.getRotate ? t.getRotate() : t.isHorizontal && !t.isHorizontal() ? 90 : 0, labelRotate: e.get(\"rotate\") || 0, font: e.getFont() };}(t),n = hp(t),i = (e.axisRotate - e.labelRotate) / 180 * Math.PI,r = t.scale,a = r.getExtent(),o = r.count();if (a[1] - a[0] < 1) return 0;var s = 1;40 < o && (s = Math.max(1, Math.floor(o / 40)));for (var l = a[0], h = t.dataToCoord(l + 1) - t.dataToCoord(l), u = Math.abs(h * Math.cos(i)), c = Math.abs(h * Math.sin(i)), d = 0, f = 0; l <= a[1]; l += s) {var p,g,v = Pn(n(l), e.font, \"center\", \"top\");p = 1.3 * v.width, g = 1.3 * v.height, d = Math.max(d, p, 7), f = Math.max(f, g, 7);}var m = d / u,y = f / c;isNaN(m) && (m = 1 / 0), isNaN(y) && (y = 1 / 0);var _ = Math.max(0, Math.floor(Math.min(m, y))),x = gp(t.model),w = t.getExtent(),b = x.lastAutoInterval,S = x.lastTickCount;return null != b && null != S && Math.abs(b - _) <= 1 && Math.abs(S - o) <= 1 && _ < b && x.axisExtend0 === w[0] && x.axisExtend1 === w[1] ? _ = b : (x.lastTickCount = o, x.lastAutoInterval = _, x.axisExtend0 = w[0], x.axisExtend1 = w[1]), _;}(this);} };function Cp(t, e, n, i, r) {Mp.call(this, t, e, n), this.type = i || \"value\", this.position = r || \"bottom\";}Cp.prototype = { constructor: Cp, index: 0, getAxesOnZeroOf: null, model: null, isHorizontal: function isHorizontal() {var t = this.position;return \"top\" === t || \"bottom\" === t;}, getGlobalExtent: function getGlobalExtent(t) {var e = this.getExtent();return e[0] = this.toGlobalCoord(e[0]), e[1] = this.toGlobalCoord(e[1]), t && e[0] > e[1] && e.reverse(), e;}, getOtherAxis: function getOtherAxis() {this.grid.getOtherAxis();}, pointToData: function pointToData(t, e) {return this.coordToData(this.toLocalCoord(t[\"x\" === this.dim ? 0 : 1]), e);}, toLocalCoord: null, toGlobalCoord: null }, y(Cp, Mp);var kp = { show: !0, zlevel: 0, z: 0, inverse: !1, name: \"\", nameLocation: \"end\", nameRotate: null, nameTruncate: { maxWidth: null, ellipsis: \"...\", placeholder: \".\" }, nameTextStyle: {}, nameGap: 15, silent: !1, triggerEvent: !1, tooltip: { show: !1 }, axisPointer: {}, axisLine: { show: !0, onZero: !0, onZeroAxisIndex: null, lineStyle: { color: \"#333\", width: 1, type: \"solid\" }, symbol: [\"none\", \"none\"], symbolSize: [10, 15] }, axisTick: { show: !0, inside: !1, length: 5, lineStyle: { width: 1 } }, axisLabel: { show: !0, inside: !1, rotate: 0, showMinLabel: null, showMaxLabel: null, margin: 8, fontSize: 12 }, splitLine: { show: !0, lineStyle: { color: [\"#ccc\"], width: 1, type: \"solid\" } }, splitArea: { show: !1, areaStyle: { color: [\"rgba(250,250,250,0.3)\", \"rgba(200,200,200,0.3)\"] } } },Dp = {};Dp.categoryAxis = f({ boundaryGap: !0, deduplication: null, splitLine: { show: !1 }, axisTick: { alignWithLabel: !1, interval: \"auto\" }, axisLabel: { interval: \"auto\" } }, kp), Dp.valueAxis = f({ boundaryGap: [0, 0], splitNumber: 5 }, kp), Dp.timeAxis = k({ scale: !0, min: \"dataMin\", max: \"dataMax\" }, Dp.valueAxis), Dp.logAxis = k({ scale: !0, logBase: 10 }, Dp.valueAxis);function Ap(a, t, o, e) {D(Lp, function (r) {t.extend({ type: a + \"Axis.\" + r, mergeDefaultAndTheme: function mergeDefaultAndTheme(t, e) {var n = this.layoutMode,i = n ? Qs(t) : {};f(t, e.getTheme().get(r + \"Axis\")), f(t, this.getDefaultOption()), t.type = o(a, t), n && Ks(t, i, n);}, optionUpdated: function optionUpdated() {\"category\" === this.option.type && (this.__ordinalMeta = wf.createByAxisModel(this));}, getCategories: function getCategories(t) {var e = this.option;if (\"category\" === e.type) return t ? e.data : this.__ordinalMeta.categories;}, getOrdinalMeta: function getOrdinalMeta() {return this.__ordinalMeta;}, defaultOption: function (t, e) {for (var n = t[0], i = 1, r = t.length; i < r; i++) {n = f(n, t[i], e);}return n;}([{}, Dp[r + \"Axis\"], e], !0) });}), il.registerSubTypeDefaulter(a + \"Axis\", I(o, a));}var Lp = [\"value\", \"category\", \"time\", \"log\"],Pp = { getMin: function getMin(t) {var e = this.option,n = t || null == e.rangeStart ? e.min : e.rangeStart;return this.axis && null != n && \"dataMin\" !== n && \"function\" != typeof n && !z(n) && (n = this.axis.scale.parse(n)), n;}, getMax: function getMax(t) {var e = this.option,n = t || null == e.rangeEnd ? e.max : e.rangeEnd;return this.axis && null != n && \"dataMax\" !== n && \"function\" != typeof n && !z(n) && (n = this.axis.scale.parse(n)), n;}, getNeedCrossZero: function getNeedCrossZero() {var t = this.option;return null == t.rangeStart && null == t.rangeEnd && !t.scale;}, getCoordSysModel: $, setRange: function setRange(t, e) {this.option.rangeStart = t, this.option.rangeEnd = e;}, resetRange: function resetRange() {this.option.rangeStart = this.option.rangeEnd = null;} },Op = il.extend({ type: \"cartesian2dAxis\", axis: null, init: function init() {Op.superApply(this, \"init\", arguments), this.resetRange();}, mergeOption: function mergeOption() {Op.superApply(this, \"mergeOption\", arguments), this.resetRange();}, restoreData: function restoreData() {Op.superApply(this, \"restoreData\", arguments), this.resetRange();}, getCoordSysModel: function getCoordSysModel() {return this.ecModel.queryComponents({ mainType: \"grid\", index: this.option.gridIndex, id: this.option.gridId })[0];} });function Ep(t, e) {return e.type || (e.data ? \"category\" : \"value\");}f(Op.prototype, Pp);var Np = { offset: 0 };function Bp(t, e) {return t.getCoordSysModel() === e;}function zp(t, e, n) {this._coordsMap = {}, this._coordsList = [], this._axesMap = {}, this._axesList = [], this._initCartesian(t, e, n), this.model = t;}Ap(\"x\", Op, Ep, Np), Ap(\"y\", Op, Ep, Np), il.extend({ type: \"grid\", dependencies: [\"xAxis\", \"yAxis\"], layoutMode: \"box\", coordinateSystem: null, defaultOption: { show: !1, zlevel: 0, z: 0, left: \"10%\", top: 60, right: \"10%\", bottom: 60, containLabel: !1, backgroundColor: \"rgba(0,0,0,0)\", borderWidth: 1, borderColor: \"#ccc\" } });var Rp = zp.prototype;function Fp(t, e, n, i) {n.getAxesOnZeroOf = function () {return r ? [r] : [];};var r,a = t[e],o = n.model,s = o.get(\"axisLine.onZero\"),l = o.get(\"axisLine.onZeroAxisIndex\");if (s) {if (null != l) Vp(a[l]) && (r = a[l]);else for (var h in a) {if (a.hasOwnProperty(h) && Vp(a[h]) && !i[u(a[h])]) {r = a[h];break;}}r && (i[u(r)] = !0);}function u(t) {return t.dim + \"_\" + t.index;}}function Vp(t) {return t && \"category\" !== t.type && \"time\" !== t.type && function (t) {var e = t.scale.getExtent(),n = e[0],i = e[1];return !(0 < n && 0 < i || n < 0 && i < 0);}(t);}Rp.type = \"grid\", Rp.axisPointerEnabled = !0, Rp.getRect = function () {return this._rect;}, Rp.update = function (t, e) {var n = this._axesMap;this._updateScale(t, this.model), D(n.x, function (t) {lp(t.scale, t.model);}), D(n.y, function (t) {lp(t.scale, t.model);});var i = {};D(n.x, function (t) {Fp(n, \"y\", t, i);}), D(n.y, function (t) {Fp(n, \"x\", t, i);}), this.resize(this.model, e);}, Rp.resize = function (t, e, n) {var r = function (t, e, n) {n = zs(n || 0);var i = e.width,r = e.height,a = Cs(t.left, i),o = Cs(t.top, r),s = Cs(t.right, i),l = Cs(t.bottom, r),h = Cs(t.width, i),u = Cs(t.height, r),c = n[2] + n[0],d = n[1] + n[3],f = t.aspect;switch (isNaN(h) && (h = i - s - d - a), isNaN(u) && (u = r - l - c - o), null != f && (isNaN(h) && isNaN(u) && (i / r < f ? h = .8 * i : u = .8 * r), isNaN(h) && (h = f * u), isNaN(u) && (u = h / f)), isNaN(a) && (a = i - s - h - d), isNaN(o) && (o = r - l - u - c), t.left || t.right) {case \"center\":a = i / 2 - h / 2 - n[3];break;case \"right\":a = i - h - d;}switch (t.top || t.bottom) {case \"middle\":case \"center\":o = r / 2 - u / 2 - n[0];break;case \"bottom\":o = r - u - c;}a = a || 0, o = o || 0, isNaN(h) && (h = i - d - a - (s || 0)), isNaN(u) && (u = r - c - o - (l || 0));var p = new Ue(a + n[3], o + n[0], h, u);return p.margin = n, p;}(t.getBoxLayoutParams(), { width: e.getWidth(), height: e.getHeight() });this._rect = r;var i = this._axesList;function a() {D(i, function (t) {var e = t.isHorizontal(),n = e ? [0, r.width] : [0, r.height],i = t.inverse ? 1 : 0;t.setExtent(n[i], n[1 - i]), function (t, e) {var n = t.getExtent(),i = n[0] + n[1];t.toGlobalCoord = \"x\" === t.dim ? function (t) {return t + e;} : function (t) {return i - t + e;}, t.toLocalCoord = \"x\" === t.dim ? function (t) {return t - e;} : function (t) {return i - t + e;};}(t, e ? r.x : r.y);});}a(), !n && t.get(\"containLabel\") && (D(i, function (t) {if (!t.model.get(\"axisLabel.inside\")) {var e = function (t) {var e = t.model,n = t.scale;if (e.get(\"axisLabel.show\") && !n.isBlank()) {var i,r,a = \"category\" === t.type,o = n.getExtent();r = a ? n.count() : (i = n.getTicks()).length;var s,l,h,u,c,d,f,p,g,v = t.getLabelModel(),m = hp(t),y = 1;40 < r && (y = Math.ceil(r / 40));for (var _ = 0; _ < r; _ += y) {var x = m(i ? i[_] : o[0] + _),w = v.getTextRect(x),b = (l = w, h = v.get(\"rotate\") || 0, void 0, u = h * Math.PI / 180, c = l.plain(), d = c.width, f = c.height, p = d * Math.cos(u) + f * Math.sin(u), g = d * Math.sin(u) + f * Math.cos(u), new Ue(c.x, c.y, p, g));s ? s.union(b) : s = b;}return s;}}(t);if (e) {var n = t.isHorizontal() ? \"height\" : \"width\",i = t.model.get(\"axisLabel.margin\");r[n] -= e[n] + i, \"top\" === t.position ? r.y += e.height + i : \"left\" === t.position && (r.x += e.width + i);}}}), a());}, Rp.getAxis = function (t, e) {var n = this._axesMap[t];if (null != n) {if (null == e) for (var i in n) {if (n.hasOwnProperty(i)) return n[i];}return n[e];}}, Rp.getAxes = function () {return this._axesList.slice();}, Rp.getCartesian = function (t, e) {if (null != t && null != e) {var n = \"x\" + t + \"y\" + e;return this._coordsMap[n];}O(t) && (e = t.yAxisIndex, t = t.xAxisIndex);for (var i = 0, r = this._coordsList; i < r.length; i++) {if (r[i].getAxis(\"x\").index === t || r[i].getAxis(\"y\").index === e) return r[i];}}, Rp.getCartesians = function () {return this._coordsList.slice();}, Rp.convertToPixel = function (t, e, n) {var i = this._findConvertTarget(t, e);return i.cartesian ? i.cartesian.dataToPoint(n) : i.axis ? i.axis.toGlobalCoord(i.axis.dataToCoord(n)) : null;}, Rp.convertFromPixel = function (t, e, n) {var i = this._findConvertTarget(t, e);return i.cartesian ? i.cartesian.pointToData(n) : i.axis ? i.axis.coordToData(i.axis.toLocalCoord(n)) : null;}, Rp._findConvertTarget = function (t, e) {var n,i,r = e.seriesModel,a = e.xAxisModel || r && r.getReferringComponents(\"xAxis\")[0],o = e.yAxisModel || r && r.getReferringComponents(\"yAxis\")[0],s = e.gridModel,l = this._coordsList;if (r) v(l, n = r.coordinateSystem) < 0 && (n = null);else if (a && o) n = this.getCartesian(a.componentIndex, o.componentIndex);else if (a) i = this.getAxis(\"x\", a.componentIndex);else if (o) i = this.getAxis(\"y\", o.componentIndex);else if (s) {s.coordinateSystem === this && (n = this._coordsList[0]);}return { cartesian: n, axis: i };}, Rp.containPoint = function (t) {var e = this._coordsList[0];if (e) return e.containPoint(t);}, Rp._initCartesian = function (o, t, e) {var s = { left: !1, right: !1, top: !1, bottom: !1 },l = { x: {}, y: {} },h = { x: 0, y: 0 };if (t.eachComponent(\"xAxis\", n(\"x\"), this), t.eachComponent(\"yAxis\", n(\"y\"), this), !h.x || !h.y) return this._axesMap = {}, void (this._axesList = []);function n(a) {return function (t, e) {if (Bp(t, o)) {var n = t.get(\"position\");\"x\" === a ? \"top\" !== n && \"bottom\" !== n && (n = s.bottom ? \"top\" : \"bottom\") : \"left\" !== n && \"right\" !== n && (n = s.left ? \"right\" : \"left\"), s[n] = !0;var i = new Cp(a, function (t, e) {if (e = e || t.get(\"type\")) switch (e) {case \"category\":return new Tf(t.getOrdinalMeta ? t.getOrdinalMeta() : t.getCategories(), [1 / 0, -1 / 0]);case \"value\":return new Pf();default:return (xf.getClass(e) || Pf).create(t);}}(t), [0, 0], t.get(\"type\"), n),r = \"category\" === i.type;i.onBand = r && t.get(\"boundaryGap\"), i.inverse = t.get(\"inverse\"), (t.axis = i).model = t, i.grid = this, i.index = e, this._axesList.push(i), l[a][e] = i, h[a]++;}};}D((this._axesMap = l).x, function (r, a) {D(l.y, function (t, e) {var n = \"x\" + a + \"y\" + e,i = new pp(n);i.grid = this, i.model = o, this._coordsMap[n] = i, this._coordsList.push(i), i.addAxis(r), i.addAxis(t);}, this);}, this);}, Rp._updateScale = function (l, h) {function u(e, n) {D(e.mapDimension(n.dim, !0), function (t) {n.scale.unionExtentFromData(e, function (t, e) {return Sd(t, e) ? t.getCalculationInfo(\"stackResultDimension\") : e;}(e, t));});}D(this._axesList, function (t) {t.scale.setExtent(1 / 0, -1 / 0);}), l.eachSeries(function (t) {if (Gp(t)) {var e = Hp(t, l),n = e[0],i = e[1];if (!Bp(n, h) || !Bp(i, h)) return;var r = this.getCartesian(n.componentIndex, i.componentIndex),a = t.getData(),o = r.getAxis(\"x\"),s = r.getAxis(\"y\");\"list\" === a.type && (u(a, o, t), u(a, s, t));}}, this);}, Rp.getTooltipAxes = function (i) {var r = [],a = [];return D(this.getCartesians(), function (t) {var e = null != i && \"auto\" !== i ? t.getAxis(i) : t.getBaseAxis(),n = t.getOtherAxis(e);v(r, e) < 0 && r.push(e), v(a, n) < 0 && a.push(n);}), { baseAxes: r, otherAxes: a };};var Wp = [\"xAxis\", \"yAxis\"];function Hp(e) {return A(Wp, function (t) {return e.getReferringComponents(t)[0];});}function Gp(t) {return \"cartesian2d\" === t.get(\"coordinateSystem\");}zp.create = function (i, r) {var a = [];return i.eachComponent(\"grid\", function (t, e) {var n = new zp(t, i, r);n.name = \"grid_\" + e, n.resize(t, r, !0), t.coordinateSystem = n, a.push(n);}), i.eachSeries(function (t) {if (Gp(t)) {var e = Hp(t),n = e[0],i = e[1],r = n.getCoordSysModel().coordinateSystem;t.coordinateSystem = r.getCartesian(n.componentIndex, i.componentIndex);}}), a;}, zp.dimensions = zp.prototype.dimensions = pp.prototype.dimensions, Ol.register(\"cartesian2d\", zp);function Xp(t, e) {this.opt = e, this.axisModel = t, k(e, { labelOffset: 0, nameDirection: 1, tickDirection: 1, labelDirection: 1, silent: !0 }), this.group = new Ye();var n = new Ye({ position: e.position.slice(), rotation: e.rotation });n.updateTransform(), this._transform = n.transform, this._dumbGroup = n;}var Up = Math.PI;Xp.prototype = { constructor: Xp, hasBuilder: function hasBuilder(t) {return !!Yp[t];}, add: function add(t) {Yp[t].call(this);}, getGroup: function getGroup() {return this.group;} };var Yp = { axisLine: function axisLine() {var a = this.opt,t = this.axisModel;if (t.get(\"axisLine.show\")) {var e = this.axisModel.axis.getExtent(),n = this._transform,o = [e[0], 0],i = [e[1], 0];n && (st(o, o, n), st(i, i, n));var s = S({ lineCap: \"round\" }, t.getModel(\"axisLine.lineStyle\").getLineStyle());this.group.add(new ao({ anid: \"line\", subPixelOptimize: !0, shape: { x1: o[0], y1: o[1], x2: i[0], y2: i[1] }, style: s, strokeContainThreshold: a.strokeContainThreshold || 5, silent: !0, z2: 1 }));var l = t.get(\"axisLine.symbol\"),r = t.get(\"axisLine.symbolSize\"),h = t.get(\"axisLine.symbolOffset\") || 0;if (\"number\" == typeof h && (h = [h, h]), null != l) {\"string\" == typeof l && (l = [l, l]), \"string\" != typeof r && \"number\" != typeof r || (r = [r, r]);var u = r[0],c = r[1];D([{ rotate: a.rotation + Math.PI / 2, offset: h[0], r: 0 }, { rotate: a.rotation - Math.PI / 2, offset: h[1], r: Math.sqrt((o[0] - i[0]) * (o[0] - i[0]) + (o[1] - i[1]) * (o[1] - i[1])) }], function (t, e) {if (\"none\" !== l[e] && null != l[e]) {var n = Od(l[e], -u / 2, -c / 2, u, c, s.stroke, !0),i = t.r + t.offset,r = [o[0] + i * Math.cos(a.rotation), o[1] - i * Math.sin(a.rotation)];n.attr({ rotation: t.rotate, position: r, silent: !0, z2: 11 }), this.group.add(n);}}, this);}}}, axisTickLabel: function axisTickLabel() {var t = this.axisModel,e = this.opt,n = function (t, e, n) {var i = e.axis;if (!e.get(\"axisTick.show\") || i.scale.isBlank()) return;for (var r = e.getModel(\"axisTick\"), a = r.getModel(\"lineStyle\"), o = r.get(\"length\"), s = i.getTicksCoords(), l = [], h = [], u = t._transform, c = [], d = 0; d < s.length; d++) {var f = s[d].coord;l[0] = f, l[1] = 0, h[0] = f, h[1] = n.tickDirection * o, u && (st(l, l, u), st(h, h, u));var p = new ao({ anid: \"tick_\" + s[d].tickValue, subPixelOptimize: !0, shape: { x1: l[0], y1: l[1], x2: h[0], y2: h[1] }, style: k(a.getLineStyle(), { stroke: e.get(\"axisLine.lineStyle.color\") }), z2: 2, silent: !0 });t.group.add(p), c.push(p);}return c;}(this, t, e);!function (t, e, n) {if (cp(t.axis)) return;var i = t.get(\"axisLabel.showMinLabel\"),r = t.get(\"axisLabel.showMaxLabel\");n = n || [];var a = (e = e || [])[0],o = e[1],s = e[e.length - 1],l = e[e.length - 2],h = n[0],u = n[1],c = n[n.length - 1],d = n[n.length - 2];!1 === i ? ($p(a), $p(h)) : Kp(a, o) && (i ? ($p(o), $p(u)) : ($p(a), $p(h)));!1 === r ? ($p(s), $p(c)) : Kp(l, s) && (r ? ($p(l), $p(d)) : ($p(s), $p(c)));}(t, function (h, u, c) {var d = u.axis;if (!R(c.axisLabelShow, u.get(\"axisLabel.show\")) || d.scale.isBlank()) return;var f = u.getModel(\"axisLabel\"),p = f.get(\"margin\"),t = d.getViewLabels(),e = (R(c.labelRotate, f.get(\"rotate\")) || 0) * Up / 180,g = jp(c.rotation, e, c.labelDirection),v = u.getCategories && u.getCategories(!0),m = [],y = Zp(u),_ = u.get(\"triggerEvent\");return D(t, function (t, e) {var n = t.tickValue,i = t.formattedLabel,r = t.rawLabel,a = f;v && v[n] && v[n].textStyle && (a = new xs(v[n].textStyle, f, u.ecModel));var o = a.getTextColor() || u.get(\"axisLine.lineStyle.color\"),s = [d.dataToCoord(n), c.labelOffset + c.labelDirection * p],l = new Ha({ anid: \"label_\" + n, position: s, rotation: g.rotation, silent: y, z2: 10 });Jo(l.style, a, { text: i, textAlign: a.getShallow(\"align\", !0) || g.textAlign, textVerticalAlign: a.getShallow(\"verticalAlign\", !0) || a.getShallow(\"baseline\", !0) || g.textVerticalAlign, textFill: \"function\" == typeof o ? o(\"category\" === d.type ? r : \"value\" === d.type ? n + \"\" : n, e) : o }), _ && (l.eventData = qp(u), l.eventData.targetType = \"axisLabel\", l.eventData.value = r), h._dumbGroup.add(l), l.updateTransform(), m.push(l), h.group.add(l), l.decomposeTransform();}), m;}(this, t, e), n);}, axisName: function axisName() {var t = this.opt,e = this.axisModel,n = R(t.axisName, e.get(\"name\"));if (n) {var i,r,a = e.get(\"nameLocation\"),o = t.nameDirection,s = e.getModel(\"nameTextStyle\"),l = e.get(\"nameGap\") || 0,h = this.axisModel.axis.getExtent(),u = h[0] > h[1] ? -1 : 1,c = [\"start\" === a ? h[0] - u * l : \"end\" === a ? h[1] + u * l : (h[0] + h[1]) / 2, Qp(a) ? t.labelOffset + o * l : 0],d = e.get(\"nameRotate\");null != d && (d = d * Up / 180), Qp(a) ? i = jp(t.rotation, null != d ? d : t.rotation, o) : (i = function (t, e, n, i) {var r,a,o = As(n - t.rotation),s = i[0] > i[1],l = \"start\" === e && !s || \"start\" !== e && s;r = Ls(o - Up / 2) ? (a = l ? \"bottom\" : \"top\", \"center\") : Ls(o - 1.5 * Up) ? (a = l ? \"top\" : \"bottom\", \"center\") : (a = \"middle\", o < 1.5 * Up && Up / 2 < o ? l ? \"left\" : \"right\" : l ? \"right\" : \"left\");return { rotation: o, textAlign: r, textVerticalAlign: a };}(t, a, d || 0, h), null != (r = t.axisNameAvailableWidth) && (r = Math.abs(r / Math.sin(i.rotation)), isFinite(r) || (r = null)));var f = s.getFont(),p = e.get(\"nameTruncate\", !0) || {},g = p.ellipsis,v = R(t.nameTruncateMaxWidth, p.maxWidth, r),m = null != g && null != v ? Ys(n, v, f, g, { minChar: 2, placeholder: p.placeholder }) : n,y = e.get(\"tooltip\", !0),_ = e.mainType,x = { componentType: _, name: n, $vars: [\"name\"] };x[_ + \"Index\"] = e.componentIndex;var w = new Ha({ anid: \"name\", __fullText: n, __truncatedText: m, position: c, rotation: i.rotation, silent: Zp(e), z2: 1, tooltip: y && y.show ? S({ content: n, formatter: function formatter() {return n;}, formatterParams: x }, y) : null });Jo(w.style, s, { text: m, textFont: f, textFill: s.getTextColor() || e.get(\"axisLine.lineStyle.color\"), textAlign: s.get(\"align\") || i.textAlign, textVerticalAlign: s.get(\"verticalAlign\") || i.textVerticalAlign }), e.get(\"triggerEvent\") && (w.eventData = qp(e), w.eventData.targetType = \"axisName\", w.eventData.name = n), this._dumbGroup.add(w), w.updateTransform(), this.group.add(w), w.decomposeTransform();}} },qp = Xp.makeAxisEventDataBase = function (t) {var e = { componentType: t.mainType, componentIndex: t.componentIndex };return e[t.mainType + \"Index\"] = t.componentIndex, e;},jp = Xp.innerTextLayout = function (t, e, n) {var i,r = As(e - t);return { rotation: r, textAlign: Ls(r) ? (i = 0 < n ? \"top\" : \"bottom\", \"center\") : Ls(r - Up) ? (i = 0 < n ? \"bottom\" : \"top\", \"center\") : (i = \"middle\", 0 < r && r < Up ? 0 < n ? \"right\" : \"left\" : 0 < n ? \"left\" : \"right\"), textVerticalAlign: i };};var Zp = Xp.isLabelSilent = function (t) {var e = t.get(\"tooltip\");return t.get(\"silent\") || !(t.get(\"triggerEvent\") || e && e.show);};function $p(t) {t && (t.ignore = !0);}function Kp(t, e) {var n = t && t.getBoundingRect().clone(),i = e && e.getBoundingRect().clone();if (n && i) {var r = Bt([]);return Ft(r, r, -t.rotation), n.applyTransform(zt([], r, t.getLocalTransform())), i.applyTransform(zt([], r, e.getLocalTransform())), n.intersect(i);}}function Qp(t) {return \"middle\" === t || \"center\" === t;}function Jp(t) {var e = (t.ecModel.getComponent(\"axisPointer\") || {}).coordSysAxesInfo;return e && e.axesInfo[function (t) {return t.type + \"||\" + t.id;}(t)];}var tg = Gc({ type: \"axis\", _axisPointer: null, axisPointerClass: null, render: function render(t, e, n, i) {this.axisPointerClass && function (t) {var e = Jp(t);if (e) {var n = e.axisPointerModel,i = e.axis.scale,r = n.option,a = n.get(\"status\"),o = n.get(\"value\");null != o && (o = i.parse(o));var s = function (t) {return !!t.get(\"handle.show\");}(n);null == a && (r.status = s ? \"show\" : \"hide\");var l = i.getExtent().slice();l[0] > l[1] && l.reverse(), (null == o || o > l[1]) && (o = l[1]), o < l[0] && (o = l[0]), r.value = o, s && (r.status = e.axis.scale.isBlank() ? \"hide\" : \"show\");}}(t), tg.superApply(this, \"render\", arguments), eg(this, t, e, n, i, !0);}, updateAxisPointer: function updateAxisPointer(t, e, n, i, r) {eg(this, t, e, n, i, !1);}, remove: function remove(t, e) {var n = this._axisPointer;n && n.remove(e), tg.superApply(this, \"remove\", arguments);}, dispose: function dispose(t, e) {ng(this, e), tg.superApply(this, \"dispose\", arguments);} });function eg(t, e, n, i, r, a) {var o = tg.getAxisPointerClass(t.axisPointerClass);if (o) {var s = function (t) {var e = Jp(t);return e && e.axisPointerModel;}(e);s ? (t._axisPointer || (t._axisPointer = new o())).render(e, s, i, a) : ng(t, i);}}function ng(t, e, n) {var i = t._axisPointer;i && i.dispose(e, n), t._axisPointer = null;}var ig = [];tg.registerAxisPointerClass = function (t, e) {ig[t] = e;}, tg.getAxisPointerClass = function (t) {return t && ig[t];};var rg,ag,og,sg = [\"axisLine\", \"axisTickLabel\", \"axisName\"],lg = [\"splitArea\", \"splitLine\"],hg = tg.extend({ type: \"cartesianAxis\", axisPointerClass: \"CartesianAxisPointer\", render: function render(e, t, n, i) {this.group.removeAll();var r = this._axisGroup;if (this._axisGroup = new Ye(), this.group.add(this._axisGroup), e.get(\"show\")) {var a = e.getCoordSysModel(),o = function (t, e, n) {n = n || {};var i = t.coordinateSystem,r = e.axis,a = {},o = r.getAxesOnZeroOf()[0],s = r.position,l = o ? \"onZero\" : s,h = r.dim,u = i.getRect(),c = [u.x, u.x + u.width, u.y, u.y + u.height],d = { left: 0, right: 1, top: 0, bottom: 1, onZero: 2 },f = e.get(\"offset\") || 0,p = \"x\" === h ? [c[2] - f, c[3] + f] : [c[0] - f, c[1] + f];if (o) {var g = o.toGlobalCoord(o.dataToCoord(0));p[d.onZero] = Math.max(Math.min(g, p[1]), p[0]);}a.position = [\"y\" === h ? p[d[l]] : c[0], \"x\" === h ? p[d[l]] : c[3]], a.rotation = Math.PI / 2 * (\"x\" === h ? 0 : 1), a.labelDirection = a.tickDirection = a.nameDirection = { top: -1, bottom: 1, left: -1, right: 1 }[s], a.labelOffset = o ? p[d[s]] - p[d.onZero] : 0, e.get(\"axisTick.inside\") && (a.tickDirection = -a.tickDirection), R(n.labelInside, e.get(\"axisLabel.inside\")) && (a.labelDirection = -a.labelDirection);var v = e.get(\"axisLabel.rotate\");return a.labelRotate = \"top\" === l ? -v : v, a.z2 = 1, a;}(a, e),s = new Xp(e, o);D(sg, s.add, s), this._axisGroup.add(s.getGroup()), D(lg, function (t) {e.get(t + \".show\") && this[\"_\" + t](e, a);}, this), us(r, this._axisGroup, e), hg.superCall(this, \"render\", e, t, n, i);}}, remove: function remove() {this._splitAreaColors = null;}, _splitLine: function _splitLine(t, e) {var n = t.axis;if (!n.scale.isBlank()) {var i = t.getModel(\"splitLine\"),r = i.getModel(\"lineStyle\"),a = r.get(\"color\");a = C(a) ? a : [a];for (var o = e.coordinateSystem.getRect(), s = n.isHorizontal(), l = 0, h = n.getTicksCoords({ tickModel: i }), u = [], c = [], d = r.getLineStyle(), f = 0; f < h.length; f++) {var p = n.toGlobalCoord(h[f].coord);s ? (u[0] = p, u[1] = o.y, c[0] = p, c[1] = o.y + o.height) : (u[0] = o.x, u[1] = p, c[0] = o.x + o.width, c[1] = p);var g = l++ % a.length,v = h[f].tickValue;this._axisGroup.add(new ao({ anid: null != v ? \"line_\" + h[f].tickValue : null, subPixelOptimize: !0, shape: { x1: u[0], y1: u[1], x2: c[0], y2: c[1] }, style: k({ stroke: a[g] }, d), silent: !0 }));}}}, _splitArea: function _splitArea(t, e) {var n = t.axis;if (!n.scale.isBlank()) {var i = t.getModel(\"splitArea\"),r = i.getModel(\"areaStyle\"),a = r.get(\"color\"),o = e.coordinateSystem.getRect(),s = n.getTicksCoords({ tickModel: i, clamp: !0 });if (s.length) {var l = a.length,h = this._splitAreaColors,u = Z(),c = 0;if (h) for (var d = 0; d < s.length; d++) {var f = h.get(s[d].tickValue);if (null != f) {c = (f + (l - 1) * d) % l;break;}}var p = n.toGlobalCoord(s[0].coord),g = r.getAreaStyle();a = C(a) ? a : [a];for (d = 1; d < s.length; d++) {var v,m,y,_,x = n.toGlobalCoord(s[d].coord);p = n.isHorizontal() ? (v = p, m = o.y, y = x - v, _ = o.height, v + y) : (v = o.x, m = p, y = o.width, m + (_ = x - m));var w = s[d - 1].tickValue;null != w && u.set(w, c), this._axisGroup.add(new io({ anid: null != w ? \"area_\" + w : null, shape: { x: v, y: m, width: y, height: _ }, style: k({ fill: a[c] }, g), silent: !0 })), c = (c + 1) % l;}this._splitAreaColors = u;}}} });function ug(t, e) {\"outside\" === t.textPosition && (t.textPosition = e);}hg.extend({ type: \"xAxis\" }), hg.extend({ type: \"yAxis\" }), Gc({ type: \"grid\", render: function render(t, e) {this.group.removeAll(), t.get(\"show\") && this.group.add(new io({ shape: t.coordinateSystem.getRect(), style: k({ fill: t.get(\"backgroundColor\") }, t.getItemStyle()), silent: !0, z2: -1 }));} }), Bc(function (t) {t.xAxis && t.yAxis && !t.grid && (t.grid = {});}), Vc((ag = \"circle\", og = rg = \"line\", { seriesType: rg, performRawSeries: !0, reset: function reset(l, t, e) {var n = l.getData(),h = l.get(\"symbol\"),u = l.get(\"symbolSize\"),i = l.get(\"symbolKeepAspect\"),c = T(h),d = T(u),f = c || d,r = !c && h ? h : ag,a = d ? null : u;if (n.setVisual({ legendSymbol: og || r, symbol: r, symbolSize: a, symbolKeepAspect: i }), !t.isSeriesFiltered(l)) return { dataEach: n.hasItemOption || f ? function (t, e) {if (f) {var n = l.getRawValue(e),i = l.getDataParams(e);c && t.setItemVisual(e, \"symbol\", h(n, i)), d && t.setItemVisual(e, \"symbolSize\", u(n, i));}if (t.hasItemOption) {var r = t.getItemModel(e),a = r.getShallow(\"symbol\", !0),o = r.getShallow(\"symbolSize\", !0),s = r.getShallow(\"symbolKeepAspect\", !0);null != a && t.setItemVisual(e, \"symbol\", a), null != o && t.setItemVisual(e, \"symbolSize\", o), null != s && t.setItemVisual(e, \"symbolKeepAspect\", s);}} : null };} })), Fc({ seriesType: \"line\", plan: Hh(), reset: function reset(t) {var e = t.getData(),c = t.coordinateSystem,d = t.pipelineContext.large;if (c) {var f = A(c.dimensions, function (t) {return e.mapDimension(t);}).slice(0, 2),p = f.length,n = e.getCalculationInfo(\"stackResultDimension\");return Sd(e, f[0]) && (f[0] = n), Sd(e, f[1]) && (f[1] = n), p && { progress: function progress(t, e) {for (var n = t.end - t.start, i = d && new Float32Array(n * p), r = t.start, a = 0, o = [], s = []; r < t.end; r++) {var l;if (1 === p) {var h = e.get(f[0], r);l = !isNaN(h) && c.dataToPoint(h, null, s);} else {h = o[0] = e.get(f[0], r);var u = o[1] = e.get(f[1], r);l = !isNaN(h) && !isNaN(u) && c.dataToPoint(o, null, s);}d ? (i[a++] = l ? l[0] : NaN, i[a++] = l ? l[1] : NaN) : e.setItemLayout(r, l && l.slice() || [NaN, NaN]);}d && e.setLayout(\"symbolPoints\", i);} };}} }), zc(Zu.PROCESSOR.STATISTIC, { seriesType: \"line\", modifyOutputEnd: !0, reset: function reset(t, e, n) {var i = t.getData(),r = t.get(\"sampling\"),a = t.coordinateSystem;if (\"cartesian2d\" === a.type && r) {var o,s = a.getBaseAxis(),l = a.getOtherAxis(s),h = s.getExtent(),u = h[1] - h[0],c = Math.round(i.count() / u);1 < c && (\"string\" == typeof r ? o = _f[r] : \"function\" == typeof r && (o = r), o && t.setData(i.downSample(i.mapDimension(l.dim), 1 / c, o, yf)));}} }), Ph.extend({ type: \"series.__base_bar__\", getInitialData: function getInitialData(t, e) {return Md(this.getSource(), this);}, getMarkerPosition: function getMarkerPosition(t) {var e = this.coordinateSystem;if (e) {var n = e.dataToPoint(e.clampData(t)),i = this.getData(),r = i.getLayout(\"offset\"),a = i.getLayout(\"size\");return n[e.getBaseAxis().isHorizontal() ? 0 : 1] += r + a / 2, n;}return [NaN, NaN];}, defaultOption: { zlevel: 0, z: 2, coordinateSystem: \"cartesian2d\", legendHoverLink: !0, barMinHeight: 0, barMinAngle: 0, large: !1, largeThreshold: 400, progressive: 3e3, progressiveChunkMode: \"mod\", itemStyle: {}, emphasis: {} } }).extend({ type: \"series.bar\", dependencies: [\"grid\", \"polar\"], brushSelector: \"rect\", getProgressive: function getProgressive() {return !!this.get(\"large\") && this.get(\"progressive\");}, getProgressiveThreshold: function getProgressiveThreshold() {var t = this.get(\"progressiveThreshold\"),e = this.get(\"largeThreshold\");return t < e && (t = e), t;}, defaultOption: { clip: !0, roundCap: !1 } });var cg = lr([[\"fill\", \"color\"], [\"stroke\", \"borderColor\"], [\"lineWidth\", \"borderWidth\"], [\"stroke\", \"barBorderColor\"], [\"lineWidth\", \"barBorderWidth\"], [\"opacity\"], [\"shadowBlur\"], [\"shadowOffsetX\"], [\"shadowOffsetY\"], [\"shadowColor\"]]),dg = { getBarItemStyle: function getBarItemStyle(t) {var e = cg(this, t);if (this.getBorderLineDash) {var n = this.getBorderLineDash();n && (e.lineDash = n);}return e;} },fg = To({ type: \"sausage\", shape: { cx: 0, cy: 0, r0: 0, r: 0, startAngle: 0, endAngle: 2 * Math.PI, clockwise: !0 }, buildPath: function buildPath(t, e) {var n = e.cx,i = e.cy,r = Math.max(e.r0 || 0, 0),a = Math.max(e.r, 0),o = .5 * (a - r),s = r + o,l = e.startAngle,h = e.endAngle,u = e.clockwise,c = Math.cos(l),d = Math.sin(l),f = Math.cos(h),p = Math.sin(h);(u ? h - l < 2 * Math.PI : l - h < 2 * Math.PI) && (t.moveTo(c * r + n, d * r + i), t.arc(c * s + n, d * s + i, o, -Math.PI + l, l, !u)), t.arc(n, i, a, l, h, !u), t.moveTo(f * a + n, p * a + i), t.arc(f * s + n, p * s + i, o, h - 2 * Math.PI, h - Math.PI, !u), 0 !== r && (t.arc(n, i, r, h, l, u), t.moveTo(c * r + n, p * r + i)), t.closePath();} }),pg = [\"itemStyle\", \"barBorderWidth\"],gg = [0, 0];S(xs.prototype, dg), Uc({ type: \"bar\", render: function render(t, e, n) {this._updateDrawMode(t);var i = t.get(\"coordinateSystem\");return \"cartesian2d\" !== i && \"polar\" !== i || (this._isLargeDraw ? this._renderLarge(t, e, n) : this._renderNormal(t, e, n)), this.group;}, incrementalPrepareRender: function incrementalPrepareRender(t, e, n) {this._clear(), this._updateDrawMode(t);}, incrementalRender: function incrementalRender(t, e, n, i) {this._incrementalRenderLarge(t, e);}, _updateDrawMode: function _updateDrawMode(t) {var e = t.pipelineContext.large;(null == this._isLargeDraw || e ^ this._isLargeDraw) && (this._isLargeDraw = e, this._clear());}, _renderNormal: function _renderNormal(a, t, e) {var o,s = this.group,l = a.getData(),h = this._data,u = a.coordinateSystem,n = u.getBaseAxis();\"cartesian2d\" === u.type ? o = n.isHorizontal() : \"polar\" === u.type && (o = \"angle\" === n.dim);var c = a.isAnimationEnabled() ? a : null,d = a.get(\"clip\", !0),f = function (t, e) {var n = t.getArea && t.getArea();if (\"cartesian2d\" === t.type) {var i = t.getBaseAxis();if (\"category\" !== i.type || !i.onBand) {var r = e.getLayout(\"bandWidth\");i.isHorizontal() ? (n.x -= r, n.width += 2 * r) : (n.y -= r, n.height += 2 * r);}}return n;}(u, l);s.removeClipPath();var p = a.get(\"roundCap\", !0);l.diff(h).add(function (t) {if (l.hasValue(t)) {var e = l.getItemModel(t),n = bg[u.type](l, t, e);if (d) if (yg[u.type](f, n)) return void s.remove(i);var i = _g[u.type](t, n, o, c, !1, p);l.setItemGraphicEl(t, i), s.add(i), Sg(i, l, t, e, n, a, o, \"polar\" === u.type);}}).update(function (t, e) {var n = h.getItemGraphicEl(e);if (l.hasValue(t)) {var i = l.getItemModel(t),r = bg[u.type](l, t, i);if (d) if (yg[u.type](f, r)) return void s.remove(n);n ? ss(n, { shape: r }, c, t) : n = _g[u.type](t, r, o, c, !0, p), l.setItemGraphicEl(t, n), s.add(n), Sg(n, l, t, i, r, a, o, \"polar\" === u.type);} else s.remove(n);}).remove(function (t) {var e = h.getItemGraphicEl(t);\"cartesian2d\" === u.type ? e && xg(t, c, e) : e && wg(t, c, e);}).execute(), this._data = l;}, _renderLarge: function _renderLarge(t, e, n) {this._clear(), Ig(t, this.group);var i = t.get(\"clip\", !0) ? function (t, e, n) {return t ? \"polar\" === t.type ? df(t, e, n) : \"cartesian2d\" === t.type ? cf(t, e, n) : null : null;}(t.coordinateSystem, !1, t) : null;i ? this.group.setClipPath(i) : this.group.removeClipPath();}, _incrementalRenderLarge: function _incrementalRenderLarge(t, e) {Ig(e, this.group, !0);}, dispose: $, remove: function remove(t) {this._clear(t);}, _clear: function _clear(e) {var t = this.group,n = this._data;e && e.get(\"animation\") && n && !this._isLargeDraw ? n.eachItemGraphicEl(function (t) {\"sector\" === t.type ? wg(t.dataIndex, e, t) : xg(t.dataIndex, e, t);}) : t.removeAll(), this._data = null;} });var vg = Math.max,mg = Math.min,yg = { cartesian2d: function cartesian2d(t, e) {var n = e.width < 0 ? -1 : 1,i = e.height < 0 ? -1 : 1;n < 0 && (e.x += e.width, e.width = -e.width), i < 0 && (e.y += e.height, e.height = -e.height);var r = vg(e.x, t.x),a = mg(e.x + e.width, t.x + t.width),o = vg(e.y, t.y),s = mg(e.y + e.height, t.y + t.height);e.x = r, e.y = o, e.width = a - r, e.height = s - o;var l = e.width < 0 || e.height < 0;return n < 0 && (e.x += e.width, e.width = -e.width), i < 0 && (e.y += e.height, e.height = -e.height), l;}, polar: function polar(t) {return !1;} },_g = { cartesian2d: function cartesian2d(t, e, n, i, r) {var a = new io({ shape: S({}, e) });if (i) {var o = n ? \"height\" : \"width\",s = {};a.shape[o] = 0, s[o] = e[o], fs[r ? \"updateProps\" : \"initProps\"](a, { shape: s }, i, t);}return a;}, polar: function polar(t, e, n, i, r, a) {var o = e.startAngle < e.endAngle,s = new (!n && a ? fg : Ya)({ shape: k({ clockwise: o }, e) });if (i) {var l = n ? \"r\" : \"endAngle\",h = {};s.shape[l] = n ? 0 : e.startAngle, h[l] = e[l], fs[r ? \"updateProps\" : \"initProps\"](s, { shape: h }, i, t);}return s;} };function xg(t, e, n) {n.style.text = null, ss(n, { shape: { width: 0 } }, e, t, function () {n.parent && n.parent.remove(n);});}function wg(t, e, n) {n.style.text = null, ss(n, { shape: { r: n.shape.r0 } }, e, t, function () {n.parent && n.parent.remove(n);});}var bg = { cartesian2d: function cartesian2d(t, e, n) {var i = t.getItemLayout(e),r = function (t, e) {var n = t.get(pg) || 0;return Math.min(n, Math.abs(e.width), Math.abs(e.height));}(n, i),a = 0 < i.width ? 1 : -1,o = 0 < i.height ? 1 : -1;return { x: i.x + a * r / 2, y: i.y + o * r / 2, width: i.width - a * r, height: i.height - o * r };}, polar: function polar(t, e, n) {var i = t.getItemLayout(e);return { cx: i.cx, cy: i.cy, r0: i.r0, r: i.r, startAngle: i.startAngle, endAngle: i.endAngle };} };function Sg(t, e, n, i, r, a, o, s) {var l = e.getItemVisual(n, \"color\"),h = e.getItemVisual(n, \"opacity\"),u = i.getModel(\"itemStyle\"),c = i.getModel(\"emphasis.itemStyle\").getBarItemStyle();s || t.setShape(\"r\", u.get(\"barBorderRadius\") || 0), t.useStyle(k({ fill: l, opacity: h }, u.getBarItemStyle()));var d = i.getShallow(\"cursor\");d && t.attr(\"cursor\", d);o ? r.height : r.width;s || function (t, e, n, i, r, a) {Qo(t, e, n.getModel(\"label\"), n.getModel(\"emphasis.label\"), { labelFetcher: r, labelDataIndex: a, defaultText: Ed(r.getData(), a), isRectText: !0, autoColor: i }), ug(t), ug(e);}(t.style, c, i, l, a, n), jo(t, c);}var Mg = Ma.extend({ type: \"largeBar\", shape: { points: [] }, buildPath: function buildPath(t, e) {for (var n = e.points, i = this.__startPoint, r = this.__baseDimIdx, a = 0; a < n.length; a += 2) {i[r] = n[a + r], t.moveTo(i[0], i[1]), t.lineTo(n[a], n[a + 1]);}} });function Ig(t, e, n) {var i = t.getData(),r = [],a = i.getLayout(\"valueAxisHorizontal\") ? 1 : 0;r[1 - a] = i.getLayout(\"valueAxisStart\");var o = new Mg({ shape: { points: i.getLayout(\"largePoints\") }, incremental: !!n, __startPoint: r, __baseDimIdx: a, __largeDataIndices: i.getLayout(\"largeDataIndices\"), __barWidth: i.getLayout(\"barWidth\") });e.add(o), function (t, e, n) {var i = n.getVisual(\"borderColor\") || n.getVisual(\"color\"),r = e.getModel(\"itemStyle\").getItemStyle([\"color\", \"borderColor\"]);t.useStyle(r), t.style.fill = null, t.style.stroke = i, t.style.lineWidth = n.getLayout(\"barWidth\");}(o, t, i), o.seriesIndex = t.seriesIndex, t.get(\"silent\") || (o.on(\"mousedown\", Tg), o.on(\"mousemove\", Tg));}var Tg = Qh(function (t) {var e = function (t, e, n) {var i = t.__baseDimIdx,r = 1 - i,a = t.shape.points,o = t.__largeDataIndices,s = Math.abs(t.__barWidth / 2),l = t.__startPoint[r];gg[0] = e, gg[1] = n;for (var h = gg[i], u = gg[1 - i], c = h - s, d = h + s, f = 0, p = a.length / 2; f < p; f++) {var g = 2 * f,v = a[g + i],m = a[g + r];if (c <= v && v <= d && (l <= m ? l <= u && u <= m : m <= u && u <= l)) return o[f];}return -1;}(this, t.offsetX, t.offsetY);this.dataIndex = 0 <= e ? e : null;}, 30, !1);Fc(Zu.VISUAL.LAYOUT, I(function (t, e) {var n = zf(t, e),T = Rf(n),C = {};D(n, function (t) {var e = t.getData(),n = t.coordinateSystem,i = n.getBaseAxis(),r = Nf(t),a = T[Bf(i)][r],o = a.offset,s = a.width,l = n.getOtherAxis(i),h = t.get(\"barMinHeight\") || 0;C[r] = C[r] || [], e.setLayout({ bandWidth: a.bandWidth, offset: o, size: s });for (var u = e.mapDimension(l.dim), c = e.mapDimension(i.dim), d = Sd(e, u), f = l.isHorizontal(), p = Gf(i, l, d), g = 0, v = e.count(); g < v; g++) {var m = e.get(u, g),y = e.get(c, g);if (!isNaN(m) && !isNaN(y)) {var _,x,w,b,S,M = 0 <= m ? \"p\" : \"n\",I = p;if (d && (C[r][y] || (C[r][y] = { p: p, n: p }), I = C[r][y][M]), f) _ = I, x = (S = n.dataToPoint([m, y]))[1] + o, w = S[0] - p, b = s, Math.abs(w) < h && (w = (w < 0 ? -1 : 1) * h), d && (C[r][y][M] += w);else _ = (S = n.dataToPoint([y, m]))[0] + o, x = I, w = s, b = S[1] - p, Math.abs(b) < h && (b = (b <= 0 ? -1 : 1) * h), d && (C[r][y][M] += b);e.setItemLayout(g, { x: _, y: x, width: w, height: b });}}}, this);}, \"bar\")), Fc(Zu.VISUAL.PROGRESSIVE_LAYOUT, Vf), Vc({ seriesType: \"bar\", reset: function reset(t) {t.getData().setVisual(\"legendSymbol\", \"roundRect\");} });var Cg = { updateSelectedMap: function updateSelectedMap(t) {this._targetList = C(t) ? t.slice() : [], this._selectTargetMap = M(t || [], function (t, e) {return t.set(e.name, e), t;}, Z());}, select: function select(t, e) {var n = null != e ? this._targetList[e] : this._selectTargetMap.get(t);\"single\" === this.get(\"selectedMode\") && this._selectTargetMap.each(function (t) {t.selected = !1;}), n && (n.selected = !0);}, unSelect: function unSelect(t, e) {var n = null != e ? this._targetList[e] : this._selectTargetMap.get(t);n && (n.selected = !1);}, toggleSelected: function toggleSelected(t, e) {var n = null != e ? this._targetList[e] : this._selectTargetMap.get(t);if (null != n) return this[n.selected ? \"unSelect\" : \"select\"](t, e), n.selected;}, isSelected: function isSelected(t, e) {var n = null != e ? this._targetList[e] : this._selectTargetMap.get(t);return n && n.selected;} },kg = Xc({ type: \"series.pie\", init: function init(t) {kg.superApply(this, \"init\", arguments), this.legendDataProvider = function () {return this.getRawData();}, this.updateSelectedMap(this._createSelectableList()), this._defaultLabelLine(t);}, mergeOption: function mergeOption(t) {kg.superCall(this, \"mergeOption\", t), this.updateSelectedMap(this._createSelectableList());}, getInitialData: function getInitialData(t, e) {return function (t, e, n) {e = C(e) && { coordDimensions: e } || S({}, e);var i = t.getSource(),r = bd(i, e),a = new sd(r, t);return a.initData(i, n), a;}(this, [\"value\"]);}, _createSelectableList: function _createSelectableList() {for (var t = this.getRawData(), e = t.mapDimension(\"value\"), n = [], i = 0, r = t.count(); i < r; i++) {n.push({ name: t.getName(i), value: t.get(e, i), selected: gh(t, i, \"selected\") });}return n;}, getDataParams: function getDataParams(t) {var e = this.getData(),n = kg.superCall(this, \"getDataParams\", t),i = [];return e.each(e.mapDimension(\"value\"), function (t) {i.push(t);}), n.percent = function (t, e, n) {if (!t[e]) return 0;var i = M(t, function (t, e) {return t + (isNaN(e) ? 0 : e);}, 0);if (0 === i) return 0;for (var r = Math.pow(10, n), a = A(t, function (t) {return (isNaN(t) ? 0 : t) / i * r * 100;}), o = 100 * r, s = A(a, function (t) {return Math.floor(t);}), l = M(s, function (t, e) {return t + e;}, 0), h = A(a, function (t, e) {return t - s[e];}); l < o;) {for (var u = Number.NEGATIVE_INFINITY, c = null, d = 0, f = h.length; d < f; ++d) {h[d] > u && (u = h[d], c = d);}++s[c], h[c] = 0, ++l;}return s[e] / r;}(i, t, e.hostModel.get(\"percentPrecision\")), n.$vars.push(\"percent\"), n;}, _defaultLabelLine: function _defaultLabelLine(t) {Wi(t, \"labelLine\", [\"show\"]);var e = t.labelLine,n = t.emphasis.labelLine;e.show = e.show && t.label.show, n.show = n.show && t.emphasis.label.show;}, defaultOption: { zlevel: 0, z: 2, legendHoverLink: !0, hoverAnimation: !0, center: [\"50%\", \"50%\"], radius: [0, \"75%\"], clockwise: !0, startAngle: 90, minAngle: 0, minShowLabelAngle: 0, selectedOffset: 10, hoverOffset: 10, avoidLabelOverlap: !0, percentPrecision: 2, stillShowZeroSum: !0, label: { rotate: !1, show: !0, position: \"outer\" }, labelLine: { show: !0, length: 15, length2: 15, smooth: !1, lineStyle: { width: 1, type: \"solid\" } }, itemStyle: { borderWidth: 1 }, animationType: \"expansion\", animationTypeUpdate: \"transition\", animationEasing: \"cubicOut\" } });function Dg(t, e, n, i) {var r = e.getData(),a = this.dataIndex,o = r.getName(a),s = e.get(\"selectedOffset\");i.dispatchAction({ type: \"pieToggleSelect\", from: t, name: o, seriesId: e.id }), r.each(function (t) {Ag(r.getItemGraphicEl(t), r.getItemLayout(t), e.isSelected(r.getName(t)), s, n);});}function Ag(t, e, n, i, r) {var a = (e.startAngle + e.endAngle) / 2,o = n ? i : 0,s = [Math.cos(a) * o, Math.sin(a) * o];r ? t.animate().when(200, { position: s }).start(\"bounceOut\") : t.attr(\"position\", s);}function Lg(t, e) {Ye.call(this);var n = new Ya({ z2: 2 }),i = new Ka(),r = new Ha();this.add(n), this.add(i), this.add(r), this.updateData(t, e, !0);}_(kg, Cg);var Pg = Lg.prototype;Pg.updateData = function (t, e, n) {var i = this.childAt(0),r = this.childAt(1),a = this.childAt(2),o = t.hostModel,s = t.getItemModel(e),l = t.getItemLayout(e),h = S({}, l);h.label = null;var u = o.getShallow(\"animationTypeUpdate\");n ? (i.setShape(h), \"scale\" === o.getShallow(\"animationType\") ? (i.shape.r = l.r0, ls(i, { shape: { r: l.r } }, o, e)) : (i.shape.endAngle = l.startAngle, ss(i, { shape: { endAngle: l.endAngle } }, o, e))) : \"expansion\" === u ? i.setShape(h) : ss(i, { shape: h }, o, e);var c = t.getItemVisual(e, \"color\");i.useStyle(k({ lineJoin: \"bevel\", fill: c }, s.getModel(\"itemStyle\").getItemStyle())), i.hoverStyle = s.getModel(\"emphasis.itemStyle\").getItemStyle();var d = s.getShallow(\"cursor\");d && i.attr(\"cursor\", d), Ag(this, t.getItemLayout(e), o.isSelected(null, e), o.get(\"selectedOffset\"), o.get(\"animation\"));var f = !n && \"transition\" === u;this._updateLabel(t, e, f), this.highDownOnUpdate = s.get(\"hoverAnimation\") && o.isAnimationEnabled() ? function (t, e) {\"emphasis\" === e ? (r.ignore = r.hoverIgnore, a.ignore = a.hoverIgnore, i.stopAnimation(!0), i.animateTo({ shape: { r: l.r + o.get(\"hoverOffset\") } }, 300, \"elasticOut\")) : (r.ignore = r.normalIgnore, a.ignore = a.normalIgnore, i.stopAnimation(!0), i.animateTo({ shape: { r: l.r } }, 300, \"elasticOut\"));} : null, jo(this);}, Pg._updateLabel = function (t, e, n) {var i = this.childAt(1),r = this.childAt(2),a = t.hostModel,o = t.getItemModel(e),s = t.getItemLayout(e).label,l = t.getItemVisual(e, \"color\");if (!s || isNaN(s.x) || isNaN(s.y)) r.ignore = r.normalIgnore = r.hoverIgnore = i.ignore = i.normalIgnore = i.hoverIgnore = !0;else {var h = { points: s.linePoints || [[s.x, s.y], [s.x, s.y], [s.x, s.y]] },u = { x: s.x, y: s.y };n ? (ss(i, { shape: h }, a, e), ss(r, { style: u }, a, e)) : (i.attr({ shape: h }), r.attr({ style: u })), r.attr({ rotation: s.rotation, origin: [s.x, s.y], z2: 10 });var c = o.getModel(\"label\"),d = o.getModel(\"emphasis.label\"),f = o.getModel(\"labelLine\"),p = o.getModel(\"emphasis.labelLine\");l = t.getItemVisual(e, \"color\");Qo(r.style, r.hoverStyle = {}, c, d, { labelFetcher: t.hostModel, labelDataIndex: e, defaultText: t.getName(e), autoColor: l, useInsideStyle: !!s.inside }, { textAlign: s.textAlign, textVerticalAlign: s.verticalAlign, opacity: t.getItemVisual(e, \"opacity\") }), r.ignore = r.normalIgnore = !c.get(\"show\"), r.hoverIgnore = !d.get(\"show\"), i.ignore = i.normalIgnore = !f.get(\"show\"), i.hoverIgnore = !p.get(\"show\"), i.setStyle({ stroke: l, opacity: t.getItemVisual(e, \"opacity\") }), i.setStyle(f.getModel(\"lineStyle\").getLineStyle()), i.hoverStyle = p.getModel(\"lineStyle\").getLineStyle();var g = f.get(\"smooth\");g && !0 === g && (g = .4), i.setShape({ smooth: g });}}, y(Lg, Ye);Uh.extend({ type: \"pie\", init: function init() {var t = new Ye();this._sectorGroup = t;}, render: function render(t, e, n, i) {if (!i || i.from !== this.uid) {var r = t.getData(),a = this._data,o = this.group,s = e.get(\"animation\"),l = !a,h = t.get(\"animationType\"),u = t.get(\"animationTypeUpdate\"),c = I(Dg, this.uid, t, s, n),d = t.get(\"selectedMode\");if (r.diff(a).add(function (t) {var e = new Lg(r, t);l && \"scale\" !== h && e.eachChild(function (t) {t.stopAnimation(!0);}), d && e.on(\"click\", c), r.setItemGraphicEl(t, e), o.add(e);}).update(function (t, e) {var n = a.getItemGraphicEl(e);l || \"transition\" === u || n.eachChild(function (t) {t.stopAnimation(!0);}), n.updateData(r, t), n.off(\"click\"), d && n.on(\"click\", c), o.add(n), r.setItemGraphicEl(t, n);}).remove(function (t) {var e = a.getItemGraphicEl(t);o.remove(e);}).execute(), s && 0 < r.count() && (l ? \"scale\" !== h : \"transition\" !== u)) {for (var f = r.getItemLayout(0), p = 1; isNaN(f.startAngle) && p < r.count(); ++p) {f = r.getItemLayout(p);}var g = Math.max(n.getWidth(), n.getHeight()) / 2,v = w(o.removeClipPath, o);o.setClipPath(this._createClipPath(f.cx, f.cy, g, f.startAngle, f.clockwise, v, t, l));} else o.removeClipPath();this._data = r;}}, dispose: function dispose() {}, _createClipPath: function _createClipPath(t, e, n, i, r, a, o, s) {var l = new Ya({ shape: { cx: t, cy: e, r0: 0, r: n, startAngle: i, endAngle: i, clockwise: r } });return (s ? ls : ss)(l, { shape: { endAngle: i + (r ? 1 : -1) * Math.PI * 2 } }, o, a), l;}, containPoint: function containPoint(t, e) {var n = e.getData().getItemLayout(0);if (n) {var i = t[0] - n.cx,r = t[1] - n.cy,a = Math.sqrt(i * i + r * r);return a <= n.r && a >= n.r0;}} });var Og = Math.PI / 180;function Eg(r, t, e, n, i, a, o) {function s(t, e, n) {for (var i = t; i < e; i++) {if (r[i].y += n, t < i && i + 1 < e && r[i + 1].y > r[i].y + r[i].height) return void l(i, n / 2);}l(e - 1, n / 2);}function l(t, e) {for (var n = t; 0 <= n && (r[n].y -= e, !(0 < n && r[n].y > r[n - 1].y + r[n - 1].height)); n--) {;}}function h(t, e, n, i, r, a) {for (var o = e ? Number.MAX_VALUE : 0, s = 0, l = t.length; s < l; s++) {var h = Math.abs(t[s].y - i),u = t[s].len,c = t[s].len2,d = h < r + u ? Math.sqrt((r + u + c) * (r + u + c) - h * h) : Math.abs(t[s].x - n);e && o <= d && (d = o - 10), !e && d <= o && (d = o + 10), t[s].x = n + d * a, o = d;}}r.sort(function (t, e) {return t.y - e.y;});for (var u, c = 0, d = r.length, f = [], p = [], g = 0; g < d; g++) {(u = r[g].y - c) < 0 && s(g, d, -u), c = r[g].y + r[g].height;}o - c < 0 && l(d - 1, c - o);for (g = 0; g < d; g++) {r[g].y >= e ? p.push(r[g]) : f.push(r[g]);}h(f, !1, t, e, n, i), h(p, !0, t, e, n, i);}function Ng(t) {return \"center\" === t.position;}function Bg(I, T, t, e, n) {var C,k,D = I.getData(),A = [],L = !1,P = (I.get(\"minShowLabelAngle\") || 0) * Og;D.each(function (t) {var e = D.getItemLayout(t),n = D.getItemModel(t),i = n.getModel(\"label\"),r = i.get(\"position\") || n.get(\"emphasis.label.position\"),a = n.getModel(\"labelLine\"),o = a.get(\"length\"),s = a.get(\"length2\");if (!(e.angle < P)) {var l,h,u,c,d = (e.startAngle + e.endAngle) / 2,f = Math.cos(d),p = Math.sin(d);C = e.cx, k = e.cy;var g = \"inside\" === r || \"inner\" === r;if (\"center\" === r) l = e.cx, h = e.cy, c = \"center\";else {var v = (g ? (e.r + e.r0) / 2 * f : e.r * f) + C,m = (g ? (e.r + e.r0) / 2 * p : e.r * p) + k;if (l = v + 3 * f, h = m + 3 * p, !g) {var y = v + f * (o + T - e.r),_ = m + p * (o + T - e.r),x = y + (f < 0 ? -1 : 1) * s;l = x + (f < 0 ? -5 : 5), u = [[v, m], [y, _], [x, h = _]];}c = g ? \"center\" : 0 < f ? \"left\" : \"right\";}var w,b = i.getFont(),S = i.get(\"rotate\");w = \"number\" == typeof S ? S * (Math.PI / 180) : S ? f < 0 ? -d + Math.PI : -d : 0;var M = Pn(I.getFormattedLabel(t, \"normal\") || D.getName(t), b, c, \"top\");L = !!w, e.label = { x: l, y: h, position: r, height: M.height, len: o, len2: s, linePoints: u, textAlign: c, verticalAlign: \"middle\", rotation: w, inside: g }, g || A.push(e.label);}}), !L && I.get(\"avoidLabelOverlap\") && function (t, e, n, i, r, a) {for (var o = [], s = [], l = 0; l < t.length; l++) {Ng(t[l]) || (t[l].x < e ? o.push(t[l]) : s.push(t[l]));}for (Eg(s, e, n, i, 1, 0, a), Eg(o, e, n, i, -1, 0, a), l = 0; l < t.length; l++) {if (!Ng(t[l])) {var h = t[l].linePoints;if (h) {var u = h[1][0] - h[2][0];t[l].x < e ? h[2][0] = t[l].x + 3 : h[2][0] = t[l].x - 3, h[1][1] = h[2][1] = t[l].y, h[1][0] = h[2][0] + u;}}}}(A, C, k, T, 0, e);}var zg,Rg,Fg = 2 * Math.PI,Vg = Math.PI / 180;zg = \"pie\", D([{ type: \"pieToggleSelect\", event: \"pieselectchanged\", method: \"toggleSelected\" }, { type: \"pieSelect\", event: \"pieselected\", method: \"select\" }, { type: \"pieUnSelect\", event: \"pieunselected\", method: \"unSelect\" }], function (a) {a.update = \"updateView\", Rc(a, function (t, e) {var r = {};return e.eachComponent({ mainType: \"series\", subType: zg, query: t }, function (n) {n[a.method] && n[a.method](t.name, t.dataIndex);var i = n.getData();i.each(function (t) {var e = i.getName(t);r[e] = n.isSelected(e) || !1;});}), { name: t.name, selected: r, seriesId: t.seriesId };});}), Vc((Rg = \"pie\", { getTargetSeries: function getTargetSeries(t) {var e = {},n = Z();return t.eachSeriesByType(Rg, function (t) {t.__paletteScope = e, n.set(t.uid, t);}), n;}, reset: function reset(s, t) {var l = s.getRawData(),h = {},u = s.getData();u.each(function (t) {var e = u.getRawIndex(t);h[e] = t;}), l.each(function (t) {var e,n = h[t],i = null != n && u.getItemVisual(n, \"color\", !0),r = null != n && u.getItemVisual(n, \"borderColor\", !0);if (i && r || (e = l.getItemModel(t)), i) l.setItemVisual(t, \"color\", i);else {var a = e.get(\"itemStyle.color\") || s.getColorFromPalette(l.getName(t) || t + \"\", s.__paletteScope, l.count());l.setItemVisual(t, \"color\", a), null != n && u.setItemVisual(n, \"color\", a);}if (r) l.setItemVisual(t, \"borderColor\", r);else {var o = e.get(\"itemStyle.borderColor\");l.setItemVisual(t, \"borderColor\", o), null != n && u.setItemVisual(n, \"borderColor\", o);}});} })), Fc(I(function (t, e, T, n) {e.eachSeriesByType(t, function (t) {var r = t.getData(),e = r.mapDimension(\"value\"),n = t.get(\"center\"),i = t.get(\"radius\");C(i) || (i = [0, i]), C(n) || (n = [n, n]);var a = T.getWidth(),o = T.getHeight(),s = Math.min(a, o),l = Cs(n[0], a),h = Cs(n[1], o),u = Cs(i[0], s / 2),c = Cs(i[1], s / 2),d = -t.get(\"startAngle\") * Vg,f = t.get(\"minAngle\") * Vg,p = 0;r.each(e, function (t) {isNaN(t) || p++;});var g = r.getSum(e),v = Math.PI / (g || p) * 2,m = t.get(\"clockwise\"),y = t.get(\"roseType\"),_ = t.get(\"stillShowZeroSum\"),x = r.getDataExtent(e);x[0] = 0;var w = Fg,b = 0,S = d,M = m ? 1 : -1;if (r.each(e, function (t, e) {var n;if (isNaN(t)) r.setItemLayout(e, { angle: NaN, startAngle: NaN, endAngle: NaN, clockwise: m, cx: l, cy: h, r0: u, r: y ? NaN : c });else {(n = \"area\" !== y ? 0 === g && _ ? v : t * v : Fg / p) < f ? w -= n = f : b += t;var i = S + M * n;r.setItemLayout(e, { angle: n, startAngle: S, endAngle: i, clockwise: m, cx: l, cy: h, r0: u, r: y ? Ts(t, x, [u, c]) : c }), S = i;}}), w < Fg && p) if (w <= .001) {var I = Fg / p;r.each(e, function (t, e) {if (!isNaN(t)) {var n = r.getItemLayout(e);n.angle = I, n.startAngle = d + M * e * I, n.endAngle = d + M * (e + 1) * I;}});} else v = w / b, S = d, r.each(e, function (t, e) {if (!isNaN(t)) {var n = r.getItemLayout(e),i = n.angle === f ? f : t * v;n.startAngle = S, n.endAngle = S + M * i, S += M * i;}});Bg(t, c, 0, o);});}, \"pie\")), zc({ seriesType: \"pie\", reset: function reset(t, e) {var i = e.findComponents({ mainType: \"legend\" });if (i && i.length) {var r = t.getData();r.filterSelf(function (t) {for (var e = r.getName(t), n = 0; n < i.length; n++) {if (!i[n].isSelected(e)) return !1;}return !0;});}} }), t.version = \"4.5.0\", t.dependencies = { zrender: \"4.1.2\" }, t.PRIORITY = Zu, t.init = function (t, e, n) {var i = Ec(t);if (i) return i;var r = new ec(t, e, n);return r.id = \"ec_\" + Dc++, Cc[r.id] = r, Qi(t, Lc, r.id), function (i) {var r = \"__connectUpdateStatus\";function a(t, e) {for (var n = 0; n < t.length; n++) {t[n][r] = e;}}Uu(xc, function (t, e) {i._messageCenter.on(e, function (t) {if (kc[i.group] && 0 !== i[r]) {if (t && t.escapeConnect) return;var e = i.makeActionFromEvent(t),n = [];Uu(Cc, function (t) {t !== i && t.group === i.group && n.push(t);}), a(n, 0), Uu(n, function (t) {1 !== t[r] && t.dispatchAction(e);}), a(n, 2);}});});}(r), r;}, t.connect = function (e) {if (C(e)) {var t = e;e = null, Uu(t, function (t) {null != t.group && (e = t.group);}), e = e || \"g_\" + Ac++, Uu(t, function (t) {t.group = e;});}return kc[e] = !0, e;}, t.disConnect = Pc, t.disconnect = Oc, t.dispose = function (t) {\"string\" == typeof t ? t = Cc[t] : t instanceof ec || (t = Ec(t)), t instanceof ec && !t.isDisposed() && t.dispose();}, t.getInstanceByDom = Ec, t.getInstanceById = function (t) {return Cc[t];}, t.registerTheme = Nc, t.registerPreprocessor = Bc, t.registerProcessor = zc, t.registerPostUpdate = function (t) {Sc.push(t);}, t.registerAction = Rc, t.registerCoordinateSystem = function (t, e) {Ol.register(t, e);}, t.getCoordinateSystemDimensions = function (t) {var e = Ol.get(t);if (e) return e.getDimensionsInfo ? e.getDimensionsInfo() : e.dimensions.slice();}, t.registerLayout = Fc, t.registerVisual = Vc, t.registerLoading = Hc, t.extendComponentModel = function (t) {return il.extend(t);}, t.extendComponentView = Gc, t.extendSeriesModel = Xc, t.extendChartView = Uc, t.setCanvasCreator = function (t) {!function (t, e) {\"createCanvas\" === t && (g = null), a[t] = e;}(\"createCanvas\", t);}, t.registerMap = function (t, e, n) {Wu(t, e, n);}, t.getMap = function (t) {var e = Hu(t);return e && e[0] && { geoJson: e[0].geoJSON, specialAreas: e[0].specialAreas };}, t.dataTool = {};});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 4)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///31\n");

/***/ }),

/***/ 358:
/*!*****************************************************************************************************!*\
  !*** C:/Users/DELL/Documents/HBuilderProjects/CanNengApp/components/mpvue-echarts/src/wx-canvas.js ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}var WxCanvas = /*#__PURE__*/function () {\n  function WxCanvas(ctx, canvasId) {_classCallCheck(this, WxCanvas);\n    this.ctx = ctx;\n    this.canvasId = canvasId;\n    this.chart = null;\n\n    WxCanvas.initStyle(ctx);\n    this.initEvent();\n  }_createClass(WxCanvas, [{ key: \"getContext\", value: function getContext(\n\n    contextType) {\n      return contextType === '2d' ? this.ctx : null;\n    } }, { key: \"setChart\", value: function setChart(\n\n    chart) {\n      this.chart = chart;\n    } }, { key: \"attachEvent\", value: function attachEvent()\n\n    {\n      // noop\n    } }, { key: \"detachEvent\", value: function detachEvent()\n\n    {\n      // noop\n    } }, { key: \"initEvent\", value: function initEvent()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    {var _this = this;\n      this.event = {};\n      var eventNames = [{\n        wxName: 'touchStart',\n        ecName: 'mousedown' },\n      {\n        wxName: 'touchMove',\n        ecName: 'mousemove' },\n      {\n        wxName: 'touchEnd',\n        ecName: 'mouseup' },\n      {\n        wxName: 'touchEnd',\n        ecName: 'click' }];\n\n\n      eventNames.forEach(function (name) {\n        _this.event[name.wxName] = function (e) {\n          var touch = e.mp.touches[0];\n          _this.chart._zr.handler.dispatch(name.ecName, {\n            zrX: name.wxName === 'tap' ? touch.clientX : touch.x,\n            zrY: name.wxName === 'tap' ? touch.clientY : touch.y });\n\n        };\n      });\n    } }], [{ key: \"initStyle\", value: function initStyle(ctx) {var _arguments = arguments;var styles = ['fillStyle', 'strokeStyle', 'globalAlpha', 'textAlign', 'textBaseAlign', 'shadow', 'lineWidth', 'lineCap', 'lineJoin', 'lineDash', 'miterLimit', 'fontSize'];styles.forEach(function (style) {Object.defineProperty(ctx, style, { set: function set(value) {if (style !== 'fillStyle' && style !== 'strokeStyle' || value !== 'none' && value !== null) {ctx[\"set\".concat(style.charAt(0).toUpperCase()).concat(style.slice(1))](value);}} });});ctx.createRadialGradient = function () {return ctx.createCircularGradient(_arguments);};} }]);return WxCanvas;}();exports.default = WxCanvas;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy9tcHZ1ZS1lY2hhcnRzL3NyYy93eC1jYW52YXMuanMiXSwibmFtZXMiOlsiV3hDYW52YXMiLCJjdHgiLCJjYW52YXNJZCIsImNoYXJ0IiwiaW5pdFN0eWxlIiwiaW5pdEV2ZW50IiwiY29udGV4dFR5cGUiLCJldmVudCIsImV2ZW50TmFtZXMiLCJ3eE5hbWUiLCJlY05hbWUiLCJmb3JFYWNoIiwibmFtZSIsImUiLCJ0b3VjaCIsIm1wIiwidG91Y2hlcyIsIl96ciIsImhhbmRsZXIiLCJkaXNwYXRjaCIsInpyWCIsImNsaWVudFgiLCJ4IiwienJZIiwiY2xpZW50WSIsInkiLCJzdHlsZXMiLCJzdHlsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5Iiwic2V0IiwidmFsdWUiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwiY3JlYXRlUmFkaWFsR3JhZGllbnQiLCJjcmVhdGVDaXJjdWxhckdyYWRpZW50IiwiYXJndW1lbnRzIl0sIm1hcHBpbmdzIjoid3ZCQUFxQkEsUTtBQUNuQixvQkFBWUMsR0FBWixFQUFpQkMsUUFBakIsRUFBMkI7QUFDekIsU0FBS0QsR0FBTCxHQUFXQSxHQUFYO0FBQ0EsU0FBS0MsUUFBTCxHQUFnQkEsUUFBaEI7QUFDQSxTQUFLQyxLQUFMLEdBQWEsSUFBYjs7QUFFQUgsWUFBUSxDQUFDSSxTQUFULENBQW1CSCxHQUFuQjtBQUNBLFNBQUtJLFNBQUw7QUFDRCxHOztBQUVVQyxlLEVBQWE7QUFDdEIsYUFBT0EsV0FBVyxLQUFLLElBQWhCLEdBQXVCLEtBQUtMLEdBQTVCLEdBQWtDLElBQXpDO0FBQ0QsSzs7QUFFUUUsUyxFQUFPO0FBQ2QsV0FBS0EsS0FBTCxHQUFhQSxLQUFiO0FBQ0QsSzs7QUFFYTtBQUNaO0FBQ0QsSzs7QUFFYTtBQUNaO0FBQ0QsSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNCVztBQUNWLFdBQUtJLEtBQUwsR0FBYSxFQUFiO0FBQ0EsVUFBTUMsVUFBVSxHQUFHLENBQUM7QUFDbEJDLGNBQU0sRUFBRSxZQURVO0FBRWxCQyxjQUFNLEVBQUUsV0FGVSxFQUFEO0FBR2hCO0FBQ0RELGNBQU0sRUFBRSxXQURQO0FBRURDLGNBQU0sRUFBRSxXQUZQLEVBSGdCO0FBTWhCO0FBQ0RELGNBQU0sRUFBRSxVQURQO0FBRURDLGNBQU0sRUFBRSxTQUZQLEVBTmdCO0FBU2hCO0FBQ0RELGNBQU0sRUFBRSxVQURQO0FBRURDLGNBQU0sRUFBRSxPQUZQLEVBVGdCLENBQW5COzs7QUFjQUYsZ0JBQVUsQ0FBQ0csT0FBWCxDQUFtQixVQUFDQyxJQUFELEVBQVU7QUFDM0IsYUFBSSxDQUFDTCxLQUFMLENBQVdLLElBQUksQ0FBQ0gsTUFBaEIsSUFBMEIsVUFBQ0ksQ0FBRCxFQUFPO0FBQy9CLGNBQU1DLEtBQUssR0FBR0QsQ0FBQyxDQUFDRSxFQUFGLENBQUtDLE9BQUwsQ0FBYSxDQUFiLENBQWQ7QUFDQSxlQUFJLENBQUNiLEtBQUwsQ0FBV2MsR0FBWCxDQUFlQyxPQUFmLENBQXVCQyxRQUF2QixDQUFnQ1AsSUFBSSxDQUFDRixNQUFyQyxFQUE2QztBQUMzQ1UsZUFBRyxFQUFFUixJQUFJLENBQUNILE1BQUwsS0FBZ0IsS0FBaEIsR0FBd0JLLEtBQUssQ0FBQ08sT0FBOUIsR0FBd0NQLEtBQUssQ0FBQ1EsQ0FEUjtBQUUzQ0MsZUFBRyxFQUFFWCxJQUFJLENBQUNILE1BQUwsS0FBZ0IsS0FBaEIsR0FBd0JLLEtBQUssQ0FBQ1UsT0FBOUIsR0FBd0NWLEtBQUssQ0FBQ1csQ0FGUixFQUE3Qzs7QUFJRCxTQU5EO0FBT0QsT0FSRDtBQVNELEssb0RBN0NnQnhCLEcsRUFBSyw0QkFDcEIsSUFBTXlCLE1BQU0sR0FBRyxDQUFDLFdBQUQsRUFBYyxhQUFkLEVBQTZCLGFBQTdCLEVBQ2IsV0FEYSxFQUNBLGVBREEsRUFDaUIsUUFEakIsRUFDMkIsV0FEM0IsRUFFYixTQUZhLEVBRUYsVUFGRSxFQUVVLFVBRlYsRUFFc0IsWUFGdEIsRUFFb0MsVUFGcEMsQ0FBZixDQUlBQSxNQUFNLENBQUNmLE9BQVAsQ0FBZSxVQUFDZ0IsS0FBRCxFQUFXLENBQ3hCQyxNQUFNLENBQUNDLGNBQVAsQ0FBc0I1QixHQUF0QixFQUEyQjBCLEtBQTNCLEVBQWtDLEVBQ2hDRyxHQUFHLEVBQUUsYUFBQ0MsS0FBRCxFQUFXLENBQ2QsSUFBS0osS0FBSyxLQUFLLFdBQVYsSUFBeUJBLEtBQUssS0FBSyxhQUFwQyxJQUNFSSxLQUFLLEtBQUssTUFBVixJQUFvQkEsS0FBSyxLQUFLLElBRHBDLEVBRUUsQ0FDQTlCLEdBQUcsY0FBTzBCLEtBQUssQ0FBQ0ssTUFBTixDQUFhLENBQWIsRUFBZ0JDLFdBQWhCLEVBQVAsU0FBdUNOLEtBQUssQ0FBQ08sS0FBTixDQUFZLENBQVosQ0FBdkMsRUFBSCxDQUE0REgsS0FBNUQsRUFDRCxDQUNGLENBUCtCLEVBQWxDLEVBU0QsQ0FWRCxFQVlBOUIsR0FBRyxDQUFDa0Msb0JBQUosR0FBMkIsb0JBQU1sQyxHQUFHLENBQUNtQyxzQkFBSixDQUEyQkMsVUFBM0IsQ0FBTixFQUEzQixDQUNELEMiLCJmaWxlIjoiMzU4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgV3hDYW52YXMge1xyXG4gIGNvbnN0cnVjdG9yKGN0eCwgY2FudmFzSWQpIHtcclxuICAgIHRoaXMuY3R4ID0gY3R4O1xyXG4gICAgdGhpcy5jYW52YXNJZCA9IGNhbnZhc0lkO1xyXG4gICAgdGhpcy5jaGFydCA9IG51bGw7XHJcblxyXG4gICAgV3hDYW52YXMuaW5pdFN0eWxlKGN0eCk7XHJcbiAgICB0aGlzLmluaXRFdmVudCgpO1xyXG4gIH1cclxuXHJcbiAgZ2V0Q29udGV4dChjb250ZXh0VHlwZSkge1xyXG4gICAgcmV0dXJuIGNvbnRleHRUeXBlID09PSAnMmQnID8gdGhpcy5jdHggOiBudWxsO1xyXG4gIH1cclxuXHJcbiAgc2V0Q2hhcnQoY2hhcnQpIHtcclxuICAgIHRoaXMuY2hhcnQgPSBjaGFydDtcclxuICB9XHJcblxyXG4gIGF0dGFjaEV2ZW50KCkge1xyXG4gICAgLy8gbm9vcFxyXG4gIH1cclxuXHJcbiAgZGV0YWNoRXZlbnQoKSB7XHJcbiAgICAvLyBub29wXHJcbiAgfVxyXG5cclxuICBzdGF0aWMgaW5pdFN0eWxlKGN0eCkge1xyXG4gICAgY29uc3Qgc3R5bGVzID0gWydmaWxsU3R5bGUnLCAnc3Ryb2tlU3R5bGUnLCAnZ2xvYmFsQWxwaGEnLFxyXG4gICAgICAndGV4dEFsaWduJywgJ3RleHRCYXNlQWxpZ24nLCAnc2hhZG93JywgJ2xpbmVXaWR0aCcsXHJcbiAgICAgICdsaW5lQ2FwJywgJ2xpbmVKb2luJywgJ2xpbmVEYXNoJywgJ21pdGVyTGltaXQnLCAnZm9udFNpemUnXTtcclxuXHJcbiAgICBzdHlsZXMuZm9yRWFjaCgoc3R5bGUpID0+IHtcclxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0eCwgc3R5bGUsIHtcclxuICAgICAgICBzZXQ6ICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgaWYgKChzdHlsZSAhPT0gJ2ZpbGxTdHlsZScgJiYgc3R5bGUgIT09ICdzdHJva2VTdHlsZScpXHJcbiAgICAgICAgICAgIHx8ICh2YWx1ZSAhPT0gJ25vbmUnICYmIHZhbHVlICE9PSBudWxsKVxyXG4gICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGN0eFtgc2V0JHtzdHlsZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKX0ke3N0eWxlLnNsaWNlKDEpfWBdKHZhbHVlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGN0eC5jcmVhdGVSYWRpYWxHcmFkaWVudCA9ICgpID0+IGN0eC5jcmVhdGVDaXJjdWxhckdyYWRpZW50KGFyZ3VtZW50cyk7XHJcbiAgfVxyXG5cclxuICBpbml0RXZlbnQoKSB7XHJcbiAgICB0aGlzLmV2ZW50ID0ge307XHJcbiAgICBjb25zdCBldmVudE5hbWVzID0gW3tcclxuICAgICAgd3hOYW1lOiAndG91Y2hTdGFydCcsXHJcbiAgICAgIGVjTmFtZTogJ21vdXNlZG93bicsXHJcbiAgICB9LCB7XHJcbiAgICAgIHd4TmFtZTogJ3RvdWNoTW92ZScsXHJcbiAgICAgIGVjTmFtZTogJ21vdXNlbW92ZScsXHJcbiAgICB9LCB7XHJcbiAgICAgIHd4TmFtZTogJ3RvdWNoRW5kJyxcclxuICAgICAgZWNOYW1lOiAnbW91c2V1cCcsXHJcbiAgICB9LCB7XHJcbiAgICAgIHd4TmFtZTogJ3RvdWNoRW5kJyxcclxuICAgICAgZWNOYW1lOiAnY2xpY2snLFxyXG4gICAgfV07XHJcblxyXG4gICAgZXZlbnROYW1lcy5mb3JFYWNoKChuYW1lKSA9PiB7XHJcbiAgICAgIHRoaXMuZXZlbnRbbmFtZS53eE5hbWVdID0gKGUpID0+IHtcclxuICAgICAgICBjb25zdCB0b3VjaCA9IGUubXAudG91Y2hlc1swXTtcclxuICAgICAgICB0aGlzLmNoYXJ0Ll96ci5oYW5kbGVyLmRpc3BhdGNoKG5hbWUuZWNOYW1lLCB7XHJcbiAgICAgICAgICB6clg6IG5hbWUud3hOYW1lID09PSAndGFwJyA/IHRvdWNoLmNsaWVudFggOiB0b3VjaC54LFxyXG4gICAgICAgICAgenJZOiBuYW1lLnd4TmFtZSA9PT0gJ3RhcCcgPyB0b3VjaC5jbGllbnRZIDogdG91Y2gueSxcclxuICAgICAgICB9KTtcclxuICAgICAgfTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///358\n");

/***/ }),

/***/ 366:
/*!*******************************************************************************************!*\
  !*** C:/Users/DELL/Documents/HBuilderProjects/CanNengApp/components/uni-calendar/util.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _calendar = _interopRequireDefault(__webpack_require__(/*! ./calendar.js */ 367));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}var\n\nCalendar = /*#__PURE__*/function () {\n  function Calendar()\n\n\n\n\n\n  {var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},date = _ref.date,selected = _ref.selected,startDate = _ref.startDate,endDate = _ref.endDate,range = _ref.range;_classCallCheck(this, Calendar);\n    // 当前日期\n    this.date = this.getDate(date); // 当前初入日期\n    // 打点信息\n    this.selected = selected || [];\n    // 范围开始\n    this.startDate = startDate;\n    // 范围结束\n    this.endDate = endDate;\n    this.range = range;\n    // 多选状态\n    this.multipleStatus = {\n      before: '',\n      after: '',\n      data: []\n\n      // 每周日期\n    };this.weeks = {};\n\n    this._getWeek(this.date.fullDate);\n  }\n\n  /**\r\n     * 获取任意时间\r\n     */_createClass(Calendar, [{ key: \"getDate\", value: function getDate(\n    date) {var AddDayCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;var str = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'day';\n      if (!date) {\n        date = new Date();\n      }\n      if (typeof date !== 'object') {\n        date = date.replace(/-/g, '/');\n      }\n      var dd = new Date(date);\n      switch (str) {\n        case 'day':\n          dd.setDate(dd.getDate() + AddDayCount); // 获取AddDayCount天后的日期\n          break;\n        case 'month':\n          if (dd.getDate() === 31) {\n            dd.setDate(dd.getDate() + AddDayCount);\n          } else {\n            dd.setMonth(dd.getMonth() + AddDayCount); // 获取AddDayCount天后的日期\n          }\n          break;\n        case 'year':\n          dd.setFullYear(dd.getFullYear() + AddDayCount); // 获取AddDayCount天后的日期\n          break;}\n\n      var y = dd.getFullYear();\n      var m = dd.getMonth() + 1 < 10 ? '0' + (dd.getMonth() + 1) : dd.getMonth() + 1; // 获取当前月份的日期，不足10补0\n      var d = dd.getDate() < 10 ? '0' + dd.getDate() : dd.getDate(); // 获取当前几号，不足10补0\n      return {\n        fullDate: y + '-' + m + '-' + d,\n        year: y,\n        month: m,\n        date: d,\n        day: dd.getDay() };\n\n    }\n\n\n    /**\r\n       * 获取上月剩余天数\r\n       */ }, { key: \"_getLastMonthDays\", value: function _getLastMonthDays(\n    firstDay, full) {\n      var dateArr = [];\n      for (var i = firstDay; i > 0; i--) {\n        var beforeDate = new Date(full.year, full.month - 1, -i + 1).getDate();\n        dateArr.push({\n          date: beforeDate,\n          month: full.month - 1,\n          lunar: this.getlunar(full.year, full.month - 1, beforeDate),\n          disable: true });\n\n      }\n      return dateArr;\n    }\n    /**\r\n       * 获取本月天数\r\n       */ }, { key: \"_currentMonthDys\", value: function _currentMonthDys(\n    dateData, full) {var _this = this;\n      var dateArr = [];\n      var fullDate = this.date.fullDate;var _loop = function _loop(\n      i) {\n        var isinfo = false;\n        var nowDate = full.year + '-' + (full.month < 10 ?\n        full.month : full.month) + '-' + (i < 10 ?\n        '0' + i : i);\n        // 是否今天\n        var isDay = fullDate === nowDate;\n        // 获取打点信息\n        var info = _this.selected && _this.selected.find(function (item) {\n          if (_this.dateEqual(nowDate, item.date)) {\n            return item;\n          }\n        });\n\n        // 日期禁用\n        var disableBefore = true;\n        var disableAfter = true;\n        if (_this.startDate) {\n          var dateCompBefore = _this.dateCompare(_this.startDate, fullDate);\n          disableBefore = _this.dateCompare(dateCompBefore ? _this.startDate : fullDate, nowDate);\n        }\n\n        if (_this.endDate) {\n          var dateCompAfter = _this.dateCompare(fullDate, _this.endDate);\n          disableAfter = _this.dateCompare(nowDate, dateCompAfter ? _this.endDate : fullDate);\n        }\n\n        var multiples = _this.multipleStatus.data;\n        var checked = false;\n        var multiplesStatus = -1;\n        if (_this.range) {\n          if (multiples) {\n            multiplesStatus = multiples.findIndex(function (item) {\n              return _this.dateEqual(item, nowDate);\n            });\n          }\n          if (multiplesStatus !== -1) {\n            checked = true;\n          }\n        }\n\n        var data = {\n          fullDate: nowDate,\n          year: full.year,\n          date: i,\n          multiple: _this.range ? checked : false,\n          month: full.month,\n          lunar: _this.getlunar(full.year, full.month, i),\n          disable: !disableBefore || !disableAfter,\n          isDay: isDay };\n\n        if (info) {\n          data.extraInfo = info;\n        }\n\n        dateArr.push(data);};for (var i = 1; i <= dateData; i++) {_loop(i);\n      }\n      return dateArr;\n    }\n    /**\r\n       * 获取下月天数\r\n       */ }, { key: \"_getNextMonthDays\", value: function _getNextMonthDays(\n    surplus, full) {\n      var dateArr = [];\n      for (var i = 1; i < surplus + 1; i++) {\n        dateArr.push({\n          date: i,\n          month: Number(full.month) + 1,\n          lunar: this.getlunar(full.year, Number(full.month) + 1, i),\n          disable: true });\n\n      }\n      return dateArr;\n    }\n    /**\r\n       * 设置日期\r\n       * @param {Object} date\r\n       */ }, { key: \"setDate\", value: function setDate(\n    date) {\n      this._getWeek(date);\n    }\n    /**\r\n       * 获取当前日期详情\r\n       * @param {Object} date\r\n       */ }, { key: \"getInfo\", value: function getInfo(\n    date) {var _this2 = this;\n      if (!date) {\n        date = new Date();\n      }\n      var dateInfo = this.canlender.find(function (item) {return item.fullDate === _this2.getDate(date).fullDate;});\n      return dateInfo;\n    }\n\n    /**\r\n       * 比较时间大小\r\n       */ }, { key: \"dateCompare\", value: function dateCompare(\n    startDate, endDate) {\n      // 计算截止时间\n      startDate = new Date(startDate.replace('-', '/').replace('-', '/'));\n      // 计算详细项的截止时间\n      endDate = new Date(endDate.replace('-', '/').replace('-', '/'));\n      if (startDate <= endDate) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    /**\r\n       * 比较时间是否相等\r\n       */ }, { key: \"dateEqual\", value: function dateEqual(\n    before, after) {\n      // 计算截止时间\n      before = new Date(before.replace('-', '/').replace('-', '/'));\n      // 计算详细项的截止时间\n      after = new Date(after.replace('-', '/').replace('-', '/'));\n      if (before.getTime() - after.getTime() === 0) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n\n    /**\r\n       * 获取日期范围内所有日期\r\n       * @param {Object} begin\r\n       * @param {Object} end\r\n       */ }, { key: \"geDateAll\", value: function geDateAll(\n    begin, end) {\n      var arr = [];\n      var ab = begin.split('-');\n      var ae = end.split('-');\n      var db = new Date();\n      db.setFullYear(ab[0], ab[1] - 1, ab[2]);\n      var de = new Date();\n      de.setFullYear(ae[0], ae[1] - 1, ae[2]);\n      var unixDb = db.getTime() - 24 * 60 * 60 * 1000;\n      var unixDe = de.getTime() - 24 * 60 * 60 * 1000;\n      for (var k = unixDb; k <= unixDe;) {\n        k = k + 24 * 60 * 60 * 1000;\n        arr.push(this.getDate(new Date(parseInt(k))).fullDate);\n      }\n      return arr;\n    }\n    /**\r\n       * 计算阴历日期显示\r\n       */ }, { key: \"getlunar\", value: function getlunar(\n    year, month, date) {\n      return _calendar.default.solar2lunar(year, month, date);\n    }\n    /**\r\n       * 设置打点\r\n       */ }, { key: \"setSelectInfo\", value: function setSelectInfo(\n    data, value) {\n      this.selected = value;\n      this._getWeek(data);\n    }\n\n    /**\r\n       *  获取多选状态\r\n       */ }, { key: \"setMultiple\", value: function setMultiple(\n    fullDate) {var _this$multipleStatus =\n\n\n\n      this.multipleStatus,before = _this$multipleStatus.before,after = _this$multipleStatus.after;\n      if (!this.range) return;\n      if (before && after) {\n        this.multipleStatus.before = '';\n        this.multipleStatus.after = '';\n        this.multipleStatus.data = [];\n        this._getWeek(fullDate);\n      } else {\n        if (!before) {\n          this.multipleStatus.before = fullDate;\n        } else {\n          this.multipleStatus.after = fullDate;\n          if (this.dateCompare(this.multipleStatus.before, this.multipleStatus.after)) {\n            this.multipleStatus.data = this.geDateAll(this.multipleStatus.before, this.multipleStatus.after);\n          } else {\n            this.multipleStatus.data = this.geDateAll(this.multipleStatus.after, this.multipleStatus.before);\n          }\n          this._getWeek(fullDate);\n        }\n      }\n    }\n\n    /**\r\n       * 获取每周数据\r\n       * @param {Object} dateData\r\n       */ }, { key: \"_getWeek\", value: function _getWeek(\n    dateData) {var _this$getDate =\n\n\n\n\n\n\n      this.getDate(dateData),fullDate = _this$getDate.fullDate,year = _this$getDate.year,month = _this$getDate.month,date = _this$getDate.date,day = _this$getDate.day;\n      var firstDay = new Date(year, month - 1, 1).getDay();\n      var currentDay = new Date(year, month, 0).getDate();\n      var dates = {\n        lastMonthDays: this._getLastMonthDays(firstDay, this.getDate(dateData)), // 上个月末尾几天\n        currentMonthDys: this._currentMonthDys(currentDay, this.getDate(dateData)), // 本月天数\n        nextMonthDays: [], // 下个月开始几天\n        weeks: [] };\n\n      var canlender = [];\n      var surplus = 42 - (dates.lastMonthDays.length + dates.currentMonthDys.length);\n      dates.nextMonthDays = this._getNextMonthDays(surplus, this.getDate(dateData));\n      canlender = canlender.concat(dates.lastMonthDays, dates.currentMonthDys, dates.nextMonthDays);\n      var weeks = {};\n      // 拼接数组  上个月开始几天 + 本月天数+ 下个月开始几天\n      for (var i = 0; i < canlender.length; i++) {\n        if (i % 7 === 0) {\n          weeks[parseInt(i / 7)] = new Array(7);\n        }\n        weeks[parseInt(i / 7)][i % 7] = canlender[i];\n      }\n      this.canlender = canlender;\n      this.weeks = weeks;\n    }\n\n    //静态方法\n    // static init(date) {\n    // \tif (!this.instance) {\n    // \t\tthis.instance = new Calendar(date);\n    // \t}\n    // \treturn this.instance;\n    // }\n  }]);return Calendar;}();var _default =\n\n\nCalendar;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///366\n");

/***/ }),

/***/ 367:
/*!***********************************************************************************************!*\
  !*** C:/Users/DELL/Documents/HBuilderProjects/CanNengApp/components/uni-calendar/calendar.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0; /**\n                                                                                                     * @1900-2100区间内的公历、农历互转\n                                                                                                     * @charset UTF-8\n                                                                                                     * @github  https://github.com/jjonline/calendar.js\n                                                                                                     * @Author  Jea杨(JJonline@JJonline.Cn)\n                                                                                                     * @Time    2014-7-21\n                                                                                                     * @Time    2016-8-13 Fixed 2033hex、Attribution Annals\n                                                                                                     * @Time    2016-9-25 Fixed lunar LeapMonth Param Bug\n                                                                                                     * @Time    2017-7-24 Fixed use getTerm Func Param Error.use solar year,NOT lunar year\n                                                                                                     * @Version 1.0.3\n                                                                                                     * @公历转农历：calendar.solar2lunar(1987,11,01); //[you can ignore params of prefix 0]\n                                                                                                     * @农历转公历：calendar.lunar2solar(1987,09,10); //[you can ignore params of prefix 0]\n                                                                                                     */\n/* eslint-disable */\nvar calendar = {\n\n  /**\n                     * 农历1900-2100的润大小信息表\n                     * @Array Of Property\n                     * @return Hex\n                     */\n  lunarInfo: [0x04bd8, 0x04ae0, 0x0a570, 0x054d5, 0x0d260, 0x0d950, 0x16554, 0x056a0, 0x09ad0, 0x055d2, // 1900-1909\n  0x04ae0, 0x0a5b6, 0x0a4d0, 0x0d250, 0x1d255, 0x0b540, 0x0d6a0, 0x0ada2, 0x095b0, 0x14977, // 1910-1919\n  0x04970, 0x0a4b0, 0x0b4b5, 0x06a50, 0x06d40, 0x1ab54, 0x02b60, 0x09570, 0x052f2, 0x04970, // 1920-1929\n  0x06566, 0x0d4a0, 0x0ea50, 0x06e95, 0x05ad0, 0x02b60, 0x186e3, 0x092e0, 0x1c8d7, 0x0c950, // 1930-1939\n  0x0d4a0, 0x1d8a6, 0x0b550, 0x056a0, 0x1a5b4, 0x025d0, 0x092d0, 0x0d2b2, 0x0a950, 0x0b557, // 1940-1949\n  0x06ca0, 0x0b550, 0x15355, 0x04da0, 0x0a5b0, 0x14573, 0x052b0, 0x0a9a8, 0x0e950, 0x06aa0, // 1950-1959\n  0x0aea6, 0x0ab50, 0x04b60, 0x0aae4, 0x0a570, 0x05260, 0x0f263, 0x0d950, 0x05b57, 0x056a0, // 1960-1969\n  0x096d0, 0x04dd5, 0x04ad0, 0x0a4d0, 0x0d4d4, 0x0d250, 0x0d558, 0x0b540, 0x0b6a0, 0x195a6, // 1970-1979\n  0x095b0, 0x049b0, 0x0a974, 0x0a4b0, 0x0b27a, 0x06a50, 0x06d40, 0x0af46, 0x0ab60, 0x09570, // 1980-1989\n  0x04af5, 0x04970, 0x064b0, 0x074a3, 0x0ea50, 0x06b58, 0x05ac0, 0x0ab60, 0x096d5, 0x092e0, // 1990-1999\n  0x0c960, 0x0d954, 0x0d4a0, 0x0da50, 0x07552, 0x056a0, 0x0abb7, 0x025d0, 0x092d0, 0x0cab5, // 2000-2009\n  0x0a950, 0x0b4a0, 0x0baa4, 0x0ad50, 0x055d9, 0x04ba0, 0x0a5b0, 0x15176, 0x052b0, 0x0a930, // 2010-2019\n  0x07954, 0x06aa0, 0x0ad50, 0x05b52, 0x04b60, 0x0a6e6, 0x0a4e0, 0x0d260, 0x0ea65, 0x0d530, // 2020-2029\n  0x05aa0, 0x076a3, 0x096d0, 0x04afb, 0x04ad0, 0x0a4d0, 0x1d0b6, 0x0d250, 0x0d520, 0x0dd45, // 2030-2039\n  0x0b5a0, 0x056d0, 0x055b2, 0x049b0, 0x0a577, 0x0a4b0, 0x0aa50, 0x1b255, 0x06d20, 0x0ada0, // 2040-2049\n  /** Add By JJonline@JJonline.Cn**/\n  0x14b63, 0x09370, 0x049f8, 0x04970, 0x064b0, 0x168a6, 0x0ea50, 0x06b20, 0x1a6c4, 0x0aae0, // 2050-2059\n  0x0a2e0, 0x0d2e3, 0x0c960, 0x0d557, 0x0d4a0, 0x0da50, 0x05d55, 0x056a0, 0x0a6d0, 0x055d4, // 2060-2069\n  0x052d0, 0x0a9b8, 0x0a950, 0x0b4a0, 0x0b6a6, 0x0ad50, 0x055a0, 0x0aba4, 0x0a5b0, 0x052b0, // 2070-2079\n  0x0b273, 0x06930, 0x07337, 0x06aa0, 0x0ad50, 0x14b55, 0x04b60, 0x0a570, 0x054e4, 0x0d160, // 2080-2089\n  0x0e968, 0x0d520, 0x0daa0, 0x16aa6, 0x056d0, 0x04ae0, 0x0a9d4, 0x0a2d0, 0x0d150, 0x0f252, // 2090-2099\n  0x0d520], // 2100\n\n  /**\n      * 公历每个月份的天数普通表\n      * @Array Of Property\n      * @return Number\n      */\n  solarMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n\n  /**\n                                                                    * 天干地支之天干速查表\n                                                                    * @Array Of Property trans[\"甲\",\"乙\",\"丙\",\"丁\",\"戊\",\"己\",\"庚\",\"辛\",\"壬\",\"癸\"]\n                                                                    * @return Cn string\n                                                                    */\n  Gan: [\"\\u7532\", \"\\u4E59\", \"\\u4E19\", \"\\u4E01\", \"\\u620A\", \"\\u5DF1\", \"\\u5E9A\", \"\\u8F9B\", \"\\u58EC\", \"\\u7678\"],\n\n  /**\n                                                                                                                 * 天干地支之地支速查表\n                                                                                                                 * @Array Of Property\n                                                                                                                 * @trans[\"子\",\"丑\",\"寅\",\"卯\",\"辰\",\"巳\",\"午\",\"未\",\"申\",\"酉\",\"戌\",\"亥\"]\n                                                                                                                 * @return Cn string\n                                                                                                                 */\n  Zhi: [\"\\u5B50\", \"\\u4E11\", \"\\u5BC5\", \"\\u536F\", \"\\u8FB0\", \"\\u5DF3\", \"\\u5348\", \"\\u672A\", \"\\u7533\", \"\\u9149\", \"\\u620C\", \"\\u4EA5\"],\n\n  /**\n                                                                                                                                     * 天干地支之地支速查表<=>生肖\n                                                                                                                                     * @Array Of Property\n                                                                                                                                     * @trans[\"鼠\",\"牛\",\"虎\",\"兔\",\"龙\",\"蛇\",\"马\",\"羊\",\"猴\",\"鸡\",\"狗\",\"猪\"]\n                                                                                                                                     * @return Cn string\n                                                                                                                                     */\n  Animals: [\"\\u9F20\", \"\\u725B\", \"\\u864E\", \"\\u5154\", \"\\u9F99\", \"\\u86C7\", \"\\u9A6C\", \"\\u7F8A\", \"\\u7334\", \"\\u9E21\", \"\\u72D7\", \"\\u732A\"],\n\n  /**\n                                                                                                                                         * 24节气速查表\n                                                                                                                                         * @Array Of Property\n                                                                                                                                         * @trans[\"小寒\",\"大寒\",\"立春\",\"雨水\",\"惊蛰\",\"春分\",\"清明\",\"谷雨\",\"立夏\",\"小满\",\"芒种\",\"夏至\",\"小暑\",\"大暑\",\"立秋\",\"处暑\",\"白露\",\"秋分\",\"寒露\",\"霜降\",\"立冬\",\"小雪\",\"大雪\",\"冬至\"]\n                                                                                                                                         * @return Cn string\n                                                                                                                                         */\n  solarTerm: [\"\\u5C0F\\u5BD2\", \"\\u5927\\u5BD2\", \"\\u7ACB\\u6625\", \"\\u96E8\\u6C34\", \"\\u60CA\\u86F0\", \"\\u6625\\u5206\", \"\\u6E05\\u660E\", \"\\u8C37\\u96E8\", \"\\u7ACB\\u590F\", \"\\u5C0F\\u6EE1\", \"\\u8292\\u79CD\", \"\\u590F\\u81F3\", \"\\u5C0F\\u6691\", \"\\u5927\\u6691\", \"\\u7ACB\\u79CB\", \"\\u5904\\u6691\", \"\\u767D\\u9732\", \"\\u79CB\\u5206\", \"\\u5BD2\\u9732\", \"\\u971C\\u964D\", \"\\u7ACB\\u51AC\", \"\\u5C0F\\u96EA\", \"\\u5927\\u96EA\", \"\\u51AC\\u81F3\"],\n\n  /**\n                                                                                                                                                                                                                                                                                                                                                                                                                   * 1900-2100各年的24节气日期速查表\n                                                                                                                                                                                                                                                                                                                                                                                                                   * @Array Of Property\n                                                                                                                                                                                                                                                                                                                                                                                                                   * @return 0x string For splice\n                                                                                                                                                                                                                                                                                                                                                                                                                   */\n  sTermInfo: ['9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf97c3598082c95f8c965cc920f',\n  '97bd0b06bdb0722c965ce1cfcc920f', 'b027097bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e',\n  '97bcf97c359801ec95f8c965cc920f', '97bd0b06bdb0722c965ce1cfcc920f', 'b027097bd097c36b0b6fc9274c91aa',\n  '97b6b97bd19801ec9210c965cc920e', '97bcf97c359801ec95f8c965cc920f', '97bd0b06bdb0722c965ce1cfcc920f',\n  'b027097bd097c36b0b6fc9274c91aa', '9778397bd19801ec9210c965cc920e', '97b6b97bd19801ec95f8c965cc920f',\n  '97bd09801d98082c95f8e1cfcc920f', '97bd097bd097c36b0b6fc9210c8dc2', '9778397bd197c36c9210c9274c91aa',\n  '97b6b97bd19801ec95f8c965cc920e', '97bd09801d98082c95f8e1cfcc920f', '97bd097bd097c36b0b6fc9210c8dc2',\n  '9778397bd097c36c9210c9274c91aa', '97b6b97bd19801ec95f8c965cc920e', '97bcf97c3598082c95f8e1cfcc920f',\n  '97bd097bd097c36b0b6fc9210c8dc2', '9778397bd097c36c9210c9274c91aa', '97b6b97bd19801ec9210c965cc920e',\n  '97bcf97c3598082c95f8c965cc920f', '97bd097bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa',\n  '97b6b97bd19801ec9210c965cc920e', '97bcf97c3598082c95f8c965cc920f', '97bd097bd097c35b0b6fc920fb0722',\n  '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf97c359801ec95f8c965cc920f',\n  '97bd097bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e',\n  '97bcf97c359801ec95f8c965cc920f', '97bd097bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa',\n  '97b6b97bd19801ec9210c965cc920e', '97bcf97c359801ec95f8c965cc920f', '97bd097bd07f595b0b6fc920fb0722',\n  '9778397bd097c36b0b6fc9210c8dc2', '9778397bd19801ec9210c9274c920e', '97b6b97bd19801ec95f8c965cc920f',\n  '97bd07f5307f595b0b0bc920fb0722', '7f0e397bd097c36b0b6fc9210c8dc2', '9778397bd097c36c9210c9274c920e',\n  '97b6b97bd19801ec95f8c965cc920f', '97bd07f5307f595b0b0bc920fb0722', '7f0e397bd097c36b0b6fc9210c8dc2',\n  '9778397bd097c36c9210c9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bd07f1487f595b0b0bc920fb0722',\n  '7f0e397bd097c36b0b6fc9210c8dc2', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e',\n  '97bcf7f1487f595b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa',\n  '97b6b97bd19801ec9210c965cc920e', '97bcf7f1487f595b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722',\n  '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf7f1487f531b0b0bb0b6fb0722',\n  '7f0e397bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e',\n  '97bcf7f1487f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa',\n  '97b6b97bd19801ec9210c9274c920e', '97bcf7f0e47f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722',\n  '9778397bd097c36b0b6fc9210c91aa', '97b6b97bd197c36c9210c9274c920e', '97bcf7f0e47f531b0b0bb0b6fb0722',\n  '7f0e397bd07f595b0b0bc920fb0722', '9778397bd097c36b0b6fc9210c8dc2', '9778397bd097c36c9210c9274c920e',\n  '97b6b7f0e47f531b0723b0b6fb0722', '7f0e37f5307f595b0b0bc920fb0722', '7f0e397bd097c36b0b6fc9210c8dc2',\n  '9778397bd097c36b0b70c9274c91aa', '97b6b7f0e47f531b0723b0b6fb0721', '7f0e37f1487f595b0b0bb0b6fb0722',\n  '7f0e397bd097c35b0b6fc9210c8dc2', '9778397bd097c36b0b6fc9274c91aa', '97b6b7f0e47f531b0723b0b6fb0721',\n  '7f0e27f1487f595b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa',\n  '97b6b7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722',\n  '9778397bd097c36b0b6fc9274c91aa', '97b6b7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722',\n  '7f0e397bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b7f0e47f531b0723b0b6fb0721',\n  '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722', '9778397bd097c36b0b6fc9274c91aa',\n  '97b6b7f0e47f531b0723b0787b0721', '7f0e27f0e47f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722',\n  '9778397bd097c36b0b6fc9210c91aa', '97b6b7f0e47f149b0723b0787b0721', '7f0e27f0e47f531b0723b0b6fb0722',\n  '7f0e397bd07f595b0b0bc920fb0722', '9778397bd097c36b0b6fc9210c8dc2', '977837f0e37f149b0723b0787b0721',\n  '7f07e7f0e47f531b0723b0b6fb0722', '7f0e37f5307f595b0b0bc920fb0722', '7f0e397bd097c35b0b6fc9210c8dc2',\n  '977837f0e37f14998082b0787b0721', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e37f1487f595b0b0bb0b6fb0722',\n  '7f0e397bd097c35b0b6fc9210c8dc2', '977837f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721',\n  '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722', '977837f0e37f14998082b0787b06bd',\n  '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722',\n  '977837f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722',\n  '7f0e397bd07f595b0b0bc920fb0722', '977837f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721',\n  '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722', '977837f0e37f14998082b0787b06bd',\n  '7f07e7f0e47f149b0723b0787b0721', '7f0e27f0e47f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722',\n  '977837f0e37f14998082b0723b06bd', '7f07e7f0e37f149b0723b0787b0721', '7f0e27f0e47f531b0723b0b6fb0722',\n  '7f0e397bd07f595b0b0bc920fb0722', '977837f0e37f14898082b0723b02d5', '7ec967f0e37f14998082b0787b0721',\n  '7f07e7f0e47f531b0723b0b6fb0722', '7f0e37f1487f595b0b0bb0b6fb0722', '7f0e37f0e37f14898082b0723b02d5',\n  '7ec967f0e37f14998082b0787b0721', '7f07e7f0e47f531b0723b0b6fb0722', '7f0e37f1487f531b0b0bb0b6fb0722',\n  '7f0e37f0e37f14898082b0723b02d5', '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721',\n  '7f0e37f1487f531b0b0bb0b6fb0722', '7f0e37f0e37f14898082b072297c35', '7ec967f0e37f14998082b0787b06bd',\n  '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e37f0e37f14898082b072297c35',\n  '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722',\n  '7f0e37f0e366aa89801eb072297c35', '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f149b0723b0787b0721',\n  '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e37f0e366aa89801eb072297c35', '7ec967f0e37f14998082b0723b06bd',\n  '7f07e7f0e47f149b0723b0787b0721', '7f0e27f0e47f531b0723b0b6fb0722', '7f0e37f0e366aa89801eb072297c35',\n  '7ec967f0e37f14998082b0723b06bd', '7f07e7f0e37f14998083b0787b0721', '7f0e27f0e47f531b0723b0b6fb0722',\n  '7f0e37f0e366aa89801eb072297c35', '7ec967f0e37f14898082b0723b02d5', '7f07e7f0e37f14998082b0787b0721',\n  '7f07e7f0e47f531b0723b0b6fb0722', '7f0e36665b66aa89801e9808297c35', '665f67f0e37f14898082b0723b02d5',\n  '7ec967f0e37f14998082b0787b0721', '7f07e7f0e47f531b0723b0b6fb0722', '7f0e36665b66a449801e9808297c35',\n  '665f67f0e37f14898082b0723b02d5', '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721',\n  '7f0e36665b66a449801e9808297c35', '665f67f0e37f14898082b072297c35', '7ec967f0e37f14998082b0787b06bd',\n  '7f07e7f0e47f531b0723b0b6fb0721', '7f0e26665b66a449801e9808297c35', '665f67f0e37f1489801eb072297c35',\n  '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722'],\n\n  /**\n                                                                                                             * 数字转中文速查表\n                                                                                                             * @Array Of Property\n                                                                                                             * @trans ['日','一','二','三','四','五','六','七','八','九','十']\n                                                                                                             * @return Cn string\n                                                                                                             */\n  nStr1: [\"\\u65E5\", \"\\u4E00\", \"\\u4E8C\", \"\\u4E09\", \"\\u56DB\", \"\\u4E94\", \"\\u516D\", \"\\u4E03\", \"\\u516B\", \"\\u4E5D\", \"\\u5341\"],\n\n  /**\n                                                                                                                             * 日期转农历称呼速查表\n                                                                                                                             * @Array Of Property\n                                                                                                                             * @trans ['初','十','廿','卅']\n                                                                                                                             * @return Cn string\n                                                                                                                             */\n  nStr2: [\"\\u521D\", \"\\u5341\", \"\\u5EFF\", \"\\u5345\"],\n\n  /**\n                                                       * 月份转农历称呼速查表\n                                                       * @Array Of Property\n                                                       * @trans ['正','一','二','三','四','五','六','七','八','九','十','冬','腊']\n                                                       * @return Cn string\n                                                       */\n  nStr3: [\"\\u6B63\", \"\\u4E8C\", \"\\u4E09\", \"\\u56DB\", \"\\u4E94\", \"\\u516D\", \"\\u4E03\", \"\\u516B\", \"\\u4E5D\", \"\\u5341\", \"\\u51AC\", \"\\u814A\"],\n\n  /**\n                                                                                                                                       * 返回农历y年一整年的总天数\n                                                                                                                                       * @param lunar Year\n                                                                                                                                       * @return Number\n                                                                                                                                       * @eg:var count = calendar.lYearDays(1987) ;//count=387\n                                                                                                                                       */\n  lYearDays: function lYearDays(y) {\n    var i;var sum = 348;\n    for (i = 0x8000; i > 0x8; i >>= 1) {sum += this.lunarInfo[y - 1900] & i ? 1 : 0;}\n    return sum + this.leapDays(y);\n  },\n\n  /**\n         * 返回农历y年闰月是哪个月；若y年没有闰月 则返回0\n         * @param lunar Year\n         * @return Number (0-12)\n         * @eg:var leapMonth = calendar.leapMonth(1987) ;//leapMonth=6\n         */\n  leapMonth: function leapMonth(y) {// 闰字编码 \\u95f0\n    return this.lunarInfo[y - 1900] & 0xf;\n  },\n\n  /**\n         * 返回农历y年闰月的天数 若该年没有闰月则返回0\n         * @param lunar Year\n         * @return Number (0、29、30)\n         * @eg:var leapMonthDay = calendar.leapDays(1987) ;//leapMonthDay=29\n         */\n  leapDays: function leapDays(y) {\n    if (this.leapMonth(y)) {\n      return this.lunarInfo[y - 1900] & 0x10000 ? 30 : 29;\n    }\n    return 0;\n  },\n\n  /**\n         * 返回农历y年m月（非闰月）的总天数，计算m为闰月时的天数请使用leapDays方法\n         * @param lunar Year\n         * @return Number (-1、29、30)\n         * @eg:var MonthDay = calendar.monthDays(1987,9) ;//MonthDay=29\n         */\n  monthDays: function monthDays(y, m) {\n    if (m > 12 || m < 1) {return -1;} // 月份参数从1至12，参数错误返回-1\n    return this.lunarInfo[y - 1900] & 0x10000 >> m ? 30 : 29;\n  },\n\n  /**\n         * 返回公历(!)y年m月的天数\n         * @param solar Year\n         * @return Number (-1、28、29、30、31)\n         * @eg:var solarMonthDay = calendar.leapDays(1987) ;//solarMonthDay=30\n         */\n  solarDays: function solarDays(y, m) {\n    if (m > 12 || m < 1) {return -1;} // 若参数错误 返回-1\n    var ms = m - 1;\n    if (ms == 1) {// 2月份的闰平规律测算后确认返回28或29\n      return y % 4 == 0 && y % 100 != 0 || y % 400 == 0 ? 29 : 28;\n    } else {\n      return this.solarMonth[ms];\n    }\n  },\n\n  /**\n        * 农历年份转换为干支纪年\n        * @param  lYear 农历年的年份数\n        * @return Cn string\n        */\n  toGanZhiYear: function toGanZhiYear(lYear) {\n    var ganKey = (lYear - 3) % 10;\n    var zhiKey = (lYear - 3) % 12;\n    if (ganKey == 0) ganKey = 10; // 如果余数为0则为最后一个天干\n    if (zhiKey == 0) zhiKey = 12; // 如果余数为0则为最后一个地支\n    return this.Gan[ganKey - 1] + this.Zhi[zhiKey - 1];\n  },\n\n  /**\n        * 公历月、日判断所属星座\n        * @param  cMonth [description]\n        * @param  cDay [description]\n        * @return Cn string\n        */\n  toAstro: function toAstro(cMonth, cDay) {\n    var s = \"\\u9B54\\u7FAF\\u6C34\\u74F6\\u53CC\\u9C7C\\u767D\\u7F8A\\u91D1\\u725B\\u53CC\\u5B50\\u5DE8\\u87F9\\u72EE\\u5B50\\u5904\\u5973\\u5929\\u79E4\\u5929\\u874E\\u5C04\\u624B\\u9B54\\u7FAF\";\n    var arr = [20, 19, 21, 21, 21, 22, 23, 23, 23, 23, 22, 22];\n    return s.substr(cMonth * 2 - (cDay < arr[cMonth - 1] ? 2 : 0), 2) + \"\\u5EA7\"; // 座\n  },\n\n  /**\n         * 传入offset偏移量返回干支\n         * @param offset 相对甲子的偏移量\n         * @return Cn string\n         */\n  toGanZhi: function toGanZhi(offset) {\n    return this.Gan[offset % 10] + this.Zhi[offset % 12];\n  },\n\n  /**\n         * 传入公历(!)y年获得该年第n个节气的公历日期\n         * @param y公历年(1900-2100)；n二十四节气中的第几个节气(1~24)；从n=1(小寒)算起\n         * @return day Number\n         * @eg:var _24 = calendar.getTerm(1987,3) ;//_24=4;意即1987年2月4日立春\n         */\n  getTerm: function getTerm(y, n) {\n    if (y < 1900 || y > 2100) {return -1;}\n    if (n < 1 || n > 24) {return -1;}\n    var _table = this.sTermInfo[y - 1900];\n    var _info = [\n    parseInt('0x' + _table.substr(0, 5)).toString(),\n    parseInt('0x' + _table.substr(5, 5)).toString(),\n    parseInt('0x' + _table.substr(10, 5)).toString(),\n    parseInt('0x' + _table.substr(15, 5)).toString(),\n    parseInt('0x' + _table.substr(20, 5)).toString(),\n    parseInt('0x' + _table.substr(25, 5)).toString()];\n\n    var _calday = [\n    _info[0].substr(0, 1),\n    _info[0].substr(1, 2),\n    _info[0].substr(3, 1),\n    _info[0].substr(4, 2),\n\n    _info[1].substr(0, 1),\n    _info[1].substr(1, 2),\n    _info[1].substr(3, 1),\n    _info[1].substr(4, 2),\n\n    _info[2].substr(0, 1),\n    _info[2].substr(1, 2),\n    _info[2].substr(3, 1),\n    _info[2].substr(4, 2),\n\n    _info[3].substr(0, 1),\n    _info[3].substr(1, 2),\n    _info[3].substr(3, 1),\n    _info[3].substr(4, 2),\n\n    _info[4].substr(0, 1),\n    _info[4].substr(1, 2),\n    _info[4].substr(3, 1),\n    _info[4].substr(4, 2),\n\n    _info[5].substr(0, 1),\n    _info[5].substr(1, 2),\n    _info[5].substr(3, 1),\n    _info[5].substr(4, 2)];\n\n    return parseInt(_calday[n - 1]);\n  },\n\n  /**\n         * 传入农历数字月份返回汉语通俗表示法\n         * @param lunar month\n         * @return Cn string\n         * @eg:var cnMonth = calendar.toChinaMonth(12) ;//cnMonth='腊月'\n         */\n  toChinaMonth: function toChinaMonth(m) {// 月 => \\u6708\n    if (m > 12 || m < 1) {return -1;} // 若参数错误 返回-1\n    var s = this.nStr3[m - 1];\n    s += \"\\u6708\"; // 加上月字\n    return s;\n  },\n\n  /**\n         * 传入农历日期数字返回汉字表示法\n         * @param lunar day\n         * @return Cn string\n         * @eg:var cnDay = calendar.toChinaDay(21) ;//cnMonth='廿一'\n         */\n  toChinaDay: function toChinaDay(d) {// 日 => \\u65e5\n    var s;\n    switch (d) {\n      case 10:\n        s = \"\\u521D\\u5341\";break;\n      case 20:\n        s = \"\\u4E8C\\u5341\";break;\n        break;\n      case 30:\n        s = \"\\u4E09\\u5341\";break;\n        break;\n      default:\n        s = this.nStr2[Math.floor(d / 10)];\n        s += this.nStr1[d % 10];}\n\n    return s;\n  },\n\n  /**\n         * 年份转生肖[!仅能大致转换] => 精确划分生肖分界线是“立春”\n         * @param y year\n         * @return Cn string\n         * @eg:var animal = calendar.getAnimal(1987) ;//animal='兔'\n         */\n  getAnimal: function getAnimal(y) {\n    return this.Animals[(y - 4) % 12];\n  },\n\n  /**\n         * 传入阳历年月日获得详细的公历、农历object信息 <=>JSON\n         * @param y  solar year\n         * @param m  solar month\n         * @param d  solar day\n         * @return JSON object\n         * @eg:console.log(calendar.solar2lunar(1987,11,01));\n         */\n  solar2lunar: function solar2lunar(y, m, d) {// 参数区间1900.1.31~2100.12.31\n    // 年份限定、上限\n    if (y < 1900 || y > 2100) {\n      return -1; // undefined转换为数字变为NaN\n    }\n    // 公历传参最下限\n    if (y == 1900 && m == 1 && d < 31) {\n      return -1;\n    }\n    // 未传参  获得当天\n    if (!y) {\n      var objDate = new Date();\n    } else {\n      var objDate = new Date(y, parseInt(m) - 1, d);\n    }\n    var i;var leap = 0;var temp = 0;\n    // 修正ymd参数\n    var y = objDate.getFullYear();\n    var m = objDate.getMonth() + 1;\n    var d = objDate.getDate();\n    var offset = (Date.UTC(objDate.getFullYear(), objDate.getMonth(), objDate.getDate()) - Date.UTC(1900, 0, 31)) / 86400000;\n    for (i = 1900; i < 2101 && offset > 0; i++) {\n      temp = this.lYearDays(i);\n      offset -= temp;\n    }\n    if (offset < 0) {\n      offset += temp;i--;\n    }\n\n    // 是否今天\n    var isTodayObj = new Date();\n    var isToday = false;\n    if (isTodayObj.getFullYear() == y && isTodayObj.getMonth() + 1 == m && isTodayObj.getDate() == d) {\n      isToday = true;\n    }\n    // 星期几\n    var nWeek = objDate.getDay();\n    var cWeek = this.nStr1[nWeek];\n    // 数字表示周几顺应天朝周一开始的惯例\n    if (nWeek == 0) {\n      nWeek = 7;\n    }\n    // 农历年\n    var year = i;\n    var leap = this.leapMonth(i); // 闰哪个月\n    var isLeap = false;\n\n    // 效验闰月\n    for (i = 1; i < 13 && offset > 0; i++) {\n      // 闰月\n      if (leap > 0 && i == leap + 1 && isLeap == false) {\n        --i;\n        isLeap = true;temp = this.leapDays(year); // 计算农历闰月天数\n      } else {\n        temp = this.monthDays(year, i); // 计算农历普通月天数\n      }\n      // 解除闰月\n      if (isLeap == true && i == leap + 1) {isLeap = false;}\n      offset -= temp;\n    }\n    // 闰月导致数组下标重叠取反\n    if (offset == 0 && leap > 0 && i == leap + 1) {\n      if (isLeap) {\n        isLeap = false;\n      } else {\n        isLeap = true;--i;\n      }\n    }\n    if (offset < 0) {\n      offset += temp;--i;\n    }\n    // 农历月\n    var month = i;\n    // 农历日\n    var day = offset + 1;\n    // 天干地支处理\n    var sm = m - 1;\n    var gzY = this.toGanZhiYear(year);\n\n    // 当月的两个节气\n    // bugfix-2017-7-24 11:03:38 use lunar Year Param `y` Not `year`\n    var firstNode = this.getTerm(y, m * 2 - 1); // 返回当月「节」为几日开始\n    var secondNode = this.getTerm(y, m * 2); // 返回当月「节」为几日开始\n\n    // 依据12节气修正干支月\n    var gzM = this.toGanZhi((y - 1900) * 12 + m + 11);\n    if (d >= firstNode) {\n      gzM = this.toGanZhi((y - 1900) * 12 + m + 12);\n    }\n\n    // 传入的日期的节气与否\n    var isTerm = false;\n    var Term = null;\n    if (firstNode == d) {\n      isTerm = true;\n      Term = this.solarTerm[m * 2 - 2];\n    }\n    if (secondNode == d) {\n      isTerm = true;\n      Term = this.solarTerm[m * 2 - 1];\n    }\n    // 日柱 当月一日与 1900/1/1 相差天数\n    var dayCyclical = Date.UTC(y, sm, 1, 0, 0, 0, 0) / 86400000 + 25567 + 10;\n    var gzD = this.toGanZhi(dayCyclical + d - 1);\n    // 该日期所属的星座\n    var astro = this.toAstro(m, d);\n\n    return { 'lYear': year, 'lMonth': month, 'lDay': day, 'Animal': this.getAnimal(year), 'IMonthCn': (isLeap ? \"\\u95F0\" : '') + this.toChinaMonth(month), 'IDayCn': this.toChinaDay(day), 'cYear': y, 'cMonth': m, 'cDay': d, 'gzYear': gzY, 'gzMonth': gzM, 'gzDay': gzD, 'isToday': isToday, 'isLeap': isLeap, 'nWeek': nWeek, 'ncWeek': \"\\u661F\\u671F\" + cWeek, 'isTerm': isTerm, 'Term': Term, 'astro': astro };\n  },\n\n  /**\n         * 传入农历年月日以及传入的月份是否闰月获得详细的公历、农历object信息 <=>JSON\n         * @param y  lunar year\n         * @param m  lunar month\n         * @param d  lunar day\n         * @param isLeapMonth  lunar month is leap or not.[如果是农历闰月第四个参数赋值true即可]\n         * @return JSON object\n         * @eg:console.log(calendar.lunar2solar(1987,9,10));\n         */\n  lunar2solar: function lunar2solar(y, m, d, isLeapMonth) {// 参数区间1900.1.31~2100.12.1\n    var isLeapMonth = !!isLeapMonth;\n    var leapOffset = 0;\n    var leapMonth = this.leapMonth(y);\n    var leapDay = this.leapDays(y);\n    if (isLeapMonth && leapMonth != m) {return -1;} // 传参要求计算该闰月公历 但该年得出的闰月与传参的月份并不同\n    if (y == 2100 && m == 12 && d > 1 || y == 1900 && m == 1 && d < 31) {return -1;} // 超出了最大极限值\n    var day = this.monthDays(y, m);\n    var _day = day;\n    // bugFix 2016-9-25\n    // if month is leap, _day use leapDays method\n    if (isLeapMonth) {\n      _day = this.leapDays(y, m);\n    }\n    if (y < 1900 || y > 2100 || d > _day) {return -1;} // 参数合法性效验\n\n    // 计算农历的时间差\n    var offset = 0;\n    for (var i = 1900; i < y; i++) {\n      offset += this.lYearDays(i);\n    }\n    var leap = 0;var isAdd = false;\n    for (var i = 1; i < m; i++) {\n      leap = this.leapMonth(y);\n      if (!isAdd) {// 处理闰月\n        if (leap <= i && leap > 0) {\n          offset += this.leapDays(y);isAdd = true;\n        }\n      }\n      offset += this.monthDays(y, i);\n    }\n    // 转换闰月农历 需补充该年闰月的前一个月的时差\n    if (isLeapMonth) {offset += day;}\n    // 1900年农历正月一日的公历时间为1900年1月30日0时0分0秒(该时间也是本农历的最开始起始点)\n    var stmap = Date.UTC(1900, 1, 30, 0, 0, 0);\n    var calObj = new Date((offset + d - 31) * 86400000 + stmap);\n    var cY = calObj.getUTCFullYear();\n    var cM = calObj.getUTCMonth() + 1;\n    var cD = calObj.getUTCDate();\n\n    return this.solar2lunar(cY, cM, cD);\n  } };var _default =\n\n\ncalendar;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///367\n");

/***/ }),

/***/ 4:
/*!*********************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = formatLog;function typof(v) {\n  var s = Object.prototype.toString.call(v);\n  return s.substring(8, s.length - 1);\n}\n\nfunction isDebugMode() {\n  /* eslint-disable no-undef */\n  return typeof __channelId__ === 'string' && __channelId__;\n}\n\nfunction formatLog() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  var type = args.shift();\n  if (isDebugMode()) {\n    args.push(args.pop().replace('at ', 'uni-app:///'));\n    return console[type]['apply'](console, args);\n  }\n\n  var msgs = args.map(function (v) {\n    var type = Object.prototype.toString.call(v);\n\n    if (type.toLowerCase() === '[object object]') {\n      try {\n        v = '---BEGIN:JSON---' + JSON.stringify(v) + '---END:JSON---';\n      } catch (e) {\n        v = '[object object]';\n      }\n    } else {\n      if (v === null) {\n        v = '---NULL---';\n      } else if (v === undefined) {\n        v = '---UNDEFINED---';\n      } else {\n        var vType = typof(v).toUpperCase();\n\n        if (vType === 'NUMBER' || vType === 'BOOLEAN') {\n          v = '---BEGIN:' + vType + '---' + v + '---END:' + vType + '---';\n        } else {\n          v = String(v);\n        }\n      }\n    }\n\n    return v;\n  });\n  var msg = '';\n\n  if (msgs.length > 1) {\n    var lastMsg = msgs.pop();\n    msg = msgs.join('---COMMA---');\n\n    if (lastMsg.indexOf(' at ') === 0) {\n      msg += lastMsg;\n    } else {\n      msg += '---COMMA---' + lastMsg;\n    }\n  } else {\n    msg = msgs[0];\n  }\n\n  console[type](msg);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbInR5cG9mIiwidiIsInMiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJzdWJzdHJpbmciLCJsZW5ndGgiLCJpc0RlYnVnTW9kZSIsIl9fY2hhbm5lbElkX18iLCJmb3JtYXRMb2ciLCJfbGVuIiwiYXJndW1lbnRzIiwiYXJncyIsIkFycmF5IiwiX2tleSIsInR5cGUiLCJzaGlmdCIsInB1c2giLCJwb3AiLCJyZXBsYWNlIiwiY29uc29sZSIsIm1zZ3MiLCJtYXAiLCJ0b0xvd2VyQ2FzZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJlIiwidW5kZWZpbmVkIiwidlR5cGUiLCJ0b1VwcGVyQ2FzZSIsIlN0cmluZyIsIm1zZyIsImxhc3RNc2ciLCJqb2luIiwiaW5kZXhPZiJdLCJtYXBwaW5ncyI6IjBGQUFBLFNBQVNBLEtBQVQsQ0FBZ0JDLENBQWhCLEVBQW1CO0FBQ2pCLE1BQUlDLENBQUMsR0FBR0MsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JMLENBQS9CLENBQVI7QUFDQSxTQUFPQyxDQUFDLENBQUNLLFNBQUYsQ0FBWSxDQUFaLEVBQWVMLENBQUMsQ0FBQ00sTUFBRixHQUFXLENBQTFCLENBQVA7QUFDRDs7QUFFRCxTQUFTQyxXQUFULEdBQXdCO0FBQ3RCO0FBQ0EsU0FBTyxPQUFPQyxhQUFQLEtBQXlCLFFBQXpCLElBQXFDQSxhQUE1QztBQUNEOztBQUVjLFNBQVNDLFNBQVQsR0FBc0I7QUFDbkMsT0FBSyxJQUFJQyxJQUFJLEdBQUdDLFNBQVMsQ0FBQ0wsTUFBckIsRUFBNkJNLElBQUksR0FBRyxJQUFJQyxLQUFKLENBQVVILElBQVYsQ0FBcEMsRUFBcURJLElBQUksR0FBRyxDQUFqRSxFQUFvRUEsSUFBSSxHQUFHSixJQUEzRSxFQUFpRkksSUFBSSxFQUFyRixFQUF5RjtBQUN2RkYsUUFBSSxDQUFDRSxJQUFELENBQUosR0FBYUgsU0FBUyxDQUFDRyxJQUFELENBQXRCO0FBQ0Q7QUFDRCxNQUFJQyxJQUFJLEdBQUdILElBQUksQ0FBQ0ksS0FBTCxFQUFYO0FBQ0EsTUFBSVQsV0FBVyxFQUFmLEVBQW1CO0FBQ2pCSyxRQUFJLENBQUNLLElBQUwsQ0FBVUwsSUFBSSxDQUFDTSxHQUFMLEdBQVdDLE9BQVgsQ0FBbUIsS0FBbkIsRUFBMEIsYUFBMUIsQ0FBVjtBQUNBLFdBQU9DLE9BQU8sQ0FBQ0wsSUFBRCxDQUFQLENBQWMsT0FBZCxFQUF1QkssT0FBdkIsRUFBZ0NSLElBQWhDLENBQVA7QUFDRDs7QUFFRCxNQUFJUyxJQUFJLEdBQUdULElBQUksQ0FBQ1UsR0FBTCxDQUFTLFVBQVV2QixDQUFWLEVBQWE7QUFDL0IsUUFBSWdCLElBQUksR0FBR2QsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JMLENBQS9CLENBQVg7O0FBRUEsUUFBSWdCLElBQUksQ0FBQ1EsV0FBTCxPQUF1QixpQkFBM0IsRUFBOEM7QUFDNUMsVUFBSTtBQUNGeEIsU0FBQyxHQUFHLHFCQUFxQnlCLElBQUksQ0FBQ0MsU0FBTCxDQUFlMUIsQ0FBZixDQUFyQixHQUF5QyxnQkFBN0M7QUFDRCxPQUZELENBRUUsT0FBTzJCLENBQVAsRUFBVTtBQUNWM0IsU0FBQyxHQUFHLGlCQUFKO0FBQ0Q7QUFDRixLQU5ELE1BTU87QUFDTCxVQUFJQSxDQUFDLEtBQUssSUFBVixFQUFnQjtBQUNkQSxTQUFDLEdBQUcsWUFBSjtBQUNELE9BRkQsTUFFTyxJQUFJQSxDQUFDLEtBQUs0QixTQUFWLEVBQXFCO0FBQzFCNUIsU0FBQyxHQUFHLGlCQUFKO0FBQ0QsT0FGTSxNQUVBO0FBQ0wsWUFBSTZCLEtBQUssR0FBRzlCLEtBQUssQ0FBQ0MsQ0FBRCxDQUFMLENBQVM4QixXQUFULEVBQVo7O0FBRUEsWUFBSUQsS0FBSyxLQUFLLFFBQVYsSUFBc0JBLEtBQUssS0FBSyxTQUFwQyxFQUErQztBQUM3QzdCLFdBQUMsR0FBRyxjQUFjNkIsS0FBZCxHQUFzQixLQUF0QixHQUE4QjdCLENBQTlCLEdBQWtDLFNBQWxDLEdBQThDNkIsS0FBOUMsR0FBc0QsS0FBMUQ7QUFDRCxTQUZELE1BRU87QUFDTDdCLFdBQUMsR0FBRytCLE1BQU0sQ0FBQy9CLENBQUQsQ0FBVjtBQUNEO0FBQ0Y7QUFDRjs7QUFFRCxXQUFPQSxDQUFQO0FBQ0QsR0ExQlUsQ0FBWDtBQTJCQSxNQUFJZ0MsR0FBRyxHQUFHLEVBQVY7O0FBRUEsTUFBSVYsSUFBSSxDQUFDZixNQUFMLEdBQWMsQ0FBbEIsRUFBcUI7QUFDbkIsUUFBSTBCLE9BQU8sR0FBR1gsSUFBSSxDQUFDSCxHQUFMLEVBQWQ7QUFDQWEsT0FBRyxHQUFHVixJQUFJLENBQUNZLElBQUwsQ0FBVSxhQUFWLENBQU47O0FBRUEsUUFBSUQsT0FBTyxDQUFDRSxPQUFSLENBQWdCLE1BQWhCLE1BQTRCLENBQWhDLEVBQW1DO0FBQ2pDSCxTQUFHLElBQUlDLE9BQVA7QUFDRCxLQUZELE1BRU87QUFDTEQsU0FBRyxJQUFJLGdCQUFnQkMsT0FBdkI7QUFDRDtBQUNGLEdBVEQsTUFTTztBQUNMRCxPQUFHLEdBQUdWLElBQUksQ0FBQyxDQUFELENBQVY7QUFDRDs7QUFFREQsU0FBTyxDQUFDTCxJQUFELENBQVAsQ0FBY2dCLEdBQWQ7QUFDRCIsImZpbGUiOiI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gdHlwb2YgKHYpIHtcclxuICB2YXIgcyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2KVxyXG4gIHJldHVybiBzLnN1YnN0cmluZyg4LCBzLmxlbmd0aCAtIDEpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzRGVidWdNb2RlICgpIHtcclxuICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiAqL1xyXG4gIHJldHVybiB0eXBlb2YgX19jaGFubmVsSWRfXyA9PT0gJ3N0cmluZycgJiYgX19jaGFubmVsSWRfX1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRMb2cgKCkge1xyXG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xyXG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XVxyXG4gIH1cclxuICB2YXIgdHlwZSA9IGFyZ3Muc2hpZnQoKVxyXG4gIGlmIChpc0RlYnVnTW9kZSgpKSB7XHJcbiAgICBhcmdzLnB1c2goYXJncy5wb3AoKS5yZXBsYWNlKCdhdCAnLCAndW5pLWFwcDovLy8nKSlcclxuICAgIHJldHVybiBjb25zb2xlW3R5cGVdWydhcHBseSddKGNvbnNvbGUsIGFyZ3MpXHJcbiAgfVxyXG5cclxuICB2YXIgbXNncyA9IGFyZ3MubWFwKGZ1bmN0aW9uICh2KSB7XHJcbiAgICB2YXIgdHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2KVxyXG5cclxuICAgIGlmICh0eXBlLnRvTG93ZXJDYXNlKCkgPT09ICdbb2JqZWN0IG9iamVjdF0nKSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgdiA9ICctLS1CRUdJTjpKU09OLS0tJyArIEpTT04uc3RyaW5naWZ5KHYpICsgJy0tLUVORDpKU09OLS0tJ1xyXG4gICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgdiA9ICdbb2JqZWN0IG9iamVjdF0nXHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmICh2ID09PSBudWxsKSB7XHJcbiAgICAgICAgdiA9ICctLS1OVUxMLS0tJ1xyXG4gICAgICB9IGVsc2UgaWYgKHYgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHYgPSAnLS0tVU5ERUZJTkVELS0tJ1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHZhciB2VHlwZSA9IHR5cG9mKHYpLnRvVXBwZXJDYXNlKClcclxuXHJcbiAgICAgICAgaWYgKHZUeXBlID09PSAnTlVNQkVSJyB8fCB2VHlwZSA9PT0gJ0JPT0xFQU4nKSB7XHJcbiAgICAgICAgICB2ID0gJy0tLUJFR0lOOicgKyB2VHlwZSArICctLS0nICsgdiArICctLS1FTkQ6JyArIHZUeXBlICsgJy0tLSdcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdiA9IFN0cmluZyh2KVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB2XHJcbiAgfSlcclxuICB2YXIgbXNnID0gJydcclxuXHJcbiAgaWYgKG1zZ3MubGVuZ3RoID4gMSkge1xyXG4gICAgdmFyIGxhc3RNc2cgPSBtc2dzLnBvcCgpXHJcbiAgICBtc2cgPSBtc2dzLmpvaW4oJy0tLUNPTU1BLS0tJylcclxuXHJcbiAgICBpZiAobGFzdE1zZy5pbmRleE9mKCcgYXQgJykgPT09IDApIHtcclxuICAgICAgbXNnICs9IGxhc3RNc2dcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG1zZyArPSAnLS0tQ09NTUEtLS0nICsgbGFzdE1zZ1xyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICBtc2cgPSBtc2dzWzBdXHJcbiAgfVxyXG5cclxuICBjb25zb2xlW3R5cGVdKG1zZylcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n");

/***/ }),

/***/ 5:
/*!**********************************************************************!*\
  !*** C:/Users/DELL/Documents/HBuilderProjects/CanNengApp/pages.json ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI1LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5\n");

/***/ }),

/***/ 6:
/*!*******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/dist/index.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {var _package = __webpack_require__(/*! ../package.json */ 7);function _possibleConstructorReturn(self, call) {if (call && (typeof call === \"object\" || typeof call === \"function\")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}\n\nvar STAT_VERSION = _package.version;\nvar STAT_URL = 'https://tongji.dcloud.io/uni/stat';\nvar STAT_H5_URL = 'https://tongji.dcloud.io/uni/stat.gif';\nvar PAGE_PVER_TIME = 1800;\nvar APP_PVER_TIME = 300;\nvar OPERATING_TIME = 10;\n\nvar UUID_KEY = '__DC_STAT_UUID';\nvar UUID_VALUE = '__DC_UUID_VALUE';\n\nfunction getUuid() {\n  var uuid = '';\n  if (getPlatformName() === 'n') {\n    try {\n      uuid = plus.runtime.getDCloudId();\n    } catch (e) {\n      uuid = '';\n    }\n    return uuid;\n  }\n\n  try {\n    uuid = uni.getStorageSync(UUID_KEY);\n  } catch (e) {\n    uuid = UUID_VALUE;\n  }\n\n  if (!uuid) {\n    uuid = Date.now() + '' + Math.floor(Math.random() * 1e7);\n    try {\n      uni.setStorageSync(UUID_KEY, uuid);\n    } catch (e) {\n      uni.setStorageSync(UUID_KEY, UUID_VALUE);\n    }\n  }\n  return uuid;\n}\n\nvar getSgin = function getSgin(statData) {\n  var arr = Object.keys(statData);\n  var sortArr = arr.sort();\n  var sgin = {};\n  var sginStr = '';\n  for (var i in sortArr) {\n    sgin[sortArr[i]] = statData[sortArr[i]];\n    sginStr += sortArr[i] + '=' + statData[sortArr[i]] + '&';\n  }\n  // const options = sginStr.substr(0, sginStr.length - 1)\n  // sginStr = sginStr.substr(0, sginStr.length - 1) + '&key=' + STAT_KEY;\n  // const si = crypto.createHash('md5').update(sginStr).digest('hex');\n  return {\n    sign: '',\n    options: sginStr.substr(0, sginStr.length - 1) };\n\n};\n\nvar getSplicing = function getSplicing(data) {\n  var str = '';\n  for (var i in data) {\n    str += i + '=' + data[i] + '&';\n  }\n  return str.substr(0, str.length - 1);\n};\n\nvar getTime = function getTime() {\n  return parseInt(new Date().getTime() / 1000);\n};\n\nvar getPlatformName = function getPlatformName() {\n  var platformList = {\n    'app-plus': 'n',\n    'h5': 'h5',\n    'mp-weixin': 'wx',\n    'mp-alipay': 'ali',\n    'mp-baidu': 'bd',\n    'mp-toutiao': 'tt',\n    'mp-qq': 'qq' };\n\n  return platformList[\"app-plus\"];\n};\n\nvar getPackName = function getPackName() {\n  var packName = '';\n  if (getPlatformName() === 'wx' || getPlatformName() === 'qq') {\n    // 兼容微信小程序低版本基础库\n    if (uni.canIUse('getAccountInfoSync')) {\n      packName = uni.getAccountInfoSync().miniProgram.appId || '';\n    }\n  }\n  return packName;\n};\n\nvar getVersion = function getVersion() {\n  return getPlatformName() === 'n' ? plus.runtime.version : '';\n};\n\nvar getChannel = function getChannel() {\n  var platformName = getPlatformName();\n  var channel = '';\n  if (platformName === 'n') {\n    channel = plus.runtime.channel;\n  }\n  return channel;\n};\n\nvar getScene = function getScene(options) {\n  var platformName = getPlatformName();\n  var scene = '';\n  if (options) {\n    return options;\n  }\n  if (platformName === 'wx') {\n    scene = uni.getLaunchOptionsSync().scene;\n  }\n  return scene;\n};\nvar First__Visit__Time__KEY = 'First__Visit__Time';\nvar Last__Visit__Time__KEY = 'Last__Visit__Time';\n\nvar getFirstVisitTime = function getFirstVisitTime() {\n  var timeStorge = uni.getStorageSync(First__Visit__Time__KEY);\n  var time = 0;\n  if (timeStorge) {\n    time = timeStorge;\n  } else {\n    time = getTime();\n    uni.setStorageSync(First__Visit__Time__KEY, time);\n    uni.removeStorageSync(Last__Visit__Time__KEY);\n  }\n  return time;\n};\n\nvar getLastVisitTime = function getLastVisitTime() {\n  var timeStorge = uni.getStorageSync(Last__Visit__Time__KEY);\n  var time = 0;\n  if (timeStorge) {\n    time = timeStorge;\n  } else {\n    time = '';\n  }\n  uni.setStorageSync(Last__Visit__Time__KEY, getTime());\n  return time;\n};\n\n\nvar PAGE_RESIDENCE_TIME = '__page__residence__time';\nvar First_Page_residence_time = 0;\nvar Last_Page_residence_time = 0;\n\n\nvar setPageResidenceTime = function setPageResidenceTime() {\n  First_Page_residence_time = getTime();\n  if (getPlatformName() === 'n') {\n    uni.setStorageSync(PAGE_RESIDENCE_TIME, getTime());\n  }\n  return First_Page_residence_time;\n};\n\nvar getPageResidenceTime = function getPageResidenceTime() {\n  Last_Page_residence_time = getTime();\n  if (getPlatformName() === 'n') {\n    First_Page_residence_time = uni.getStorageSync(PAGE_RESIDENCE_TIME);\n  }\n  return Last_Page_residence_time - First_Page_residence_time;\n};\nvar TOTAL__VISIT__COUNT = 'Total__Visit__Count';\nvar getTotalVisitCount = function getTotalVisitCount() {\n  var timeStorge = uni.getStorageSync(TOTAL__VISIT__COUNT);\n  var count = 1;\n  if (timeStorge) {\n    count = timeStorge;\n    count++;\n  }\n  uni.setStorageSync(TOTAL__VISIT__COUNT, count);\n  return count;\n};\n\nvar GetEncodeURIComponentOptions = function GetEncodeURIComponentOptions(statData) {\n  var data = {};\n  for (var prop in statData) {\n    data[prop] = encodeURIComponent(statData[prop]);\n  }\n  return data;\n};\n\nvar Set__First__Time = 0;\nvar Set__Last__Time = 0;\n\nvar getFirstTime = function getFirstTime() {\n  var time = new Date().getTime();\n  Set__First__Time = time;\n  Set__Last__Time = 0;\n  return time;\n};\n\n\nvar getLastTime = function getLastTime() {\n  var time = new Date().getTime();\n  Set__Last__Time = time;\n  return time;\n};\n\n\nvar getResidenceTime = function getResidenceTime(type) {\n  var residenceTime = 0;\n  if (Set__First__Time !== 0) {\n    residenceTime = Set__Last__Time - Set__First__Time;\n  }\n\n  residenceTime = parseInt(residenceTime / 1000);\n  residenceTime = residenceTime < 1 ? 1 : residenceTime;\n  if (type === 'app') {\n    var overtime = residenceTime > APP_PVER_TIME ? true : false;\n    return {\n      residenceTime: residenceTime,\n      overtime: overtime };\n\n  }\n  if (type === 'page') {\n    var _overtime = residenceTime > PAGE_PVER_TIME ? true : false;\n    return {\n      residenceTime: residenceTime,\n      overtime: _overtime };\n\n  }\n\n  return {\n    residenceTime: residenceTime };\n\n\n};\n\nvar getRoute = function getRoute() {\n  var pages = getCurrentPages();\n  var page = pages[pages.length - 1];\n  var _self = page.$vm;\n\n  if (getPlatformName() === 'bd') {\n    return _self.$mp && _self.$mp.page.is;\n  } else {\n    return _self.$scope && _self.$scope.route || _self.$mp && _self.$mp.page.route;\n  }\n};\n\nvar getPageRoute = function getPageRoute(self) {\n  var pages = getCurrentPages();\n  var page = pages[pages.length - 1];\n  var _self = page.$vm;\n  var query = self._query;\n  var str = query && JSON.stringify(query) !== '{}' ? '?' + JSON.stringify(query) : '';\n  // clear\n  self._query = '';\n  if (getPlatformName() === 'bd') {\n    return _self.$mp && _self.$mp.page.is + str;\n  } else {\n    return _self.$scope && _self.$scope.route + str || _self.$mp && _self.$mp.page.route + str;\n  }\n};\n\nvar getPageTypes = function getPageTypes(self) {\n  if (self.mpType === 'page' || self.$mp && self.$mp.mpType === 'page' || self.$options.mpType === 'page') {\n    return true;\n  }\n  return false;\n};\n\nvar calibration = function calibration(eventName, options) {\n  //  login 、 share 、pay_success 、pay_fail 、register 、title\n  if (!eventName) {\n    console.error(\"uni.report \\u7F3A\\u5C11 [eventName] \\u53C2\\u6570\");\n    return true;\n  }\n  if (typeof eventName !== 'string') {\n    console.error(\"uni.report [eventName] \\u53C2\\u6570\\u7C7B\\u578B\\u9519\\u8BEF,\\u53EA\\u80FD\\u4E3A String \\u7C7B\\u578B\");\n    return true;\n  }\n  if (eventName.length > 255) {\n    console.error(\"uni.report [eventName] \\u53C2\\u6570\\u957F\\u5EA6\\u4E0D\\u80FD\\u5927\\u4E8E 255\");\n    return true;\n  }\n\n  if (typeof options !== 'string' && typeof options !== 'object') {\n    console.error(\"uni.report [options] \\u53C2\\u6570\\u7C7B\\u578B\\u9519\\u8BEF,\\u53EA\\u80FD\\u4E3A String \\u6216 Object \\u7C7B\\u578B\");\n    return true;\n  }\n\n  if (typeof options === 'string' && options.length > 255) {\n    console.error(\"uni.report [options] \\u53C2\\u6570\\u957F\\u5EA6\\u4E0D\\u80FD\\u5927\\u4E8E 255\");\n    return true;\n  }\n\n  if (eventName === 'title' && typeof options !== 'string') {\n    console.error('uni.report [eventName] 参数为 title 时，[options] 参数只能为 String 类型');\n    return true;\n  }\n};\n\nvar PagesJson = __webpack_require__(/*! uni-pages?{\"type\":\"style\"} */ 8).default;\nvar statConfig = __webpack_require__(/*! uni-stat-config */ 9).default || __webpack_require__(/*! uni-stat-config */ 9);\n\nvar resultOptions = uni.getSystemInfoSync();var\n\nUtil = /*#__PURE__*/function () {\n  function Util() {_classCallCheck(this, Util);\n    this.self = '';\n    this._retry = 0;\n    this._platform = '';\n    this._query = {};\n    this._navigationBarTitle = {\n      config: '',\n      page: '',\n      report: '',\n      lt: '' };\n\n    this._operatingTime = 0;\n    this._reportingRequestData = {\n      '1': [],\n      '11': [] };\n\n    this.__prevent_triggering = false;\n\n    this.__licationHide = false;\n    this.__licationShow = false;\n    this._lastPageRoute = '';\n    this.statData = {\n      uuid: getUuid(),\n      ut: getPlatformName(),\n      mpn: getPackName(),\n      ak: statConfig.appid,\n      usv: STAT_VERSION,\n      v: getVersion(),\n      ch: getChannel(),\n      cn: '',\n      pn: '',\n      ct: '',\n      t: getTime(),\n      tt: '',\n      p: resultOptions.platform === 'android' ? 'a' : 'i',\n      brand: resultOptions.brand || '',\n      md: resultOptions.model,\n      sv: resultOptions.system.replace(/(Android|iOS)\\s/, ''),\n      mpsdk: resultOptions.SDKVersion || '',\n      mpv: resultOptions.version || '',\n      lang: resultOptions.language,\n      pr: resultOptions.pixelRatio,\n      ww: resultOptions.windowWidth,\n      wh: resultOptions.windowHeight,\n      sw: resultOptions.screenWidth,\n      sh: resultOptions.screenHeight };\n\n\n  }_createClass(Util, [{ key: \"_applicationShow\", value: function _applicationShow()\n\n    {\n      if (this.__licationHide) {\n        getLastTime();\n        var time = getResidenceTime('app');\n        if (time.overtime) {\n          var options = {\n            path: this._lastPageRoute,\n            scene: this.statData.sc };\n\n          this._sendReportRequest(options);\n        }\n        this.__licationHide = false;\n      }\n    } }, { key: \"_applicationHide\", value: function _applicationHide(\n\n    self, type) {\n\n      this.__licationHide = true;\n      getLastTime();\n      var time = getResidenceTime();\n      getFirstTime();\n      var route = getPageRoute(this);\n      this._sendHideRequest({\n        urlref: route,\n        urlref_ts: time.residenceTime },\n      type);\n    } }, { key: \"_pageShow\", value: function _pageShow()\n\n    {\n      var route = getPageRoute(this);\n      var routepath = getRoute();\n      this._navigationBarTitle.config = PagesJson &&\n      PagesJson.pages[routepath] &&\n      PagesJson.pages[routepath].titleNView &&\n      PagesJson.pages[routepath].titleNView.titleText ||\n      PagesJson &&\n      PagesJson.pages[routepath] &&\n      PagesJson.pages[routepath].navigationBarTitleText || '';\n\n      if (this.__licationShow) {\n        getFirstTime();\n        this.__licationShow = false;\n        // console.log('这是 onLauch 之后执行的第一次 pageShow ，为下次记录时间做准备');\n        this._lastPageRoute = route;\n        return;\n      }\n\n      getLastTime();\n      this._lastPageRoute = route;\n      var time = getResidenceTime('page');\n      if (time.overtime) {\n        var options = {\n          path: this._lastPageRoute,\n          scene: this.statData.sc };\n\n        this._sendReportRequest(options);\n      }\n      getFirstTime();\n    } }, { key: \"_pageHide\", value: function _pageHide()\n\n    {\n      if (!this.__licationHide) {\n        getLastTime();\n        var time = getResidenceTime('page');\n        this._sendPageRequest({\n          url: this._lastPageRoute,\n          urlref: this._lastPageRoute,\n          urlref_ts: time.residenceTime });\n\n        this._navigationBarTitle = {\n          config: '',\n          page: '',\n          report: '',\n          lt: '' };\n\n        return;\n      }\n    } }, { key: \"_login\", value: function _login()\n\n    {\n      this._sendEventRequest({\n        key: 'login' },\n      0);\n    } }, { key: \"_share\", value: function _share()\n\n    {\n      this._sendEventRequest({\n        key: 'share' },\n      0);\n    } }, { key: \"_payment\", value: function _payment(\n    key) {\n      this._sendEventRequest({\n        key: key },\n      0);\n    } }, { key: \"_sendReportRequest\", value: function _sendReportRequest(\n    options) {\n\n      this._navigationBarTitle.lt = '1';\n      var query = options.query && JSON.stringify(options.query) !== '{}' ? '?' + JSON.stringify(options.query) : '';\n      this.statData.lt = '1';\n      this.statData.url = options.path + query || '';\n      this.statData.t = getTime();\n      this.statData.sc = getScene(options.scene);\n      this.statData.fvts = getFirstVisitTime();\n      this.statData.lvts = getLastVisitTime();\n      this.statData.tvc = getTotalVisitCount();\n      if (getPlatformName() === 'n') {\n        this.getProperty();\n      } else {\n        this.getNetworkInfo();\n      }\n    } }, { key: \"_sendPageRequest\", value: function _sendPageRequest(\n\n    opt) {var\n\n      url =\n\n\n      opt.url,urlref = opt.urlref,urlref_ts = opt.urlref_ts;\n      this._navigationBarTitle.lt = '11';\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '11',\n        ut: this.statData.ut,\n        url: url,\n        tt: this.statData.tt,\n        urlref: urlref,\n        urlref_ts: urlref_ts,\n        ch: this.statData.ch,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }, { key: \"_sendHideRequest\", value: function _sendHideRequest(\n\n    opt, type) {var\n\n      urlref =\n\n      opt.urlref,urlref_ts = opt.urlref_ts;\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '3',\n        ut: this.statData.ut,\n        urlref: urlref,\n        urlref_ts: urlref_ts,\n        ch: this.statData.ch,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options, type);\n    } }, { key: \"_sendEventRequest\", value: function _sendEventRequest()\n\n\n\n    {var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},_ref$key = _ref.key,key = _ref$key === void 0 ? '' : _ref$key,_ref$value = _ref.value,value = _ref$value === void 0 ? \"\" : _ref$value;\n      var route = this._lastPageRoute;\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '21',\n        ut: this.statData.ut,\n        url: route,\n        ch: this.statData.ch,\n        e_n: key,\n        e_v: typeof value === 'object' ? JSON.stringify(value) : value.toString(),\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }, { key: \"getNetworkInfo\", value: function getNetworkInfo()\n\n    {var _this = this;\n      uni.getNetworkType({\n        success: function success(result) {\n          _this.statData.net = result.networkType;\n          _this.getLocation();\n        } });\n\n    } }, { key: \"getProperty\", value: function getProperty()\n\n    {var _this2 = this;\n      plus.runtime.getProperty(plus.runtime.appid, function (wgtinfo) {\n        _this2.statData.v = wgtinfo.version || '';\n        _this2.getNetworkInfo();\n      });\n    } }, { key: \"getLocation\", value: function getLocation()\n\n    {var _this3 = this;\n      if (statConfig.getLocation) {\n        uni.getLocation({\n          type: 'wgs84',\n          geocode: true,\n          success: function success(result) {\n            if (result.address) {\n              _this3.statData.cn = result.address.country;\n              _this3.statData.pn = result.address.province;\n              _this3.statData.ct = result.address.city;\n            }\n\n            _this3.statData.lat = result.latitude;\n            _this3.statData.lng = result.longitude;\n            _this3.request(_this3.statData);\n          } });\n\n      } else {\n        this.statData.lat = 0;\n        this.statData.lng = 0;\n        this.request(this.statData);\n      }\n    } }, { key: \"request\", value: function request(\n\n    data, type) {var _this4 = this;\n      var time = getTime();\n      var title = this._navigationBarTitle;\n      data.ttn = title.page;\n      data.ttpj = title.config;\n      data.ttc = title.report;\n\n      var requestData = this._reportingRequestData;\n      if (getPlatformName() === 'n') {\n        requestData = uni.getStorageSync('__UNI__STAT__DATA') || {};\n      }\n      if (!requestData[data.lt]) {\n        requestData[data.lt] = [];\n      }\n      requestData[data.lt].push(data);\n\n      if (getPlatformName() === 'n') {\n        uni.setStorageSync('__UNI__STAT__DATA', requestData);\n      }\n      if (getPageResidenceTime() < OPERATING_TIME && !type) {\n        return;\n      }\n      var uniStatData = this._reportingRequestData;\n      if (getPlatformName() === 'n') {\n        uniStatData = uni.getStorageSync('__UNI__STAT__DATA');\n      }\n      // 时间超过，重新获取时间戳\n      setPageResidenceTime();\n      var firstArr = [];\n      var contentArr = [];\n      var lastArr = [];var _loop = function _loop(\n\n      i) {\n        var rd = uniStatData[i];\n        rd.forEach(function (elm) {\n          var newData = getSplicing(elm);\n          if (i === 0) {\n            firstArr.push(newData);\n          } else if (i === 3) {\n            lastArr.push(newData);\n          } else {\n            contentArr.push(newData);\n          }\n        });};for (var i in uniStatData) {_loop(i);\n      }\n\n      firstArr.push.apply(firstArr, contentArr.concat(lastArr));\n      var optionsData = {\n        usv: STAT_VERSION, //统计 SDK 版本号\n        t: time, //发送请求时的时间戮\n        requests: JSON.stringify(firstArr) };\n\n\n      this._reportingRequestData = {};\n      if (getPlatformName() === 'n') {\n        uni.removeStorageSync('__UNI__STAT__DATA');\n      }\n\n      if (data.ut === 'h5') {\n        this.imageRequest(optionsData);\n        return;\n      }\n\n      if (getPlatformName() === 'n' && this.statData.p === 'a') {\n        setTimeout(function () {\n          _this4._sendRequest(optionsData);\n        }, 200);\n        return;\n      }\n      this._sendRequest(optionsData);\n    } }, { key: \"_sendRequest\", value: function _sendRequest(\n    optionsData) {var _this5 = this;\n      uni.request({\n        url: STAT_URL,\n        method: 'POST',\n        // header: {\n        //   'content-type': 'application/json' // 默认值\n        // },\n        data: optionsData,\n        success: function success() {\n          // if (process.env.NODE_ENV === 'development') {\n          //   console.log('stat request success');\n          // }\n        },\n        fail: function fail(e) {\n          if (++_this5._retry < 3) {\n            setTimeout(function () {\n              _this5._sendRequest(optionsData);\n            }, 1000);\n          }\n        } });\n\n    }\n    /**\r\n       * h5 请求\r\n       */ }, { key: \"imageRequest\", value: function imageRequest(\n    data) {\n      var image = new Image();\n      var options = getSgin(GetEncodeURIComponentOptions(data)).options;\n      image.src = STAT_H5_URL + '?' + options;\n    } }, { key: \"sendEvent\", value: function sendEvent(\n\n    key, value) {\n      // 校验 type 参数\n      if (calibration(key, value)) return;\n\n      if (key === 'title') {\n        this._navigationBarTitle.report = value;\n        return;\n      }\n      this._sendEventRequest({\n        key: key,\n        value: typeof value === 'object' ? JSON.stringify(value) : value },\n      1);\n    } }]);return Util;}();var\n\n\n\nStat = /*#__PURE__*/function (_Util) {_inherits(Stat, _Util);_createClass(Stat, null, [{ key: \"getInstance\", value: function getInstance()\n    {\n      if (!this.instance) {\n        this.instance = new Stat();\n      }\n      return this.instance;\n    } }]);\n  function Stat() {var _this6;_classCallCheck(this, Stat);\n    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(Stat).call(this));\n    _this6.instance = null;\n    // 注册拦截器\n    if (typeof uni.addInterceptor === 'function' && \"development\" !== 'development') {\n      _this6.addInterceptorInit();\n      _this6.interceptLogin();\n      _this6.interceptShare(true);\n      _this6.interceptRequestPayment();\n    }return _this6;\n  }_createClass(Stat, [{ key: \"addInterceptorInit\", value: function addInterceptorInit()\n\n    {\n      var self = this;\n      uni.addInterceptor('setNavigationBarTitle', {\n        invoke: function invoke(args) {\n          self._navigationBarTitle.page = args.title;\n        } });\n\n    } }, { key: \"interceptLogin\", value: function interceptLogin()\n\n    {\n      var self = this;\n      uni.addInterceptor('login', {\n        complete: function complete() {\n          self._login();\n        } });\n\n    } }, { key: \"interceptShare\", value: function interceptShare(\n\n    type) {\n      var self = this;\n      if (!type) {\n        self._share();\n        return;\n      }\n      uni.addInterceptor('share', {\n        success: function success() {\n          self._share();\n        },\n        fail: function fail() {\n          self._share();\n        } });\n\n    } }, { key: \"interceptRequestPayment\", value: function interceptRequestPayment()\n\n    {\n      var self = this;\n      uni.addInterceptor('requestPayment', {\n        success: function success() {\n          self._payment('pay_success');\n        },\n        fail: function fail() {\n          self._payment('pay_fail');\n        } });\n\n    } }, { key: \"report\", value: function report(\n\n    options, self) {\n      this.self = self;\n      // if (process.env.NODE_ENV === 'development') {\n      //   console.log('report init');\n      // }\n      setPageResidenceTime();\n      this.__licationShow = true;\n      this._sendReportRequest(options, true);\n    } }, { key: \"load\", value: function load(\n\n    options, self) {\n      if (!self.$scope && !self.$mp) {\n        var page = getCurrentPages();\n        self.$scope = page[page.length - 1];\n      }\n      this.self = self;\n      this._query = options;\n    } }, { key: \"show\", value: function show(\n\n    self) {\n      this.self = self;\n      if (getPageTypes(self)) {\n        this._pageShow(self);\n      } else {\n        this._applicationShow(self);\n      }\n    } }, { key: \"ready\", value: function ready(\n\n    self) {\n      // this.self = self;\n      // if (getPageTypes(self)) {\n      //   this._pageShow(self);\n      // }\n    } }, { key: \"hide\", value: function hide(\n    self) {\n      this.self = self;\n      if (getPageTypes(self)) {\n        this._pageHide(self);\n      } else {\n        this._applicationHide(self, true);\n      }\n    } }, { key: \"error\", value: function error(\n    em) {\n      if (this._platform === 'devtools') {\n        if (true) {\n          console.info('当前运行环境为开发者工具，不上报数据。');\n        }\n        // return;\n      }\n      var emVal = '';\n      if (!em.message) {\n        emVal = JSON.stringify(em);\n      } else {\n        emVal = em.stack;\n      }\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '31',\n        ut: this.statData.ut,\n        ch: this.statData.ch,\n        mpsdk: this.statData.mpsdk,\n        mpv: this.statData.mpv,\n        v: this.statData.v,\n        em: emVal,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }]);return Stat;}(Util);\n\n\nvar stat = Stat.getInstance();\nvar isHide = false;\nvar lifecycle = {\n  onLaunch: function onLaunch(options) {\n    stat.report(options, this);\n  },\n  onReady: function onReady() {\n    stat.ready(this);\n  },\n  onLoad: function onLoad(options) {\n    stat.load(options, this);\n    // 重写分享，获取分享上报事件\n    if (this.$scope && this.$scope.onShareAppMessage) {\n      var oldShareAppMessage = this.$scope.onShareAppMessage;\n      this.$scope.onShareAppMessage = function (options) {\n        stat.interceptShare(false);\n        return oldShareAppMessage.call(this, options);\n      };\n    }\n  },\n  onShow: function onShow() {\n    isHide = false;\n    stat.show(this);\n  },\n  onHide: function onHide() {\n    isHide = true;\n    stat.hide(this);\n  },\n  onUnload: function onUnload() {\n    if (isHide) {\n      isHide = false;\n      return;\n    }\n    stat.hide(this);\n  },\n  onError: function onError(e) {\n    stat.error(e);\n  } };\n\n\nfunction main() {\n  if (true) {\n    uni.report = function (type, options) {};\n  } else { var Vue; }\n}\n\nmain();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n");

/***/ }),

/***/ 7:
/*!******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/package.json ***!
  \******************************************************/
/*! exports provided: _from, _id, _inBundle, _integrity, _location, _phantomChildren, _requested, _requiredBy, _resolved, _shasum, _spec, _where, author, bugs, bundleDependencies, deprecated, description, devDependencies, files, gitHead, homepage, license, main, name, repository, scripts, version, default */
/***/ (function(module) {

eval("module.exports = {\"_from\":\"@dcloudio/uni-stat@next\",\"_id\":\"@dcloudio/uni-stat@2.0.0-26420200313001\",\"_inBundle\":false,\"_integrity\":\"sha512-7dPuazTiDmUyRcw+WW+UlWGKH0eeCUB+p0P4pJVKEHjpdXnXgvDQCSdJk764NH99TfsUycnuxecP5oHckVa88g==\",\"_location\":\"/@dcloudio/uni-stat\",\"_phantomChildren\":{},\"_requested\":{\"type\":\"tag\",\"registry\":true,\"raw\":\"@dcloudio/uni-stat@next\",\"name\":\"@dcloudio/uni-stat\",\"escapedName\":\"@dcloudio%2funi-stat\",\"scope\":\"@dcloudio\",\"rawSpec\":\"next\",\"saveSpec\":null,\"fetchSpec\":\"next\"},\"_requiredBy\":[\"#USER\",\"/\",\"/@dcloudio/vue-cli-plugin-uni\"],\"_resolved\":\"https://registry.npmjs.org/@dcloudio/uni-stat/-/uni-stat-2.0.0-26420200313001.tgz\",\"_shasum\":\"a006e329e033cd412accfa635f8933dbb822a9c3\",\"_spec\":\"@dcloudio/uni-stat@next\",\"_where\":\"/Users/guoshengqiang/Documents/dcloud-plugins/release/uniapp-cli\",\"author\":\"\",\"bugs\":{\"url\":\"https://github.com/dcloudio/uni-app/issues\"},\"bundleDependencies\":false,\"deprecated\":false,\"description\":\"\",\"devDependencies\":{\"@babel/core\":\"^7.5.5\",\"@babel/preset-env\":\"^7.5.5\",\"eslint\":\"^6.1.0\",\"rollup\":\"^1.19.3\",\"rollup-plugin-babel\":\"^4.3.3\",\"rollup-plugin-clear\":\"^2.0.7\",\"rollup-plugin-commonjs\":\"^10.0.2\",\"rollup-plugin-copy\":\"^3.1.0\",\"rollup-plugin-eslint\":\"^7.0.0\",\"rollup-plugin-json\":\"^4.0.0\",\"rollup-plugin-node-resolve\":\"^5.2.0\",\"rollup-plugin-replace\":\"^2.2.0\",\"rollup-plugin-uglify\":\"^6.0.2\"},\"files\":[\"dist\",\"package.json\",\"LICENSE\"],\"gitHead\":\"b1fdbafab5dd4673cff64188a5203d0c947e4f50\",\"homepage\":\"https://github.com/dcloudio/uni-app#readme\",\"license\":\"Apache-2.0\",\"main\":\"dist/index.js\",\"name\":\"@dcloudio/uni-stat\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/dcloudio/uni-app.git\",\"directory\":\"packages/uni-stat\"},\"scripts\":{\"build\":\"NODE_ENV=production rollup -c rollup.config.js\",\"dev\":\"NODE_ENV=development rollup -w -c rollup.config.js\"},\"version\":\"2.0.0-26420200313001\"};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI3LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7\n");

/***/ }),

/***/ 8:
/*!***************************************************************************************!*\
  !*** C:/Users/DELL/Documents/HBuilderProjects/CanNengApp/pages.json?{"type":"style"} ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = { \"pages\": { \"pages/login/login\": {}, \"pages/spectrum/spectrum\": {}, \"pages/condition/condition\": {}, \"pages/dataIntegrityDetails/dataIntegrityDetails\": {}, \"pages/terminalStatus/terminalStatus\": {}, \"pages/chooseLine/chooseLine\": {}, \"pages/index/index\": {}, \"pages/report/report\": {}, \"pages/information/information\": { \"enablePullDownRefresh\": true }, \"pages/me/me\": {}, \"pages/levelUp/levelUp\": {}, \"pages/transientDetails/transientDetails\": {}, \"pages/preview/preview\": {}, \"pages/vercode/vercode\": {}, \"pages/forgetPassword/forgetPassword\": {}, \"pages/forgetPasswordVercode/forgetPasswordVercode\": {}, \"pages/setNewPassword/setNewPassword\": {}, \"pages/fastLogin/fastLogin\": {}, \"pages/fastLoginVercode/fastLoginVercode\": {}, \"pages/fastLoginSetPassword/fastLoginSetPassword\": {}, \"pages/data/data\": {}, \"pages/history/history\": {}, \"pages/userAgreement/userAgreement\": { \"navigationStyle\": \"default\", \"navigationBarTitleText\": \"用户协议\", \"titleNView\": { \"type\": \"default\", \"titleText\": \"用户协议\" } }, \"pages/privacyAgreement/privacyAgreement\": { \"navigationStyle\": \"default\", \"navigationBarTitleText\": \"隐私协议\", \"titleNView\": { \"type\": \"default\", \"titleText\": \"隐私协议\" } }, \"pages/modifyPassword/modifyPassword\": {}, \"pages/modifyPasswordSetpassword/modifyPasswordSetpassword\": {}, \"pages/modifyUserPhoneNum/modifyUserPhoneNum\": {}, \"pages/modifyUserPhoneNumSetPhoneNum/modifyUserPhoneNumSetPhoneNum\": {}, \"pages/systemIntroduce/systemIntroduce\": { \"navigationStyle\": \"default\", \"navigationBarTitleText\": \"系统介绍\", \"titleNView\": { \"type\": \"default\", \"titleText\": \"系统介绍\" } }, \"pages/companyIntroduce/companyIntroduce\": { \"navigationStyle\": \"default\", \"navigationBarTitleText\": \"公司简介\", \"titleNView\": { \"type\": \"default\", \"titleText\": \"公司简介\" } }, \"pages/setting/setting\": {}, \"pages/steady/steady\": {}, \"pages/steadyDetails/steadyDetails\": {}, \"pages/steadyIndex/steadyIndex\": {}, \"pages/terminal/terminal\": {}, \"pages/terminalDetails/terminalDetails\": {}, \"pages/myApply/myApply\": {}, \"pages/setNewMessage/setNewMessage\": {}, \"pages/terminalHistory/terminalHistory\": {}, \"pages/transientWave/transientWave\": {}, \"pages/us/us\": {}, \"pages/terminalStatusAll/terminalStatusAll\": {} }, \"globalStyle\": { \"navigationStyle\": \"custom\", \"navigationBarTextStyle\": \"black\", \"navigationBarBackgroundColor\": \"#F8F8F8\", \"backgroundColor\": \"#F8F8F8\" } };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJzR0FBZSxFQUFDLFNBQVEsRUFBQyxxQkFBb0IsRUFBckIsRUFBd0IsMkJBQTBCLEVBQWxELEVBQXFELDZCQUE0QixFQUFqRixFQUFvRixtREFBa0QsRUFBdEksRUFBeUksdUNBQXNDLEVBQS9LLEVBQWtMLCtCQUE4QixFQUFoTixFQUFtTixxQkFBb0IsRUFBdk8sRUFBME8sdUJBQXNCLEVBQWhRLEVBQW1RLGlDQUFnQyxFQUFDLHlCQUF3QixJQUF6QixFQUFuUyxFQUFrVSxlQUFjLEVBQWhWLEVBQW1WLHlCQUF3QixFQUEzVyxFQUE4VywyQ0FBMEMsRUFBeFosRUFBMloseUJBQXdCLEVBQW5iLEVBQXNiLHlCQUF3QixFQUE5YyxFQUFpZCx1Q0FBc0MsRUFBdmYsRUFBMGYscURBQW9ELEVBQTlpQixFQUFpakIsdUNBQXNDLEVBQXZsQixFQUEwbEIsNkJBQTRCLEVBQXRuQixFQUF5bkIsMkNBQTBDLEVBQW5xQixFQUFzcUIsbURBQWtELEVBQXh0QixFQUEydEIsbUJBQWtCLEVBQTd1QixFQUFndkIseUJBQXdCLEVBQXh3QixFQUEyd0IscUNBQW9DLEVBQUMsbUJBQWtCLFNBQW5CLEVBQTZCLDBCQUF5QixNQUF0RCxFQUE2RCxjQUFhLEVBQUMsUUFBTyxTQUFSLEVBQWtCLGFBQVksTUFBOUIsRUFBMUUsRUFBL3lCLEVBQWc2QiwyQ0FBMEMsRUFBQyxtQkFBa0IsU0FBbkIsRUFBNkIsMEJBQXlCLE1BQXRELEVBQTZELGNBQWEsRUFBQyxRQUFPLFNBQVIsRUFBa0IsYUFBWSxNQUE5QixFQUExRSxFQUExOEIsRUFBMmpDLHVDQUFzQyxFQUFqbUMsRUFBb21DLDZEQUE0RCxFQUFocUMsRUFBbXFDLCtDQUE4QyxFQUFqdEMsRUFBb3RDLHFFQUFvRSxFQUF4eEMsRUFBMnhDLHlDQUF3QyxFQUFDLG1CQUFrQixTQUFuQixFQUE2QiwwQkFBeUIsTUFBdEQsRUFBNkQsY0FBYSxFQUFDLFFBQU8sU0FBUixFQUFrQixhQUFZLE1BQTlCLEVBQTFFLEVBQW4wQyxFQUFvN0MsMkNBQTBDLEVBQUMsbUJBQWtCLFNBQW5CLEVBQTZCLDBCQUF5QixNQUF0RCxFQUE2RCxjQUFhLEVBQUMsUUFBTyxTQUFSLEVBQWtCLGFBQVksTUFBOUIsRUFBMUUsRUFBOTlDLEVBQStrRCx5QkFBd0IsRUFBdm1ELEVBQTBtRCx1QkFBc0IsRUFBaG9ELEVBQW1vRCxxQ0FBb0MsRUFBdnFELEVBQTBxRCxpQ0FBZ0MsRUFBMXNELEVBQTZzRCwyQkFBMEIsRUFBdnVELEVBQTB1RCx5Q0FBd0MsRUFBbHhELEVBQXF4RCx5QkFBd0IsRUFBN3lELEVBQWd6RCxxQ0FBb0MsRUFBcDFELEVBQXUxRCx5Q0FBd0MsRUFBLzNELEVBQWs0RCxxQ0FBb0MsRUFBdDZELEVBQXk2RCxlQUFjLEVBQXY3RCxFQUEwN0QsNkNBQTRDLEVBQXQrRCxFQUFULEVBQW0vRCxlQUFjLEVBQUMsbUJBQWtCLFFBQW5CLEVBQTRCLDBCQUF5QixPQUFyRCxFQUE2RCxnQ0FBK0IsU0FBNUYsRUFBc0csbUJBQWtCLFNBQXhILEVBQWpnRSxFIiwiZmlsZSI6IjguanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XCJwYWdlc1wiOntcInBhZ2VzL2xvZ2luL2xvZ2luXCI6e30sXCJwYWdlcy9zcGVjdHJ1bS9zcGVjdHJ1bVwiOnt9LFwicGFnZXMvY29uZGl0aW9uL2NvbmRpdGlvblwiOnt9LFwicGFnZXMvZGF0YUludGVncml0eURldGFpbHMvZGF0YUludGVncml0eURldGFpbHNcIjp7fSxcInBhZ2VzL3Rlcm1pbmFsU3RhdHVzL3Rlcm1pbmFsU3RhdHVzXCI6e30sXCJwYWdlcy9jaG9vc2VMaW5lL2Nob29zZUxpbmVcIjp7fSxcInBhZ2VzL2luZGV4L2luZGV4XCI6e30sXCJwYWdlcy9yZXBvcnQvcmVwb3J0XCI6e30sXCJwYWdlcy9pbmZvcm1hdGlvbi9pbmZvcm1hdGlvblwiOntcImVuYWJsZVB1bGxEb3duUmVmcmVzaFwiOnRydWV9LFwicGFnZXMvbWUvbWVcIjp7fSxcInBhZ2VzL2xldmVsVXAvbGV2ZWxVcFwiOnt9LFwicGFnZXMvdHJhbnNpZW50RGV0YWlscy90cmFuc2llbnREZXRhaWxzXCI6e30sXCJwYWdlcy9wcmV2aWV3L3ByZXZpZXdcIjp7fSxcInBhZ2VzL3ZlcmNvZGUvdmVyY29kZVwiOnt9LFwicGFnZXMvZm9yZ2V0UGFzc3dvcmQvZm9yZ2V0UGFzc3dvcmRcIjp7fSxcInBhZ2VzL2ZvcmdldFBhc3N3b3JkVmVyY29kZS9mb3JnZXRQYXNzd29yZFZlcmNvZGVcIjp7fSxcInBhZ2VzL3NldE5ld1Bhc3N3b3JkL3NldE5ld1Bhc3N3b3JkXCI6e30sXCJwYWdlcy9mYXN0TG9naW4vZmFzdExvZ2luXCI6e30sXCJwYWdlcy9mYXN0TG9naW5WZXJjb2RlL2Zhc3RMb2dpblZlcmNvZGVcIjp7fSxcInBhZ2VzL2Zhc3RMb2dpblNldFBhc3N3b3JkL2Zhc3RMb2dpblNldFBhc3N3b3JkXCI6e30sXCJwYWdlcy9kYXRhL2RhdGFcIjp7fSxcInBhZ2VzL2hpc3RvcnkvaGlzdG9yeVwiOnt9LFwicGFnZXMvdXNlckFncmVlbWVudC91c2VyQWdyZWVtZW50XCI6e1wibmF2aWdhdGlvblN0eWxlXCI6XCJkZWZhdWx0XCIsXCJuYXZpZ2F0aW9uQmFyVGl0bGVUZXh0XCI6XCLnlKjmiLfljY/orq5cIixcInRpdGxlTlZpZXdcIjp7XCJ0eXBlXCI6XCJkZWZhdWx0XCIsXCJ0aXRsZVRleHRcIjpcIueUqOaIt+WNj+iurlwifX0sXCJwYWdlcy9wcml2YWN5QWdyZWVtZW50L3ByaXZhY3lBZ3JlZW1lbnRcIjp7XCJuYXZpZ2F0aW9uU3R5bGVcIjpcImRlZmF1bHRcIixcIm5hdmlnYXRpb25CYXJUaXRsZVRleHRcIjpcIumakOengeWNj+iurlwiLFwidGl0bGVOVmlld1wiOntcInR5cGVcIjpcImRlZmF1bHRcIixcInRpdGxlVGV4dFwiOlwi6ZqQ56eB5Y2P6K6uXCJ9fSxcInBhZ2VzL21vZGlmeVBhc3N3b3JkL21vZGlmeVBhc3N3b3JkXCI6e30sXCJwYWdlcy9tb2RpZnlQYXNzd29yZFNldHBhc3N3b3JkL21vZGlmeVBhc3N3b3JkU2V0cGFzc3dvcmRcIjp7fSxcInBhZ2VzL21vZGlmeVVzZXJQaG9uZU51bS9tb2RpZnlVc2VyUGhvbmVOdW1cIjp7fSxcInBhZ2VzL21vZGlmeVVzZXJQaG9uZU51bVNldFBob25lTnVtL21vZGlmeVVzZXJQaG9uZU51bVNldFBob25lTnVtXCI6e30sXCJwYWdlcy9zeXN0ZW1JbnRyb2R1Y2Uvc3lzdGVtSW50cm9kdWNlXCI6e1wibmF2aWdhdGlvblN0eWxlXCI6XCJkZWZhdWx0XCIsXCJuYXZpZ2F0aW9uQmFyVGl0bGVUZXh0XCI6XCLns7vnu5/ku4vnu41cIixcInRpdGxlTlZpZXdcIjp7XCJ0eXBlXCI6XCJkZWZhdWx0XCIsXCJ0aXRsZVRleHRcIjpcIuezu+e7n+S7i+e7jVwifX0sXCJwYWdlcy9jb21wYW55SW50cm9kdWNlL2NvbXBhbnlJbnRyb2R1Y2VcIjp7XCJuYXZpZ2F0aW9uU3R5bGVcIjpcImRlZmF1bHRcIixcIm5hdmlnYXRpb25CYXJUaXRsZVRleHRcIjpcIuWFrOWPuOeugOS7i1wiLFwidGl0bGVOVmlld1wiOntcInR5cGVcIjpcImRlZmF1bHRcIixcInRpdGxlVGV4dFwiOlwi5YWs5Y+4566A5LuLXCJ9fSxcInBhZ2VzL3NldHRpbmcvc2V0dGluZ1wiOnt9LFwicGFnZXMvc3RlYWR5L3N0ZWFkeVwiOnt9LFwicGFnZXMvc3RlYWR5RGV0YWlscy9zdGVhZHlEZXRhaWxzXCI6e30sXCJwYWdlcy9zdGVhZHlJbmRleC9zdGVhZHlJbmRleFwiOnt9LFwicGFnZXMvdGVybWluYWwvdGVybWluYWxcIjp7fSxcInBhZ2VzL3Rlcm1pbmFsRGV0YWlscy90ZXJtaW5hbERldGFpbHNcIjp7fSxcInBhZ2VzL215QXBwbHkvbXlBcHBseVwiOnt9LFwicGFnZXMvc2V0TmV3TWVzc2FnZS9zZXROZXdNZXNzYWdlXCI6e30sXCJwYWdlcy90ZXJtaW5hbEhpc3RvcnkvdGVybWluYWxIaXN0b3J5XCI6e30sXCJwYWdlcy90cmFuc2llbnRXYXZlL3RyYW5zaWVudFdhdmVcIjp7fSxcInBhZ2VzL3VzL3VzXCI6e30sXCJwYWdlcy90ZXJtaW5hbFN0YXR1c0FsbC90ZXJtaW5hbFN0YXR1c0FsbFwiOnt9fSxcImdsb2JhbFN0eWxlXCI6e1wibmF2aWdhdGlvblN0eWxlXCI6XCJjdXN0b21cIixcIm5hdmlnYXRpb25CYXJUZXh0U3R5bGVcIjpcImJsYWNrXCIsXCJuYXZpZ2F0aW9uQmFyQmFja2dyb3VuZENvbG9yXCI6XCIjRjhGOEY4XCIsXCJiYWNrZ3JvdW5kQ29sb3JcIjpcIiNGOEY4RjhcIn19Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n");

/***/ }),

/***/ 9:
/*!**************************************************************************************!*\
  !*** C:/Users/DELL/Documents/HBuilderProjects/CanNengApp/pages.json?{"type":"stat"} ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = { \"appid\": \"__UNI__9894FCF\" };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJzR0FBZSxFQUFDLFNBQVEsZ0JBQVQsRSIsImZpbGUiOiI5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1wiYXBwaWRcIjpcIl9fVU5JX185ODk0RkNGXCJ9Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9\n");

/***/ })

}]);